package partials

import (
	"bytes"
	"fmt"
	"github.com/damongolding/immich-kiosk/internal/common"
	"math"
	"strings"
)

// Head renders the <head> content
templ Head(viewData common.ViewData) {
	<meta charset="UTF-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
	<meta name="version" content={ viewData.KioskVersion }/>
	<meta name="description" content="Highly configurable slideshows for displaying Immich assets on browsers and devices"/>
	<meta name="mobile-web-app-capable" content="yes"/>
	<meta name="apple-mobile-web-app-capable" content="yes"/>
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"/>
	<meta name="apple-mobile-web-app-status-bar" content="black-translucent"/>
	<meta name="theme-color" content="black"/>
	<title>Immich Kiosk</title>
	<link rel="manifest" href="/assets/manifest.json"/>
	<link rel="stylesheet" href={ string(templ.URL(fmt.Sprintf("/assets/css/kiosk.%s.css", viewData.KioskVersion))) }/>
	<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/apple-touch-icon.png"/>
	<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicon-32x32.png"/>
	<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicon-16x16.png"/>
	if viewData.HideCursor {
		<style>
			html, body {
			    cursor: none;
			}
		</style>
	}
	switch viewData.ImageEffect {
		case "zoom":
			@templ.Raw(imageZoomKeyframes(viewData.ImageEffectAmount, viewData.UseGpu))
		case "smart-zoom":
			@templ.Raw(imageSmartZoomKeyframes(viewData.ImageEffectAmount, viewData.UseGpu))
	}
	@templ.Raw(baseFontSize(viewData.FontSize))
	if len(viewData.CustomCSS) > 0 && viewData.Config.CustomCSS {
		@templ.Raw(customCss(viewData.CustomCSS))
	}
}

// baseFontSize generates CSS for font sizing
func baseFontSize(fontSize int) string {
	return fmt.Sprintf(`
		<style>
            html,
            body {
                font-size: %v%%;
            }

		    @media screen and (max-width: 31.25rem) {
				html,
				body {
				    font-size: %v%% !important;
				}
			}
		</style>`, fontSize, fontSize-20)
}

// imageSmartZoomKeyframes generates CSS keyframes for smart zoom animations
func imageSmartZoomKeyframes(zoomAmount int, useGpu bool) string {
	zoom := math.Max(float64(zoomAmount)/100.0, 1.0)

	scaleFunction := "scale3d"
	scaleValues := "%.2f, %.2f, %.2f"

	if !useGpu {
		scaleFunction = "scale"
		scaleValues = "%.2f"
	}

	template := strings.ReplaceAll(`
    <style>
        @-webkit-keyframes image-smart-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: inherit;
                transform-origin: inherit;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                transform-origin: center;
            }
        }

        @-moz-keyframes image-smart-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -moz-transform-origin: inherit;
                transform-origin: inherit;
            }

            to {
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -moz-transform-origin: center;
                transform-origin: center;
            }
        }

        @-o-keyframes image-smart-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -o-transform-origin: inherit;
                transform-origin: inherit;
            }

            to {
                transform: scale3d(1, 1, 1);
                -o-transform-origin: center;
                transform-origin: center;
            }
        }

        @keyframes image-smart-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: inherit;
                -moz-transform-origin: inherit;
                -o-transform-origin: inherit;
                transform-origin: inherit;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }
        }

        @-webkit-keyframes image-smart-zoom-in {
            from {
                -webkit-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: inherit;
                transform-origin: inherit;
            }
        }

        @-moz-keyframes image-smart-zoom-in {
            from {
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -moz-transform-origin: center;
                transform-origin: center;
            }

            to {
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -moz-transform-origin: inherit;
                transform-origin: inherit;
            }
        }

        @-o-keyframes image-smart-zoom-in {
            from {
                transform: scale3d(1, 1, 1);
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                transform: scale3d(%[1]s);
                -o-transform-origin: inherit;
                transform-origin: inherit;
            }
        }

        @keyframes image-smart-zoom-in {
            from {
                -webkit-transform: scale3d(1, 1, 1);
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: inherit;
                -moz-transform-origin: inherit;
                -o-transform-origin: inherit;
                transform-origin: inherit;
            }
        }
    </style>`, "scale3d", scaleFunction)

	formattedScale := fmt.Sprintf(scaleValues, zoom, zoom, zoom)

	if !useGpu {
		formattedScale = fmt.Sprintf(scaleValues, zoom)
		template = strings.ReplaceAll(template, "1, 1, 1", "1")
	}

	return fmt.Sprintf(template, formattedScale)
}

// imageZoomKeyframes generates CSS keyframes for basic zoom animations
func imageZoomKeyframes(zoomAmount int, useGpu bool) string {
	zoom := math.Max(float64(zoomAmount)/100.0, 1.0)

	scaleFunction := "scale3d"
	scaleValues := "%.2f, %.2f, %.2f"

	if !useGpu {
		scaleFunction = "scale"
		scaleValues = "%.2f"
	}

	template := strings.ReplaceAll(`
	<style>
        @-webkit-keyframes image-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                transform-origin: center;
            }
        }

        @-moz-keyframes image-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                transform-origin: center;
            }
        }

        @-o-keyframes image-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }
        }

        @keyframes image-zoom-out {
            from {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(1, 1, 1);
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }
        }

        @-webkit-keyframes image-zoom-in {
            from {
                -webkit-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                transform-origin: center;
            }
        }

        @-moz-keyframes image-zoom-in {
            from {
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -moz-transform-origin: center;
                transform-origin: center;
            }

            to {
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -moz-transform-origin: center;
                transform-origin: center;
            }
        }

        @-o-keyframes image-zoom-in {
            from {
                transform: scale3d(1, 1, 1);
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                transform: scale3d(%[1]s);
                -o-transform-origin: center;
                transform-origin: center;
            }
        }

        @keyframes image-zoom-in {
            from {
                -webkit-transform: scale3d(1, 1, 1);
                -moz-transform: scale3d(1, 1, 1);
                transform: scale3d(1, 1, 1);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }

            to {
                -webkit-transform: scale3d(%[1]s);
                -moz-transform: scale3d(%[1]s);
                transform: scale3d(%[1]s);
                -webkit-transform-origin: center;
                -moz-transform-origin: center;
                -o-transform-origin: center;
                transform-origin: center;
            }
        }
	</style>`, "scale3d", scaleFunction)

	formattedScale := fmt.Sprintf(scaleValues, zoom, zoom, zoom)

	if !useGpu {
		formattedScale = fmt.Sprintf(scaleValues, zoom)
		template = strings.ReplaceAll(template, "1, 1, 1", "1")
	}

	return fmt.Sprintf(template, formattedScale)

}

// customCss wraps CSS content in style tags and removes null bytes
func customCss(css []byte) string {
	css = bytes.Replace(css, []byte{0}, []byte{}, -1)
	return fmt.Sprintf("<style>%s</style>", css)
}
