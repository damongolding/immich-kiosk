package partials

import (
	"context"
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/damongolding/immich-kiosk/internal/common"
	"github.com/damongolding/immich-kiosk/internal/immich"
	"github.com/damongolding/immich-kiosk/internal/kiosk"
	"github.com/damongolding/immich-kiosk/internal/utils"
	"github.com/damongolding/immich-kiosk/internal/webhooks"

	"github.com/dustin/go-humanize"
	"io"
	"net/url"
	"path"
	"strconv"
	"strings"
	"time"
)

// renderMoreInfo generates the HTML for displaying detailed information about images
// It shows camera data, original image data, detected people, and optional QR codes/links
// Parameters:
//   - viewData: The view data containing images and display options
//   - secret: The secret key for generating webhook signatures
templ RenderMoreInfo(viewData common.ViewData, secret string) {
	<div id="more-info" hx-swap-oob="true">
		for i, img := range viewData.Assets {
			<div class={ "more-info--image", "more-info--image-"+viewData.MenuPosition }>
				<div class="more-info--image--data">
					if !viewData.UseOfflineMode {
						<div class="more-info--button-group">
							@LikeButton(
								img.ImmichAsset.ID,
								img.ImmichAsset.IsFavorite,
								false,
								img.ImmichAsset.UserOwnsAsset(viewData.RequestID, viewData.DeviceID),
								secret,
							)
							@HideButton(
								img.ImmichAsset.ID,
								img.ImmichAsset.HasTag(kiosk.TagSkip),
								img.ImmichAsset.UserOwnsAsset(viewData.RequestID, viewData.DeviceID),
								secret,
							)
						</div>
					}
					@originalImageTimeLocation(viewData, i, viewData.HideCountries)
					@cameraData(img.ImmichAsset.ExifInfo)
					@originalAssetData(img.ImmichAsset)
					@people(img.ImmichAsset.People, viewData.ShowAgeYearUnit, viewData.AgeSwitchToYearsAfter, img.ImmichAsset.LocalDateTime)
					@tags(img.ImmichAsset.Tags)
					<div class="more-info--button-group">
						if viewData.ShowMoreInfoImageLink {
							<a class="more-info--image-link" href={ templ.SafeURL(ImmichAssetUrl(viewData.ImmichURL, viewData.ImmichExternalURL, img.ImmichAsset.ID)) } target="_blank">
								View in Immich
							</a>
						}
						if viewData.Webhooks.ContainsEvent(webhooks.UserWebhookTriggerInfoOverlay.String()) {
							<button
								class="more-info--webhook"
								hx-post="/webhooks"
								hx-trigger="click throttle:2s"
								hx-include=".kiosk-history--entry"
								hx-headers={ fmt.Sprintf(`{"X-Timestamp": "%d", "X-Signature": "%s", "kiosk-webhook-event": "user.webhook.trigger.info_overlay"}`, time.Now().Unix(), WebhookSignature(secret)) }
								hx-swap="textContent"
							>
								Trigger webhook
							</button>
						}
					</div>
				</div>
				if viewData.ShowMoreInfoQrCode {
					<div class="more-info--image--qr-code">
						<img src={ utils.CreateQrCode(ImmichAssetUrl(viewData.ImmichURL, viewData.ImmichExternalURL, img.ImmichAsset.ID)) }/>
					</div>
				}
			</div>
		}
	</div>
}

// LikeButton generates a "like" button component for an asset
// Parameters:
//   - ID: The unique identifier of the asset
//   - isLiked: Whether the asset is currently liked
//   - liked: Whether to show the liked animation
//   - isButtonEnabled: Whether the button should be enabled
//   - secret: Secret key for webhook signatures
templ LikeButton(ID string, isLiked bool, liked bool, isButtonEnabled bool, secret string) {
	{{
		webhook := webhooks.UserLikeInfoOverlay
		if isLiked {
			webhook = webhooks.UserUnlikeInfoOverlay
		}
	}}
	<button
		if isLiked {
			hx-post="/asset/unlike"
			title="Unlike asset"
		} else {
			hx-post="/asset/like"
			title="Like asset"
		}
		class={ "more-info--like-asset", templ.KV("is-liked", isLiked) }
		hx-trigger="click throttle:2s"
		hx-vals={ fmt.Sprintf("{\"assetID\": \"%s\"}", ID) }
		hx-swap="outerHTML"
		disabled?={ !isButtonEnabled }
	>
		<div
			hx-post="/webhooks"
			hx-trigger="click from:closest .more-info--like-asset"
			hx-headers={ fmt.Sprintf(`{"X-Timestamp": "%d", "X-Signature": "%s", "kiosk-webhook-event": "%s"}`, time.Now().Unix(), WebhookSignature(secret), webhook) }
			hx-include=".kiosk-history--entry"
			hx-swap="none"
			style="display: none"
		></div>
		if liked {
			<div class="liked">
				<div></div>
				<div></div>
				<div></div>
				<div></div>
				<div></div>
				<div></div>
				<div></div>
				<div></div>
			</div>
		}
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
			<!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
			<path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"></path>
		</svg>
		<span>
			if isLiked {
				Liked
			} else {
				Like
			}
		</span>
	</button>
}

// HideButton generates a button component to hide/show an asset
// Parameters:
//   - ID: The unique identifier of the asset
//   - isHidden: Whether the asset is currently hidden
//   - isButtonEnabled: Whether the button is enabled
//   - secret: Secret key for webhook signatures
templ HideButton(ID string, isHidden bool, isButtonEnabled bool, secret string) {
	{{
		webhook := webhooks.UserHideInfoOverlay
		if isHidden {
			webhook = webhooks.UserUnhideInfoOverlay
		}
	}}
	<button
		class={ "more-info--hide-asset", templ.KV("hidden", isHidden) }
		if !isHidden {
			hx-post="/asset/hide"
			title="Hide asset"
		} else {
			hx-post="/asset/unhide"
			title="Unhide asset"
		}
		hx-trigger="click throttle:2s"
		hx-vals={ fmt.Sprintf(`{"assetID": "%s", "tagName": "%s"}`, ID, kiosk.TagSkip) }
		hx-swap="outerHTML"
		disabled?={ !isButtonEnabled }
	>
		<div
			hx-post="/webhooks"
			hx-trigger="click from:closest .more-info--hide-asset"
			hx-headers={ fmt.Sprintf(`{"X-Timestamp": "%d", "X-Signature": "%s", "kiosk-webhook-event": "%s"}`, time.Now().Unix(), WebhookSignature(secret), webhook) }
			hx-include=".kiosk-history--entry"
			hx-swap="none"
			style="display: none"
		></div>
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
			<!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
			<path d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z"></path>
		</svg>
		<span>Hide</span>
	</button>
}

// cameraData displays the camera make and model information from EXIF data
// Parameters:
//   - exifInfo: EXIF information containing camera details
templ cameraData(exifInfo immich.ExifInfo) {
	{{ exif := AssetExif(exifInfo) }}
	<div>
		<div>
			<h3>
				if exifInfo.Make != "" {
					{ exifInfo.Make }
				} else {
					Unknown make
				}
				{ exifInfo.Model }
			</h3>
		</div>
		<div>
			if exif != "" {
				@exifIcon(exif)
			} else {
				@exifIcon("Unknown stats")
			}
		</div>
	</div>
}

// originalImageData displays original filename and image dimensions/size
// Parameters:
//   - img: The Immich asset containing image metadata
templ originalAssetData(img immich.Asset) {
	{{data := fmt.Sprintf("%d x %d <span class=\"asset--metadata--exif--seperator\">&#124;</span> %s",
	img.ExifInfo.ExifImageWidth,
	img.ExifInfo.ExifImageHeight,
	humanize.Bytes(uint64(img.ExifInfo.FileSizeInByte)))
	}}
	<div>
		<div>
			<h3>
				{ img.OriginalFileName }
			</h3>
		</div>
		@imageIcon(data)
	</div>
}

// originalImageTimeLocation displays the date/time and location of the image
// Parameters:
//   - viewData: The view data containing image information and display options
//   - imageIndex: The index of the current image in the view data
//   - hideCountries: List of country names to hide from location display
templ originalImageTimeLocation(viewData common.ViewData, imageIndex int, hideCountries []string) {
	{{ imageDatetime := AssetDateTime(viewData, imageIndex, true) }}
	{{ location := AssetLocation(viewData.Assets[imageIndex].ImmichAsset.ExifInfo, hideCountries) }}
	<div>
		<div>
			<h3>
				if imageDatetime != "" {
					{ imageDatetime }
				} else {
					Unknown date and time
				}
			</h3>
		</div>
		<div>
			if location != "" {
				{{ latitude := viewData.Assets[imageIndex].ImmichAsset.ExifInfo.Latitude }}
				{{ longitude := viewData.Assets[imageIndex].ImmichAsset.ExifInfo.Longitude }}
				if latitude != 0 && longitude != 0 {
					<a class="more-info--image--maps-link" href={ templ.SafeURL(fmt.Sprintf("https://www.google.com/maps?q=%f,%f", latitude, longitude)) } target="_blank">
						@locationIcon(location)
					</a>
				} else {
					@locationIcon(location)
				}
			} else {
				@locationIcon("Unknown location")
			}
		</div>
	</div>
}

// people generates a component displaying names of people detected in an image
// Parameters:
//   - people: Slice of Person objects containing detected individuals from image analysis
//
// Returns:
//   - A templ.Component that renders an HTML section listing detected people's names,
//     or a NopComponent if no valid names are found
func people(people []immich.Person, addYearUnit bool, switchToYears int, assetDate time.Time) templ.Component {
	if len(people) == 0 {
		return templ.NopComponent
	}

	names := []string{}
	for _, person := range people {
		if person.Name != "" {
			name := person.Name
			if person.BirthDate != "" {
				birthDate, birthDateErr := person.BirthDate.Time()
				if birthDateErr == nil {
					name += fmt.Sprintf(" (%s)", calculateAge(assetDate, birthDate, addYearUnit, switchToYears))
				}
			}
			names = append(names, templ.EscapeString(name))
		}
	}

	if len(names) == 0 {
		return templ.NopComponent
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {

		s, err := TemplString(personIcon(strings.Join(names, ", ")))
		if err != nil {
			return err
		}

		return templ.Raw(`
		<div>
			<div>
				<h3>People</h3>
			</div>
			<div>`+s+`</div>
		</div>`).Render(ctx, w)
	})
}

// tags generates a component for displaying image tags
// Parameters:
//   - tags: Slice of Tag objects containing metadata tags for the image
//
// Returns:
//   - A templ.Component that renders an HTML section listing tags,
//     or a NopComponent if no valid tags are found
func tags(tags immich.Tags) templ.Component {
	if len(tags) == 0 {
		return templ.NopComponent
	}

	tagNames := []string{}
	for _, tag := range tags {
		if tag.Value != "" {
			tagNames = append(tagNames, fmt.Sprintf("<span>%s</span>", templ.EscapeString(tag.Value)))
		}
	}

	if len(tagNames) == 0 {
		return templ.NopComponent
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {

		s, err := TemplString(tagIcon(strings.Join(tagNames, "")))
		if err != nil {
			return err
		}

		return templ.Raw(`
			<div>
				<div>
					<h3>Tags</h3>
				</div>
				<div class="more-info--tag">`+s+`</div>
			</div>
		`).Render(ctx, w)
	})
}

// ImmichAssetUrl constructs the URL for viewing an image in Immich
// Parameters:
//   - baseUrl: The base URL of the Immich instance
//   - externalUrl: The external URL of the Immich instance, if different from base URL
//   - imageID: The ID of the image to view
//
// Returns:
//   - The complete URL string for viewing the image, or '#' if URL parsing fails
func ImmichAssetUrl(baseUrl, externalUrl, imageID string) string {

	urlToParse := externalUrl
	if urlToParse == "" {
		urlToParse = baseUrl
	}

	u, err := url.Parse(urlToParse)
	if err != nil {
		log.Warn("Failed to parse base URL", "error", err)
		return "#"
	}

	return (&url.URL{
		Scheme: u.Scheme,
		Host:   u.Host,
		Path:   path.Join("photos", imageID),
	}).String()
}

// WebhookSignature generates a signature for webhook authentication.
// It combines the shared secret with the current Unix timestamp
// to create a time-based signature for securing webhook requests.
// Returns:
//   - A string containing the calculated signature
func WebhookSignature(secret string) string {
	return utils.CalculateSignature(secret, strconv.FormatInt(time.Now().Unix(), 10))
}
