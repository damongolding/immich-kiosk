package views

import (
	"bytes"
	"context"
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/damongolding/immich-kiosk/internal/common"
	"github.com/damongolding/immich-kiosk/internal/templates/partials"
	"github.com/damongolding/immich-kiosk/internal/utils"
	"html"
	"net/url"
	"os"
	"path/filepath"
	"strings"
)

// Home renders the Home layout template
templ Home(viewData common.ViewData, secret string) {
	<!DOCTYPE html>
	<html lang="en" hx-request={ fmt.Sprintf("{\"timeout\":%d}", formatTimeout(viewData.Kiosk.HTTPTimeout)) }>
		<head>
			@partials.Head(viewData)
		</head>
		@partials.Body(viewData, secret) {
			<main
				id="kiosk"
				if viewData.UseOfflineMode && viewData.OfflineMode.Enabled {
					hx-post="/asset/offline"
				} else {
					hx-post="/asset/new"
				}
				hx-include=".kiosk-history--entry"
				hx-trigger={ triggers(viewData.DisableNavigation) }
				hx-on::before-send="kiosk.setRequestLock(event)"
				hx-on::after-request="kiosk.startPollingTMP()"
				hx-on::after-swap="kiosk.releaseRequestLock(), kiosk.cleanupFrames()"
			>
				@partials.Spinner()
			</main>
			for _, iframe := range viewData.Iframe {
				{{ isUrl, html := isIframeUrl(iframe) }}
				<iframe
					if isUrl {
						src={ iframe }
						title={ "External content from " + iframe }
					} else {
						srcdoc={ html }
						title="Embedded local content"
					}
					allowtransparency="true"
					frameborder="0"
				></iframe>
			}
			if viewData.ShowProgressBar {
				@partials.ProgressBar(viewData.ProgressBarPosition)
			}
			if !viewData.DisableUI {
				<section id="clock-weather-container">
					<div>
						if (viewData.ShowTime || viewData.ShowDate) {
							@partials.ClockContainer(viewData.ClockSource, viewData.Theme)
						}
					</div>
					<div>
						if viewData.Queries.Has("weather") || viewData.HasWeatherDefault {
							@partials.Weather(viewData.Theme)
						}
					</div>
				</section>
			}
			if !viewData.DisableNavigation {
				@partials.Menu(viewData, viewData.Queries, secret)
			}
			@partials.Params(viewData.Queries)
			@partials.Sleep(viewData.SleepStart, viewData.SleepEnd, viewData.DisableSleep)
			@partials.History()
			@partials.RefreshCheck(viewData.KioskVersion, viewData.ReloadTimeStamp, viewData.Queries)
			@partials.Status()
			@kioskData(map[string]any{
				"debug":              viewData.Kiosk.Debug,
				"debugVerbose":       viewData.Kiosk.DebugVerbose,
				"langCode":           viewData.SystemLang,
				"version":            viewData.KioskVersion,
				"params":             queriesToJson(viewData.Queries),
				"duration":           viewData.Duration,
				"disableNavigation":  viewData.DisableNavigation,
				"disableScreensaver": viewData.DisableScreensaver,
				"showDate":           viewData.ShowDate,
				"dateFormat":         utils.DateToJavascriptLayout(viewData.DateFormat),
				"showTime":           viewData.ShowTime,
				"timeFormat":         viewData.TimeFormat,
				"clockSource":        viewData.ClockSource,
				"transition":         viewData.Transition,
				"showMoreInfo":       viewData.ShowMoreInfo,
				"showRedirects":      len(viewData.Kiosk.Redirects) > 0,
				"livePhotos":         viewData.LivePhotos,
				"LivePhotoLoopDelay": viewData.LivePhotoLoopDelay * 1000,
				"httpTimeout":        viewData.Kiosk.HTTPTimeout,
			})
			<script src={ string(templ.URL(fmt.Sprintf("/assets/js/kiosk.%s.js", viewData.KioskVersion))) }></script>
		}
	</html>
}

func formatTimeout(timeout int) int {

	if timeout <= 0 {
		return 0
	}

	return timeout * 100 * 4
}

// isIframeUrl checks if iframeURL is a valid URL. If not, it tries to read it as a file path.
// Returns:
//   - true and the URL string if it is a valid URL
//   - false and the file content (or empty string if read fails) otherwise
func isIframeUrl(iframeURL string) (bool, string) {
	u, err := url.ParseRequestURI(iframeURL)
	if err == nil && u.Scheme != "" && u.Host != "" {
		return true, u.String()
	}

	// Helper function to create error HTML
	renderErrorHTML := func(title, message string) string {
		var buf bytes.Buffer
		d := partials.ErrorData{
			Title:   title,
			Message: message,
		}
		renderErr := partials.IframeError(d).Render(context.Background(), &buf)
		if renderErr != nil {
			log.Error("Rendering iFrame error", "err", renderErr)
			return ""
		}
		return buf.String()
	}

	// Validate file extension
	if !strings.HasSuffix(strings.ToLower(iframeURL), ".html") {
		log.Warn("Non-HTML file requested for iframe", "path", iframeURL)
		return false, renderErrorHTML("Error loading iframe content", "Non-HTML file requested for iframe: "+iframeURL)
	}

	// Prevent path traversal
	cleanPath := filepath.Clean(iframeURL)
	if strings.Contains(cleanPath, "..") {
		log.Warn("Potential directory traversal attempt", "path", iframeURL)
		return false, renderErrorHTML("Error loading iframe content", "Security Error: Invalid file path: "+iframeURL)
	}

	// Try reading it as a file
	_, statErr := os.Stat(iframeURL)
	if statErr != nil {
		log.Error("Error accessing iframe file", "err", statErr)
		return false, renderErrorHTML("Error loading iframe content", "Error accessing iframe file: "+iframeURL)
	}

	content, readErr := os.ReadFile(iframeURL)
	if readErr != nil {
		log.Error("Error reading iframe file", "err", readErr)
		return false, renderErrorHTML("Error loading iframe content", "Error reading iframe file: "+iframeURL)
	}

	return false, string(content)
}

// triggers returns a string of HTMX trigger events for the kiosk.
// If disableNav is true, navigation triggers are omitted.
// The returned string includes:
// - "load" trigger when the page loads
// - Click triggers for next asset navigation controls (if navigation enabled)
// - Keyboard right arrow trigger (if navigation enabled)
// - Custom "kiosk-new-asset" event trigger
func triggers(disableNav bool) string {

	var b strings.Builder

	b.WriteString("load,")
	if !disableNav {
		b.WriteString(`
		click from:#navigation-interaction-area--next-asset throttle:1s,
		click from:.navigation--next-asset throttle:1s,
		keyup[key=='ArrowRight'] from:body throttle:1s,
		`)
	}
	b.WriteString(`
		kiosk-new-asset throttle:1s,
		kiosk-new-offline-asset from:body
	`)

	return b.String()
}

// kioskData renders kiosk configuration data as JSON
templ kioskData(data any) {
	@templ.JSONScript("kiosk-data", data)
	<script>
		const kioskData = JSON.parse(document.getElementById('kiosk-data').textContent);
		console.log(`\nImmich Kiosk version: %c${kioskData.version}`,  "color: white; font-weight:600; background-color:#1e83f7; padding:0.3rem 1rem; border-radius:4px;", "\n\n");
	</script>
}

// QueriesToJson converts URL query parameters from url.Values to a map.
// If a query parameter has only one value, it will be stored as a string.
// If a query parameter has multiple values, they will be stored as a string slice.
func queriesToJson(values url.Values) map[string]any {

	result := make(map[string]any)

	if values == nil {
		return result
	}

	for key, value := range values {
		if key == "" {
			continue
		}
		safeKey := html.EscapeString(key)
		if len(value) == 1 {
			result[safeKey] = html.EscapeString(value[0])
		} else {
			escapedValues := make([]string, len(value))
			for i, v := range value {
				escapedValues[i] = html.EscapeString(v)
			}
			result[safeKey] = escapedValues
		}
	}

	return result
}
