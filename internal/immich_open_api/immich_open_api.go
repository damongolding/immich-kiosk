// Package immich_open_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package immich_open_api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
	BearerScopes  = "bearer.Scopes"
	CookieScopes  = "cookie.Scopes"
)

// Defines values for AlbumUserRole.
const (
	Editor AlbumUserRole = "editor"
	Viewer AlbumUserRole = "viewer"
)

// Defines values for AssetBulkUploadCheckResultAction.
const (
	Accept AssetBulkUploadCheckResultAction = "accept"
	Reject AssetBulkUploadCheckResultAction = "reject"
)

// Defines values for AssetBulkUploadCheckResultReason.
const (
	AssetBulkUploadCheckResultReasonDuplicate         AssetBulkUploadCheckResultReason = "duplicate"
	AssetBulkUploadCheckResultReasonUnsupportedFormat AssetBulkUploadCheckResultReason = "unsupported-format"
)

// Defines values for AssetIdsResponseDtoError.
const (
	AssetIdsResponseDtoErrorDuplicate    AssetIdsResponseDtoError = "duplicate"
	AssetIdsResponseDtoErrorNoPermission AssetIdsResponseDtoError = "no_permission"
	AssetIdsResponseDtoErrorNotFound     AssetIdsResponseDtoError = "not_found"
)

// Defines values for AssetJobName.
const (
	RefreshFaces        AssetJobName = "refresh-faces"
	RefreshMetadata     AssetJobName = "refresh-metadata"
	RegenerateThumbnail AssetJobName = "regenerate-thumbnail"
	TranscodeVideo      AssetJobName = "transcode-video"
)

// Defines values for AssetMediaSize.
const (
	Fullsize  AssetMediaSize = "fullsize"
	Preview   AssetMediaSize = "preview"
	Thumbnail AssetMediaSize = "thumbnail"
)

// Defines values for AssetMediaStatus.
const (
	AssetMediaStatusCreated   AssetMediaStatus = "created"
	AssetMediaStatusDuplicate AssetMediaStatus = "duplicate"
	AssetMediaStatusReplaced  AssetMediaStatus = "replaced"
)

// Defines values for AssetOrder.
const (
	Asc  AssetOrder = "asc"
	Desc AssetOrder = "desc"
)

// Defines values for AssetTypeEnum.
const (
	AUDIO AssetTypeEnum = "AUDIO"
	IMAGE AssetTypeEnum = "IMAGE"
	OTHER AssetTypeEnum = "OTHER"
	VIDEO AssetTypeEnum = "VIDEO"
)

// Defines values for AssetVisibility.
const (
	Archive  AssetVisibility = "archive"
	Hidden   AssetVisibility = "hidden"
	Locked   AssetVisibility = "locked"
	Timeline AssetVisibility = "timeline"
)

// Defines values for AudioCodec.
const (
	Aac      AudioCodec = "aac"
	Libopus  AudioCodec = "libopus"
	Mp3      AudioCodec = "mp3"
	PcmS16le AudioCodec = "pcm_s16le"
)

// Defines values for BulkIdResponseDtoError.
const (
	BulkIdResponseDtoErrorDuplicate    BulkIdResponseDtoError = "duplicate"
	BulkIdResponseDtoErrorNoPermission BulkIdResponseDtoError = "no_permission"
	BulkIdResponseDtoErrorNotFound     BulkIdResponseDtoError = "not_found"
	BulkIdResponseDtoErrorUnknown      BulkIdResponseDtoError = "unknown"
)

// Defines values for CQMode.
const (
	Auto CQMode = "auto"
	Cqp  CQMode = "cqp"
	Icq  CQMode = "icq"
)

// Defines values for Colorspace.
const (
	P3   Colorspace = "p3"
	Srgb Colorspace = "srgb"
)

// Defines values for ImageFormat.
const (
	Jpeg ImageFormat = "jpeg"
	Webp ImageFormat = "webp"
)

// Defines values for JobCommand.
const (
	ClearFailed JobCommand = "clear-failed"
	Empty       JobCommand = "empty"
	Pause       JobCommand = "pause"
	Resume      JobCommand = "resume"
	Start       JobCommand = "start"
)

// Defines values for JobName.
const (
	JobNameBackgroundTask           JobName = "backgroundTask"
	JobNameBackupDatabase           JobName = "backupDatabase"
	JobNameDuplicateDetection       JobName = "duplicateDetection"
	JobNameFaceDetection            JobName = "faceDetection"
	JobNameFacialRecognition        JobName = "facialRecognition"
	JobNameLibrary                  JobName = "library"
	JobNameMetadataExtraction       JobName = "metadataExtraction"
	JobNameMigration                JobName = "migration"
	JobNameNotifications            JobName = "notifications"
	JobNameSearch                   JobName = "search"
	JobNameSidecar                  JobName = "sidecar"
	JobNameSmartSearch              JobName = "smartSearch"
	JobNameStorageTemplateMigration JobName = "storageTemplateMigration"
	JobNameThumbnailGeneration      JobName = "thumbnailGeneration"
	JobNameVideoConversion          JobName = "videoConversion"
)

// Defines values for LogLevel.
const (
	LogLevelDebug   LogLevel = "debug"
	LogLevelError   LogLevel = "error"
	LogLevelFatal   LogLevel = "fatal"
	LogLevelLog     LogLevel = "log"
	LogLevelVerbose LogLevel = "verbose"
	LogLevelWarn    LogLevel = "warn"
)

// Defines values for ManualJobName.
const (
	ManualJobNameBackupDatabase ManualJobName = "backup-database"
	ManualJobNameMemoryCleanup  ManualJobName = "memory-cleanup"
	ManualJobNameMemoryCreate   ManualJobName = "memory-create"
	ManualJobNamePersonCleanup  ManualJobName = "person-cleanup"
	ManualJobNameTagCleanup     ManualJobName = "tag-cleanup"
	ManualJobNameUserCleanup    ManualJobName = "user-cleanup"
)

// Defines values for MemoryType.
const (
	OnThisDay MemoryType = "on_this_day"
)

// Defines values for NotificationLevel.
const (
	NotificationLevelError   NotificationLevel = "error"
	NotificationLevelInfo    NotificationLevel = "info"
	NotificationLevelSuccess NotificationLevel = "success"
	NotificationLevelWarning NotificationLevel = "warning"
)

// Defines values for NotificationType.
const (
	BackupFailed  NotificationType = "BackupFailed"
	Custom        NotificationType = "Custom"
	JobFailed     NotificationType = "JobFailed"
	SystemMessage NotificationType = "SystemMessage"
)

// Defines values for OAuthTokenEndpointAuthMethod.
const (
	ClientSecretBasic OAuthTokenEndpointAuthMethod = "client_secret_basic"
	ClientSecretPost  OAuthTokenEndpointAuthMethod = "client_secret_post"
)

// Defines values for PartnerDirection.
const (
	SharedBy   PartnerDirection = "shared-by"
	SharedWith PartnerDirection = "shared-with"
)

// Defines values for Permission.
const (
	PermissionActivityCreate       Permission = "activity.create"
	PermissionActivityDelete       Permission = "activity.delete"
	PermissionActivityRead         Permission = "activity.read"
	PermissionActivityStatistics   Permission = "activity.statistics"
	PermissionActivityUpdate       Permission = "activity.update"
	PermissionAdminUserCreate      Permission = "admin.user.create"
	PermissionAdminUserDelete      Permission = "admin.user.delete"
	PermissionAdminUserRead        Permission = "admin.user.read"
	PermissionAdminUserUpdate      Permission = "admin.user.update"
	PermissionAlbumAddAsset        Permission = "album.addAsset"
	PermissionAlbumCreate          Permission = "album.create"
	PermissionAlbumDelete          Permission = "album.delete"
	PermissionAlbumDownload        Permission = "album.download"
	PermissionAlbumRead            Permission = "album.read"
	PermissionAlbumRemoveAsset     Permission = "album.removeAsset"
	PermissionAlbumShare           Permission = "album.share"
	PermissionAlbumStatistics      Permission = "album.statistics"
	PermissionAlbumUpdate          Permission = "album.update"
	PermissionAll                  Permission = "all"
	PermissionApiKeyCreate         Permission = "apiKey.create"
	PermissionApiKeyDelete         Permission = "apiKey.delete"
	PermissionApiKeyRead           Permission = "apiKey.read"
	PermissionApiKeyUpdate         Permission = "apiKey.update"
	PermissionArchiveRead          Permission = "archive.read"
	PermissionAssetDelete          Permission = "asset.delete"
	PermissionAssetDownload        Permission = "asset.download"
	PermissionAssetRead            Permission = "asset.read"
	PermissionAssetShare           Permission = "asset.share"
	PermissionAssetUpdate          Permission = "asset.update"
	PermissionAssetUpload          Permission = "asset.upload"
	PermissionAssetView            Permission = "asset.view"
	PermissionAuthDeviceDelete     Permission = "authDevice.delete"
	PermissionFaceCreate           Permission = "face.create"
	PermissionFaceDelete           Permission = "face.delete"
	PermissionFaceRead             Permission = "face.read"
	PermissionFaceUpdate           Permission = "face.update"
	PermissionLibraryCreate        Permission = "library.create"
	PermissionLibraryDelete        Permission = "library.delete"
	PermissionLibraryRead          Permission = "library.read"
	PermissionLibraryStatistics    Permission = "library.statistics"
	PermissionLibraryUpdate        Permission = "library.update"
	PermissionMemoryCreate         Permission = "memory.create"
	PermissionMemoryDelete         Permission = "memory.delete"
	PermissionMemoryRead           Permission = "memory.read"
	PermissionMemoryUpdate         Permission = "memory.update"
	PermissionNotificationCreate   Permission = "notification.create"
	PermissionNotificationDelete   Permission = "notification.delete"
	PermissionNotificationRead     Permission = "notification.read"
	PermissionNotificationUpdate   Permission = "notification.update"
	PermissionPartnerCreate        Permission = "partner.create"
	PermissionPartnerDelete        Permission = "partner.delete"
	PermissionPartnerRead          Permission = "partner.read"
	PermissionPartnerUpdate        Permission = "partner.update"
	PermissionPersonCreate         Permission = "person.create"
	PermissionPersonDelete         Permission = "person.delete"
	PermissionPersonMerge          Permission = "person.merge"
	PermissionPersonRead           Permission = "person.read"
	PermissionPersonReassign       Permission = "person.reassign"
	PermissionPersonStatistics     Permission = "person.statistics"
	PermissionPersonUpdate         Permission = "person.update"
	PermissionSessionCreate        Permission = "session.create"
	PermissionSessionDelete        Permission = "session.delete"
	PermissionSessionLock          Permission = "session.lock"
	PermissionSessionRead          Permission = "session.read"
	PermissionSessionUpdate        Permission = "session.update"
	PermissionSharedLinkCreate     Permission = "sharedLink.create"
	PermissionSharedLinkDelete     Permission = "sharedLink.delete"
	PermissionSharedLinkRead       Permission = "sharedLink.read"
	PermissionSharedLinkUpdate     Permission = "sharedLink.update"
	PermissionStackCreate          Permission = "stack.create"
	PermissionStackDelete          Permission = "stack.delete"
	PermissionStackRead            Permission = "stack.read"
	PermissionStackUpdate          Permission = "stack.update"
	PermissionSystemConfigRead     Permission = "systemConfig.read"
	PermissionSystemConfigUpdate   Permission = "systemConfig.update"
	PermissionSystemMetadataRead   Permission = "systemMetadata.read"
	PermissionSystemMetadataUpdate Permission = "systemMetadata.update"
	PermissionTagAsset             Permission = "tag.asset"
	PermissionTagCreate            Permission = "tag.create"
	PermissionTagDelete            Permission = "tag.delete"
	PermissionTagRead              Permission = "tag.read"
	PermissionTagUpdate            Permission = "tag.update"
	PermissionTimelineDownload     Permission = "timeline.download"
	PermissionTimelineRead         Permission = "timeline.read"
)

// Defines values for ReactionLevel.
const (
	Album ReactionLevel = "album"
	Asset ReactionLevel = "asset"
)

// Defines values for ReactionType.
const (
	Comment ReactionType = "comment"
	Like    ReactionType = "like"
)

// Defines values for SearchSuggestionType.
const (
	CameraMake  SearchSuggestionType = "camera-make"
	CameraModel SearchSuggestionType = "camera-model"
	City        SearchSuggestionType = "city"
	Country     SearchSuggestionType = "country"
	State       SearchSuggestionType = "state"
)

// Defines values for SharedLinkType.
const (
	ALBUM      SharedLinkType = "ALBUM"
	INDIVIDUAL SharedLinkType = "INDIVIDUAL"
)

// Defines values for SourceType.
const (
	Exif            SourceType = "exif"
	MachineLearning SourceType = "machine-learning"
	Manual          SourceType = "manual"
)

// Defines values for SyncEntityType.
const (
	AlbumDeleteV1        SyncEntityType = "AlbumDeleteV1"
	AlbumUserDeleteV1    SyncEntityType = "AlbumUserDeleteV1"
	AlbumUserV1          SyncEntityType = "AlbumUserV1"
	AlbumV1              SyncEntityType = "AlbumV1"
	AssetDeleteV1        SyncEntityType = "AssetDeleteV1"
	AssetExifV1          SyncEntityType = "AssetExifV1"
	AssetV1              SyncEntityType = "AssetV1"
	PartnerAssetDeleteV1 SyncEntityType = "PartnerAssetDeleteV1"
	PartnerAssetExifV1   SyncEntityType = "PartnerAssetExifV1"
	PartnerAssetV1       SyncEntityType = "PartnerAssetV1"
	PartnerDeleteV1      SyncEntityType = "PartnerDeleteV1"
	PartnerV1            SyncEntityType = "PartnerV1"
	UserDeleteV1         SyncEntityType = "UserDeleteV1"
	UserV1               SyncEntityType = "UserV1"
)

// Defines values for SyncRequestType.
const (
	AlbumUsersV1        SyncRequestType = "AlbumUsersV1"
	AlbumsV1            SyncRequestType = "AlbumsV1"
	AssetExifsV1        SyncRequestType = "AssetExifsV1"
	AssetsV1            SyncRequestType = "AssetsV1"
	PartnerAssetExifsV1 SyncRequestType = "PartnerAssetExifsV1"
	PartnerAssetsV1     SyncRequestType = "PartnerAssetsV1"
	PartnersV1          SyncRequestType = "PartnersV1"
	UsersV1             SyncRequestType = "UsersV1"
)

// Defines values for ToneMapping.
const (
	ToneMappingDisabled ToneMapping = "disabled"
	ToneMappingHable    ToneMapping = "hable"
	ToneMappingMobius   ToneMapping = "mobius"
	ToneMappingReinhard ToneMapping = "reinhard"
)

// Defines values for TranscodeHWAccel.
const (
	TranscodeHWAccelDisabled TranscodeHWAccel = "disabled"
	TranscodeHWAccelNvenc    TranscodeHWAccel = "nvenc"
	TranscodeHWAccelQsv      TranscodeHWAccel = "qsv"
	TranscodeHWAccelRkmpp    TranscodeHWAccel = "rkmpp"
	TranscodeHWAccelVaapi    TranscodeHWAccel = "vaapi"
)

// Defines values for TranscodePolicy.
const (
	TranscodePolicyAll      TranscodePolicy = "all"
	TranscodePolicyBitrate  TranscodePolicy = "bitrate"
	TranscodePolicyDisabled TranscodePolicy = "disabled"
	TranscodePolicyOptimal  TranscodePolicy = "optimal"
	TranscodePolicyRequired TranscodePolicy = "required"
)

// Defines values for UserAvatarColor.
const (
	Amber   UserAvatarColor = "amber"
	Blue    UserAvatarColor = "blue"
	Gray    UserAvatarColor = "gray"
	Green   UserAvatarColor = "green"
	Orange  UserAvatarColor = "orange"
	Pink    UserAvatarColor = "pink"
	Primary UserAvatarColor = "primary"
	Purple  UserAvatarColor = "purple"
	Red     UserAvatarColor = "red"
	Yellow  UserAvatarColor = "yellow"
)

// Defines values for UserStatus.
const (
	Active   UserStatus = "active"
	Deleted  UserStatus = "deleted"
	Removing UserStatus = "removing"
)

// Defines values for VideoCodec.
const (
	Av1  VideoCodec = "av1"
	H264 VideoCodec = "h264"
	Hevc VideoCodec = "hevc"
	Vp9  VideoCodec = "vp9"
)

// Defines values for VideoContainer.
const (
	Mov  VideoContainer = "mov"
	Mp4  VideoContainer = "mp4"
	Ogg  VideoContainer = "ogg"
	Webm VideoContainer = "webm"
)

// APIKeyCreateDto defines model for APIKeyCreateDto.
type APIKeyCreateDto struct {
	Name        *string      `json:"name,omitempty"`
	Permissions []Permission `json:"permissions"`
}

// APIKeyCreateResponseDto defines model for APIKeyCreateResponseDto.
type APIKeyCreateResponseDto struct {
	ApiKey APIKeyResponseDto `json:"apiKey"`
	Secret string            `json:"secret"`
}

// APIKeyResponseDto defines model for APIKeyResponseDto.
type APIKeyResponseDto struct {
	CreatedAt   time.Time    `json:"createdAt"`
	Id          string       `json:"id"`
	Name        string       `json:"name"`
	Permissions []Permission `json:"permissions"`
	UpdatedAt   time.Time    `json:"updatedAt"`
}

// APIKeyUpdateDto defines model for APIKeyUpdateDto.
type APIKeyUpdateDto struct {
	Name string `json:"name"`
}

// ActivityCreateDto defines model for ActivityCreateDto.
type ActivityCreateDto struct {
	AlbumId openapi_types.UUID  `json:"albumId"`
	AssetId *openapi_types.UUID `json:"assetId,omitempty"`
	Comment *string             `json:"comment,omitempty"`
	Type    ReactionType        `json:"type"`
}

// ActivityResponseDto defines model for ActivityResponseDto.
type ActivityResponseDto struct {
	AssetId   *string         `json:"assetId"`
	Comment   *string         `json:"comment"`
	CreatedAt time.Time       `json:"createdAt"`
	Id        string          `json:"id"`
	Type      ReactionType    `json:"type"`
	User      UserResponseDto `json:"user"`
}

// ActivityStatisticsResponseDto defines model for ActivityStatisticsResponseDto.
type ActivityStatisticsResponseDto struct {
	Comments int `json:"comments"`
}

// AddUsersDto defines model for AddUsersDto.
type AddUsersDto struct {
	AlbumUsers []AlbumUserAddDto `json:"albumUsers"`
}

// AdminOnboardingUpdateDto defines model for AdminOnboardingUpdateDto.
type AdminOnboardingUpdateDto struct {
	IsOnboarded bool `json:"isOnboarded"`
}

// AlbumResponseDto defines model for AlbumResponseDto.
type AlbumResponseDto struct {
	AlbumName                  string                 `json:"albumName"`
	AlbumThumbnailAssetId      *string                `json:"albumThumbnailAssetId"`
	AlbumUsers                 []AlbumUserResponseDto `json:"albumUsers"`
	AssetCount                 int                    `json:"assetCount"`
	Assets                     []AssetResponseDto     `json:"assets"`
	CreatedAt                  time.Time              `json:"createdAt"`
	Description                string                 `json:"description"`
	EndDate                    *time.Time             `json:"endDate,omitempty"`
	HasSharedLink              bool                   `json:"hasSharedLink"`
	Id                         string                 `json:"id"`
	IsActivityEnabled          bool                   `json:"isActivityEnabled"`
	LastModifiedAssetTimestamp *time.Time             `json:"lastModifiedAssetTimestamp,omitempty"`
	Order                      *AssetOrder            `json:"order,omitempty"`
	Owner                      UserResponseDto        `json:"owner"`
	OwnerId                    string                 `json:"ownerId"`
	Shared                     bool                   `json:"shared"`
	StartDate                  *time.Time             `json:"startDate,omitempty"`
	UpdatedAt                  time.Time              `json:"updatedAt"`
}

// AlbumStatisticsResponseDto defines model for AlbumStatisticsResponseDto.
type AlbumStatisticsResponseDto struct {
	NotShared int `json:"notShared"`
	Owned     int `json:"owned"`
	Shared    int `json:"shared"`
}

// AlbumUserAddDto defines model for AlbumUserAddDto.
type AlbumUserAddDto struct {
	Role   *AlbumUserRole     `json:"role,omitempty"`
	UserId openapi_types.UUID `json:"userId"`
}

// AlbumUserCreateDto defines model for AlbumUserCreateDto.
type AlbumUserCreateDto struct {
	Role   AlbumUserRole      `json:"role"`
	UserId openapi_types.UUID `json:"userId"`
}

// AlbumUserResponseDto defines model for AlbumUserResponseDto.
type AlbumUserResponseDto struct {
	Role AlbumUserRole   `json:"role"`
	User UserResponseDto `json:"user"`
}

// AlbumUserRole defines model for AlbumUserRole.
type AlbumUserRole string

// AllJobStatusResponseDto defines model for AllJobStatusResponseDto.
type AllJobStatusResponseDto struct {
	BackgroundTask           JobStatusDto `json:"backgroundTask"`
	BackupDatabase           JobStatusDto `json:"backupDatabase"`
	DuplicateDetection       JobStatusDto `json:"duplicateDetection"`
	FaceDetection            JobStatusDto `json:"faceDetection"`
	FacialRecognition        JobStatusDto `json:"facialRecognition"`
	Library                  JobStatusDto `json:"library"`
	MetadataExtraction       JobStatusDto `json:"metadataExtraction"`
	Migration                JobStatusDto `json:"migration"`
	Notifications            JobStatusDto `json:"notifications"`
	Search                   JobStatusDto `json:"search"`
	Sidecar                  JobStatusDto `json:"sidecar"`
	SmartSearch              JobStatusDto `json:"smartSearch"`
	StorageTemplateMigration JobStatusDto `json:"storageTemplateMigration"`
	ThumbnailGeneration      JobStatusDto `json:"thumbnailGeneration"`
	VideoConversion          JobStatusDto `json:"videoConversion"`
}

// AssetBulkDeleteDto defines model for AssetBulkDeleteDto.
type AssetBulkDeleteDto struct {
	Force *bool                `json:"force,omitempty"`
	Ids   []openapi_types.UUID `json:"ids"`
}

// AssetBulkUpdateDto defines model for AssetBulkUpdateDto.
type AssetBulkUpdateDto struct {
	DateTimeOriginal *string              `json:"dateTimeOriginal,omitempty"`
	Description      *string              `json:"description,omitempty"`
	DuplicateId      *string              `json:"duplicateId"`
	Ids              []openapi_types.UUID `json:"ids"`
	IsFavorite       *bool                `json:"isFavorite,omitempty"`
	Latitude         *float32             `json:"latitude,omitempty"`
	Longitude        *float32             `json:"longitude,omitempty"`
	Rating           *float32             `json:"rating,omitempty"`
	Visibility       *AssetVisibility     `json:"visibility,omitempty"`
}

// AssetBulkUploadCheckDto defines model for AssetBulkUploadCheckDto.
type AssetBulkUploadCheckDto struct {
	Assets []AssetBulkUploadCheckItem `json:"assets"`
}

// AssetBulkUploadCheckItem defines model for AssetBulkUploadCheckItem.
type AssetBulkUploadCheckItem struct {
	// Checksum base64 or hex encoded sha1 hash
	Checksum string `json:"checksum"`
	Id       string `json:"id"`
}

// AssetBulkUploadCheckResponseDto defines model for AssetBulkUploadCheckResponseDto.
type AssetBulkUploadCheckResponseDto struct {
	Results []AssetBulkUploadCheckResult `json:"results"`
}

// AssetBulkUploadCheckResult defines model for AssetBulkUploadCheckResult.
type AssetBulkUploadCheckResult struct {
	Action    AssetBulkUploadCheckResultAction  `json:"action"`
	AssetId   *string                           `json:"assetId,omitempty"`
	Id        string                            `json:"id"`
	IsTrashed *bool                             `json:"isTrashed,omitempty"`
	Reason    *AssetBulkUploadCheckResultReason `json:"reason,omitempty"`
}

// AssetBulkUploadCheckResultAction defines model for AssetBulkUploadCheckResult.Action.
type AssetBulkUploadCheckResultAction string

// AssetBulkUploadCheckResultReason defines model for AssetBulkUploadCheckResult.Reason.
type AssetBulkUploadCheckResultReason string

// AssetDeltaSyncDto defines model for AssetDeltaSyncDto.
type AssetDeltaSyncDto struct {
	UpdatedAfter time.Time            `json:"updatedAfter"`
	UserIds      []openapi_types.UUID `json:"userIds"`
}

// AssetDeltaSyncResponseDto defines model for AssetDeltaSyncResponseDto.
type AssetDeltaSyncResponseDto struct {
	Deleted       []string           `json:"deleted"`
	NeedsFullSync bool               `json:"needsFullSync"`
	Upserted      []AssetResponseDto `json:"upserted"`
}

// AssetFaceCreateDto defines model for AssetFaceCreateDto.
type AssetFaceCreateDto struct {
	AssetId     openapi_types.UUID `json:"assetId"`
	Height      int                `json:"height"`
	ImageHeight int                `json:"imageHeight"`
	ImageWidth  int                `json:"imageWidth"`
	PersonId    openapi_types.UUID `json:"personId"`
	Width       int                `json:"width"`
	X           int                `json:"x"`
	Y           int                `json:"y"`
}

// AssetFaceDeleteDto defines model for AssetFaceDeleteDto.
type AssetFaceDeleteDto struct {
	Force bool `json:"force"`
}

// AssetFaceResponseDto defines model for AssetFaceResponseDto.
type AssetFaceResponseDto struct {
	BoundingBoxX1 int                `json:"boundingBoxX1"`
	BoundingBoxX2 int                `json:"boundingBoxX2"`
	BoundingBoxY1 int                `json:"boundingBoxY1"`
	BoundingBoxY2 int                `json:"boundingBoxY2"`
	Id            openapi_types.UUID `json:"id"`
	ImageHeight   int                `json:"imageHeight"`
	ImageWidth    int                `json:"imageWidth"`
	Person        *PersonResponseDto `json:"person"`
	SourceType    *SourceType        `json:"sourceType,omitempty"`
}

// AssetFaceUpdateDto defines model for AssetFaceUpdateDto.
type AssetFaceUpdateDto struct {
	Data []AssetFaceUpdateItem `json:"data"`
}

// AssetFaceUpdateItem defines model for AssetFaceUpdateItem.
type AssetFaceUpdateItem struct {
	AssetId  openapi_types.UUID `json:"assetId"`
	PersonId openapi_types.UUID `json:"personId"`
}

// AssetFaceWithoutPersonResponseDto defines model for AssetFaceWithoutPersonResponseDto.
type AssetFaceWithoutPersonResponseDto struct {
	BoundingBoxX1 int                `json:"boundingBoxX1"`
	BoundingBoxX2 int                `json:"boundingBoxX2"`
	BoundingBoxY1 int                `json:"boundingBoxY1"`
	BoundingBoxY2 int                `json:"boundingBoxY2"`
	Id            openapi_types.UUID `json:"id"`
	ImageHeight   int                `json:"imageHeight"`
	ImageWidth    int                `json:"imageWidth"`
	SourceType    *SourceType        `json:"sourceType,omitempty"`
}

// AssetFullSyncDto defines model for AssetFullSyncDto.
type AssetFullSyncDto struct {
	LastId       *openapi_types.UUID `json:"lastId,omitempty"`
	Limit        int                 `json:"limit"`
	UpdatedUntil time.Time           `json:"updatedUntil"`
	UserId       *openapi_types.UUID `json:"userId,omitempty"`
}

// AssetIdsDto defines model for AssetIdsDto.
type AssetIdsDto struct {
	AssetIds []openapi_types.UUID `json:"assetIds"`
}

// AssetIdsResponseDto defines model for AssetIdsResponseDto.
type AssetIdsResponseDto struct {
	AssetId string                    `json:"assetId"`
	Error   *AssetIdsResponseDtoError `json:"error,omitempty"`
	Success bool                      `json:"success"`
}

// AssetIdsResponseDtoError defines model for AssetIdsResponseDto.Error.
type AssetIdsResponseDtoError string

// AssetJobName defines model for AssetJobName.
type AssetJobName string

// AssetJobsDto defines model for AssetJobsDto.
type AssetJobsDto struct {
	AssetIds []openapi_types.UUID `json:"assetIds"`
	Name     AssetJobName         `json:"name"`
}

// AssetMediaCreateDto defines model for AssetMediaCreateDto.
type AssetMediaCreateDto struct {
	AssetData        openapi_types.File  `json:"assetData"`
	DeviceAssetId    string              `json:"deviceAssetId"`
	DeviceId         string              `json:"deviceId"`
	Duration         *string             `json:"duration,omitempty"`
	FileCreatedAt    time.Time           `json:"fileCreatedAt"`
	FileModifiedAt   time.Time           `json:"fileModifiedAt"`
	IsFavorite       *bool               `json:"isFavorite,omitempty"`
	LivePhotoVideoId *openapi_types.UUID `json:"livePhotoVideoId,omitempty"`
	SidecarData      *openapi_types.File `json:"sidecarData,omitempty"`
	Visibility       *AssetVisibility    `json:"visibility,omitempty"`
}

// AssetMediaReplaceDto defines model for AssetMediaReplaceDto.
type AssetMediaReplaceDto struct {
	AssetData      openapi_types.File `json:"assetData"`
	DeviceAssetId  string             `json:"deviceAssetId"`
	DeviceId       string             `json:"deviceId"`
	Duration       *string            `json:"duration,omitempty"`
	FileCreatedAt  time.Time          `json:"fileCreatedAt"`
	FileModifiedAt time.Time          `json:"fileModifiedAt"`
}

// AssetMediaResponseDto defines model for AssetMediaResponseDto.
type AssetMediaResponseDto struct {
	Id     string           `json:"id"`
	Status AssetMediaStatus `json:"status"`
}

// AssetMediaSize defines model for AssetMediaSize.
type AssetMediaSize string

// AssetMediaStatus defines model for AssetMediaStatus.
type AssetMediaStatus string

// AssetOrder defines model for AssetOrder.
type AssetOrder string

// AssetResponseDto defines model for AssetResponseDto.
type AssetResponseDto struct {
	// Checksum base64 encoded sha1 hash
	Checksum       string           `json:"checksum"`
	DeviceAssetId  string           `json:"deviceAssetId"`
	DeviceId       string           `json:"deviceId"`
	DuplicateId    *string          `json:"duplicateId"`
	Duration       string           `json:"duration"`
	ExifInfo       *ExifResponseDto `json:"exifInfo,omitempty"`
	FileCreatedAt  time.Time        `json:"fileCreatedAt"`
	FileModifiedAt time.Time        `json:"fileModifiedAt"`
	HasMetadata    bool             `json:"hasMetadata"`
	Id             string           `json:"id"`
	IsArchived     bool             `json:"isArchived"`
	IsFavorite     bool             `json:"isFavorite"`
	IsOffline      bool             `json:"isOffline"`
	IsTrashed      bool             `json:"isTrashed"`

	// LibraryId This property was deprecated in v1.106.0
	// Deprecated:
	LibraryId        *string                       `json:"libraryId"`
	LivePhotoVideoId *string                       `json:"livePhotoVideoId"`
	LocalDateTime    time.Time                     `json:"localDateTime"`
	OriginalFileName string                        `json:"originalFileName"`
	OriginalMimeType *string                       `json:"originalMimeType,omitempty"`
	OriginalPath     string                        `json:"originalPath"`
	Owner            *UserResponseDto              `json:"owner,omitempty"`
	OwnerId          string                        `json:"ownerId"`
	People           *[]PersonWithFacesResponseDto `json:"people,omitempty"`

	// Resized This property was deprecated in v1.113.0
	// Deprecated:
	Resized         *bool                                `json:"resized,omitempty"`
	Stack           *AssetStackResponseDto               `json:"stack"`
	Tags            *[]TagResponseDto                    `json:"tags,omitempty"`
	Thumbhash       *string                              `json:"thumbhash"`
	Type            AssetTypeEnum                        `json:"type"`
	UnassignedFaces *[]AssetFaceWithoutPersonResponseDto `json:"unassignedFaces,omitempty"`
	UpdatedAt       time.Time                            `json:"updatedAt"`
	Visibility      AssetVisibility                      `json:"visibility"`
}

// AssetStackResponseDto defines model for AssetStackResponseDto.
type AssetStackResponseDto struct {
	AssetCount     int    `json:"assetCount"`
	Id             string `json:"id"`
	PrimaryAssetId string `json:"primaryAssetId"`
}

// AssetStatsResponseDto defines model for AssetStatsResponseDto.
type AssetStatsResponseDto struct {
	Images int `json:"images"`
	Total  int `json:"total"`
	Videos int `json:"videos"`
}

// AssetTypeEnum defines model for AssetTypeEnum.
type AssetTypeEnum string

// AssetVisibility defines model for AssetVisibility.
type AssetVisibility string

// AudioCodec defines model for AudioCodec.
type AudioCodec string

// AuthStatusResponseDto defines model for AuthStatusResponseDto.
type AuthStatusResponseDto struct {
	ExpiresAt    *string `json:"expiresAt,omitempty"`
	IsElevated   bool    `json:"isElevated"`
	Password     bool    `json:"password"`
	PinCode      bool    `json:"pinCode"`
	PinExpiresAt *string `json:"pinExpiresAt,omitempty"`
}

// AvatarUpdate defines model for AvatarUpdate.
type AvatarUpdate struct {
	Color *UserAvatarColor `json:"color,omitempty"`
}

// BulkIdResponseDto defines model for BulkIdResponseDto.
type BulkIdResponseDto struct {
	Error   *BulkIdResponseDtoError `json:"error,omitempty"`
	Id      string                  `json:"id"`
	Success bool                    `json:"success"`
}

// BulkIdResponseDtoError defines model for BulkIdResponseDto.Error.
type BulkIdResponseDtoError string

// BulkIdsDto defines model for BulkIdsDto.
type BulkIdsDto struct {
	Ids []openapi_types.UUID `json:"ids"`
}

// CLIPConfig defines model for CLIPConfig.
type CLIPConfig struct {
	Enabled   bool   `json:"enabled"`
	ModelName string `json:"modelName"`
}

// CQMode defines model for CQMode.
type CQMode string

// ChangePasswordDto defines model for ChangePasswordDto.
type ChangePasswordDto struct {
	NewPassword string `json:"newPassword"`
	Password    string `json:"password"`
}

// CheckExistingAssetsDto defines model for CheckExistingAssetsDto.
type CheckExistingAssetsDto struct {
	DeviceAssetIds []string `json:"deviceAssetIds"`
	DeviceId       string   `json:"deviceId"`
}

// CheckExistingAssetsResponseDto defines model for CheckExistingAssetsResponseDto.
type CheckExistingAssetsResponseDto struct {
	ExistingIds []string `json:"existingIds"`
}

// Colorspace defines model for Colorspace.
type Colorspace string

// CreateAlbumDto defines model for CreateAlbumDto.
type CreateAlbumDto struct {
	AlbumName   string                `json:"albumName"`
	AlbumUsers  *[]AlbumUserCreateDto `json:"albumUsers,omitempty"`
	AssetIds    *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Description *string               `json:"description,omitempty"`
}

// CreateLibraryDto defines model for CreateLibraryDto.
type CreateLibraryDto struct {
	ExclusionPatterns *[]string          `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string          `json:"importPaths,omitempty"`
	Name              *string            `json:"name,omitempty"`
	OwnerId           openapi_types.UUID `json:"ownerId"`
}

// CreateProfileImageDto defines model for CreateProfileImageDto.
type CreateProfileImageDto struct {
	File openapi_types.File `json:"file"`
}

// CreateProfileImageResponseDto defines model for CreateProfileImageResponseDto.
type CreateProfileImageResponseDto struct {
	ProfileChangedAt time.Time `json:"profileChangedAt"`
	ProfileImagePath string    `json:"profileImagePath"`
	UserId           string    `json:"userId"`
}

// DatabaseBackupConfig defines model for DatabaseBackupConfig.
type DatabaseBackupConfig struct {
	CronExpression string  `json:"cronExpression"`
	Enabled        bool    `json:"enabled"`
	KeepLastAmount float32 `json:"keepLastAmount"`
}

// DownloadArchiveInfo defines model for DownloadArchiveInfo.
type DownloadArchiveInfo struct {
	AssetIds []string `json:"assetIds"`
	Size     int      `json:"size"`
}

// DownloadInfoDto defines model for DownloadInfoDto.
type DownloadInfoDto struct {
	AlbumId     *openapi_types.UUID   `json:"albumId,omitempty"`
	ArchiveSize *int                  `json:"archiveSize,omitempty"`
	AssetIds    *[]openapi_types.UUID `json:"assetIds,omitempty"`
	UserId      *openapi_types.UUID   `json:"userId,omitempty"`
}

// DownloadResponse defines model for DownloadResponse.
type DownloadResponse struct {
	ArchiveSize           int  `json:"archiveSize"`
	IncludeEmbeddedVideos bool `json:"includeEmbeddedVideos"`
}

// DownloadResponseDto defines model for DownloadResponseDto.
type DownloadResponseDto struct {
	Archives  []DownloadArchiveInfo `json:"archives"`
	TotalSize int                   `json:"totalSize"`
}

// DownloadUpdate defines model for DownloadUpdate.
type DownloadUpdate struct {
	ArchiveSize           *int  `json:"archiveSize,omitempty"`
	IncludeEmbeddedVideos *bool `json:"includeEmbeddedVideos,omitempty"`
}

// DuplicateDetectionConfig defines model for DuplicateDetectionConfig.
type DuplicateDetectionConfig struct {
	Enabled     bool    `json:"enabled"`
	MaxDistance float64 `json:"maxDistance"`
}

// DuplicateResponseDto defines model for DuplicateResponseDto.
type DuplicateResponseDto struct {
	Assets      []AssetResponseDto `json:"assets"`
	DuplicateId string             `json:"duplicateId"`
}

// EmailNotificationsResponse defines model for EmailNotificationsResponse.
type EmailNotificationsResponse struct {
	AlbumInvite bool `json:"albumInvite"`
	AlbumUpdate bool `json:"albumUpdate"`
	Enabled     bool `json:"enabled"`
}

// EmailNotificationsUpdate defines model for EmailNotificationsUpdate.
type EmailNotificationsUpdate struct {
	AlbumInvite *bool `json:"albumInvite,omitempty"`
	AlbumUpdate *bool `json:"albumUpdate,omitempty"`
	Enabled     *bool `json:"enabled,omitempty"`
}

// ExifResponseDto defines model for ExifResponseDto.
type ExifResponseDto struct {
	City             *string    `json:"city"`
	Country          *string    `json:"country"`
	DateTimeOriginal *time.Time `json:"dateTimeOriginal"`
	Description      *string    `json:"description"`
	ExifImageHeight  *float32   `json:"exifImageHeight"`
	ExifImageWidth   *float32   `json:"exifImageWidth"`
	ExposureTime     *string    `json:"exposureTime"`
	FNumber          *float32   `json:"fNumber"`
	FileSizeInByte   *int64     `json:"fileSizeInByte"`
	FocalLength      *float32   `json:"focalLength"`
	Iso              *float32   `json:"iso"`
	Latitude         *float32   `json:"latitude"`
	LensModel        *string    `json:"lensModel"`
	Longitude        *float32   `json:"longitude"`
	Make             *string    `json:"make"`
	Model            *string    `json:"model"`
	ModifyDate       *time.Time `json:"modifyDate"`
	Orientation      *string    `json:"orientation"`
	ProjectionType   *string    `json:"projectionType"`
	Rating           *float32   `json:"rating"`
	State            *string    `json:"state"`
	TimeZone         *string    `json:"timeZone"`
}

// FaceDto defines model for FaceDto.
type FaceDto struct {
	Id openapi_types.UUID `json:"id"`
}

// FacialRecognitionConfig defines model for FacialRecognitionConfig.
type FacialRecognitionConfig struct {
	Enabled     bool    `json:"enabled"`
	MaxDistance float64 `json:"maxDistance"`
	MinFaces    int     `json:"minFaces"`
	MinScore    float64 `json:"minScore"`
	ModelName   string  `json:"modelName"`
}

// FoldersResponse defines model for FoldersResponse.
type FoldersResponse struct {
	Enabled    bool `json:"enabled"`
	SidebarWeb bool `json:"sidebarWeb"`
}

// FoldersUpdate defines model for FoldersUpdate.
type FoldersUpdate struct {
	Enabled    *bool `json:"enabled,omitempty"`
	SidebarWeb *bool `json:"sidebarWeb,omitempty"`
}

// ImageFormat defines model for ImageFormat.
type ImageFormat string

// JobCommand defines model for JobCommand.
type JobCommand string

// JobCommandDto defines model for JobCommandDto.
type JobCommandDto struct {
	Command JobCommand `json:"command"`
	Force   *bool      `json:"force,omitempty"`
}

// JobCountsDto defines model for JobCountsDto.
type JobCountsDto struct {
	Active    int `json:"active"`
	Completed int `json:"completed"`
	Delayed   int `json:"delayed"`
	Failed    int `json:"failed"`
	Paused    int `json:"paused"`
	Waiting   int `json:"waiting"`
}

// JobCreateDto defines model for JobCreateDto.
type JobCreateDto struct {
	Name ManualJobName `json:"name"`
}

// JobName defines model for JobName.
type JobName string

// JobSettingsDto defines model for JobSettingsDto.
type JobSettingsDto struct {
	Concurrency int `json:"concurrency"`
}

// JobStatusDto defines model for JobStatusDto.
type JobStatusDto struct {
	JobCounts   JobCountsDto   `json:"jobCounts"`
	QueueStatus QueueStatusDto `json:"queueStatus"`
}

// LibraryResponseDto defines model for LibraryResponseDto.
type LibraryResponseDto struct {
	AssetCount        int        `json:"assetCount"`
	CreatedAt         time.Time  `json:"createdAt"`
	ExclusionPatterns []string   `json:"exclusionPatterns"`
	Id                string     `json:"id"`
	ImportPaths       []string   `json:"importPaths"`
	Name              string     `json:"name"`
	OwnerId           string     `json:"ownerId"`
	RefreshedAt       *time.Time `json:"refreshedAt"`
	UpdatedAt         time.Time  `json:"updatedAt"`
}

// LibraryStatsResponseDto defines model for LibraryStatsResponseDto.
type LibraryStatsResponseDto struct {
	Photos int   `json:"photos"`
	Total  int   `json:"total"`
	Usage  int64 `json:"usage"`
	Videos int   `json:"videos"`
}

// LicenseKeyDto defines model for LicenseKeyDto.
type LicenseKeyDto struct {
	ActivationKey string `json:"activationKey"`
	LicenseKey    string `json:"licenseKey"`
}

// LicenseResponseDto defines model for LicenseResponseDto.
type LicenseResponseDto struct {
	ActivatedAt   time.Time `json:"activatedAt"`
	ActivationKey string    `json:"activationKey"`
	LicenseKey    string    `json:"licenseKey"`
}

// LogLevel defines model for LogLevel.
type LogLevel string

// LoginCredentialDto defines model for LoginCredentialDto.
type LoginCredentialDto struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponseDto defines model for LoginResponseDto.
type LoginResponseDto struct {
	AccessToken          string `json:"accessToken"`
	IsAdmin              bool   `json:"isAdmin"`
	Name                 string `json:"name"`
	ProfileImagePath     string `json:"profileImagePath"`
	ShouldChangePassword bool   `json:"shouldChangePassword"`
	UserEmail            string `json:"userEmail"`
	UserId               string `json:"userId"`
}

// LogoutResponseDto defines model for LogoutResponseDto.
type LogoutResponseDto struct {
	RedirectUri string `json:"redirectUri"`
	Successful  bool   `json:"successful"`
}

// ManualJobName defines model for ManualJobName.
type ManualJobName string

// MapMarkerResponseDto defines model for MapMarkerResponseDto.
type MapMarkerResponseDto struct {
	City    *string `json:"city"`
	Country *string `json:"country"`
	Id      string  `json:"id"`
	Lat     float64 `json:"lat"`
	Lon     float64 `json:"lon"`
	State   *string `json:"state"`
}

// MapReverseGeocodeResponseDto defines model for MapReverseGeocodeResponseDto.
type MapReverseGeocodeResponseDto struct {
	City    *string `json:"city"`
	Country *string `json:"country"`
	State   *string `json:"state"`
}

// MemoriesResponse defines model for MemoriesResponse.
type MemoriesResponse struct {
	Enabled bool `json:"enabled"`
}

// MemoriesUpdate defines model for MemoriesUpdate.
type MemoriesUpdate struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// MemoryCreateDto defines model for MemoryCreateDto.
type MemoryCreateDto struct {
	AssetIds *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Data     OnThisDayDto          `json:"data"`
	IsSaved  *bool                 `json:"isSaved,omitempty"`
	MemoryAt time.Time             `json:"memoryAt"`
	SeenAt   *time.Time            `json:"seenAt,omitempty"`
	Type     MemoryType            `json:"type"`
}

// MemoryResponseDto defines model for MemoryResponseDto.
type MemoryResponseDto struct {
	Assets    []AssetResponseDto `json:"assets"`
	CreatedAt time.Time          `json:"createdAt"`
	Data      OnThisDayDto       `json:"data"`
	DeletedAt *time.Time         `json:"deletedAt,omitempty"`
	HideAt    *time.Time         `json:"hideAt,omitempty"`
	Id        string             `json:"id"`
	IsSaved   bool               `json:"isSaved"`
	MemoryAt  time.Time          `json:"memoryAt"`
	OwnerId   string             `json:"ownerId"`
	SeenAt    *time.Time         `json:"seenAt,omitempty"`
	ShowAt    *time.Time         `json:"showAt,omitempty"`
	Type      MemoryType         `json:"type"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// MemoryType defines model for MemoryType.
type MemoryType string

// MemoryUpdateDto defines model for MemoryUpdateDto.
type MemoryUpdateDto struct {
	IsSaved  *bool      `json:"isSaved,omitempty"`
	MemoryAt *time.Time `json:"memoryAt,omitempty"`
	SeenAt   *time.Time `json:"seenAt,omitempty"`
}

// MergePersonDto defines model for MergePersonDto.
type MergePersonDto struct {
	Ids []openapi_types.UUID `json:"ids"`
}

// MetadataSearchDto defines model for MetadataSearchDto.
type MetadataSearchDto struct {
	Checksum         *string               `json:"checksum,omitempty"`
	City             *string               `json:"city"`
	Country          *string               `json:"country"`
	CreatedAfter     *time.Time            `json:"createdAfter,omitempty"`
	CreatedBefore    *time.Time            `json:"createdBefore,omitempty"`
	Description      *string               `json:"description,omitempty"`
	DeviceAssetId    *string               `json:"deviceAssetId,omitempty"`
	DeviceId         *string               `json:"deviceId,omitempty"`
	EncodedVideoPath *string               `json:"encodedVideoPath,omitempty"`
	Id               *openapi_types.UUID   `json:"id,omitempty"`
	IsEncoded        *bool                 `json:"isEncoded,omitempty"`
	IsFavorite       *bool                 `json:"isFavorite,omitempty"`
	IsMotion         *bool                 `json:"isMotion,omitempty"`
	IsNotInAlbum     *bool                 `json:"isNotInAlbum,omitempty"`
	IsOffline        *bool                 `json:"isOffline,omitempty"`
	LensModel        *string               `json:"lensModel"`
	LibraryId        *openapi_types.UUID   `json:"libraryId"`
	Make             *string               `json:"make,omitempty"`
	Model            *string               `json:"model"`
	Order            *AssetOrder           `json:"order,omitempty"`
	OriginalFileName *string               `json:"originalFileName,omitempty"`
	OriginalPath     *string               `json:"originalPath,omitempty"`
	Page             *float32              `json:"page,omitempty"`
	PersonIds        *[]openapi_types.UUID `json:"personIds,omitempty"`
	PreviewPath      *string               `json:"previewPath,omitempty"`
	Rating           *float32              `json:"rating,omitempty"`
	Size             *float32              `json:"size,omitempty"`
	State            *string               `json:"state"`
	TagIds           *[]openapi_types.UUID `json:"tagIds,omitempty"`
	TakenAfter       *time.Time            `json:"takenAfter,omitempty"`
	TakenBefore      *time.Time            `json:"takenBefore,omitempty"`
	ThumbnailPath    *string               `json:"thumbnailPath,omitempty"`
	TrashedAfter     *time.Time            `json:"trashedAfter,omitempty"`
	TrashedBefore    *time.Time            `json:"trashedBefore,omitempty"`
	Type             *AssetTypeEnum        `json:"type,omitempty"`
	UpdatedAfter     *time.Time            `json:"updatedAfter,omitempty"`
	UpdatedBefore    *time.Time            `json:"updatedBefore,omitempty"`
	Visibility       *AssetVisibility      `json:"visibility,omitempty"`
	WithDeleted      *bool                 `json:"withDeleted,omitempty"`
	WithExif         *bool                 `json:"withExif,omitempty"`
	WithPeople       *bool                 `json:"withPeople,omitempty"`
	WithStacked      *bool                 `json:"withStacked,omitempty"`
}

// NotificationCreateDto defines model for NotificationCreateDto.
type NotificationCreateDto struct {
	Data        *map[string]interface{} `json:"data,omitempty"`
	Description *string                 `json:"description"`
	Level       *NotificationLevel      `json:"level,omitempty"`
	ReadAt      *time.Time              `json:"readAt"`
	Title       string                  `json:"title"`
	Type        *NotificationType       `json:"type,omitempty"`
	UserId      openapi_types.UUID      `json:"userId"`
}

// NotificationDeleteAllDto defines model for NotificationDeleteAllDto.
type NotificationDeleteAllDto struct {
	Ids []openapi_types.UUID `json:"ids"`
}

// NotificationDto defines model for NotificationDto.
type NotificationDto struct {
	CreatedAt   time.Time               `json:"createdAt"`
	Data        *map[string]interface{} `json:"data,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          string                  `json:"id"`
	Level       NotificationLevel       `json:"level"`
	ReadAt      *time.Time              `json:"readAt,omitempty"`
	Title       string                  `json:"title"`
	Type        NotificationType        `json:"type"`
}

// NotificationLevel defines model for NotificationLevel.
type NotificationLevel string

// NotificationType defines model for NotificationType.
type NotificationType string

// NotificationUpdateAllDto defines model for NotificationUpdateAllDto.
type NotificationUpdateAllDto struct {
	Ids    []openapi_types.UUID `json:"ids"`
	ReadAt *time.Time           `json:"readAt"`
}

// NotificationUpdateDto defines model for NotificationUpdateDto.
type NotificationUpdateDto struct {
	ReadAt *time.Time `json:"readAt"`
}

// OAuthAuthorizeResponseDto defines model for OAuthAuthorizeResponseDto.
type OAuthAuthorizeResponseDto struct {
	Url string `json:"url"`
}

// OAuthCallbackDto defines model for OAuthCallbackDto.
type OAuthCallbackDto struct {
	CodeVerifier *string `json:"codeVerifier,omitempty"`
	State        *string `json:"state,omitempty"`
	Url          string  `json:"url"`
}

// OAuthConfigDto defines model for OAuthConfigDto.
type OAuthConfigDto struct {
	CodeChallenge *string `json:"codeChallenge,omitempty"`
	RedirectUri   string  `json:"redirectUri"`
	State         *string `json:"state,omitempty"`
}

// OAuthTokenEndpointAuthMethod defines model for OAuthTokenEndpointAuthMethod.
type OAuthTokenEndpointAuthMethod string

// OnThisDayDto defines model for OnThisDayDto.
type OnThisDayDto struct {
	Year float32 `json:"year"`
}

// PartnerDirection defines model for PartnerDirection.
type PartnerDirection string

// PartnerResponseDto defines model for PartnerResponseDto.
type PartnerResponseDto struct {
	AvatarColor      UserAvatarColor `json:"avatarColor"`
	Email            string          `json:"email"`
	Id               string          `json:"id"`
	InTimeline       *bool           `json:"inTimeline,omitempty"`
	Name             string          `json:"name"`
	ProfileChangedAt time.Time       `json:"profileChangedAt"`
	ProfileImagePath string          `json:"profileImagePath"`
}

// PeopleResponse defines model for PeopleResponse.
type PeopleResponse struct {
	Enabled    bool `json:"enabled"`
	SidebarWeb bool `json:"sidebarWeb"`
}

// PeopleResponseDto defines model for PeopleResponseDto.
type PeopleResponseDto struct {
	// HasNextPage This property was added in v1.110.0
	HasNextPage *bool               `json:"hasNextPage,omitempty"`
	Hidden      int                 `json:"hidden"`
	People      []PersonResponseDto `json:"people"`
	Total       int                 `json:"total"`
}

// PeopleUpdate defines model for PeopleUpdate.
type PeopleUpdate struct {
	Enabled    *bool `json:"enabled,omitempty"`
	SidebarWeb *bool `json:"sidebarWeb,omitempty"`
}

// PeopleUpdateDto defines model for PeopleUpdateDto.
type PeopleUpdateDto struct {
	People []PeopleUpdateItem `json:"people"`
}

// PeopleUpdateItem defines model for PeopleUpdateItem.
type PeopleUpdateItem struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate *openapi_types.Date `json:"birthDate"`
	Color     *string             `json:"color"`

	// FeatureFaceAssetId Asset is used to get the feature face thumbnail.
	FeatureFaceAssetId *openapi_types.UUID `json:"featureFaceAssetId,omitempty"`

	// Id Person id.
	Id         string `json:"id"`
	IsFavorite *bool  `json:"isFavorite,omitempty"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// Permission defines model for Permission.
type Permission string

// PersonCreateDto defines model for PersonCreateDto.
type PersonCreateDto struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate  *openapi_types.Date `json:"birthDate"`
	Color      *string             `json:"color"`
	IsFavorite *bool               `json:"isFavorite,omitempty"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// PersonResponseDto defines model for PersonResponseDto.
type PersonResponseDto struct {
	BirthDate *openapi_types.Date `json:"birthDate"`

	// Color This property was added in v1.126.0
	Color *string `json:"color,omitempty"`
	Id    string  `json:"id"`

	// IsFavorite This property was added in v1.126.0
	IsFavorite    *bool  `json:"isFavorite,omitempty"`
	IsHidden      bool   `json:"isHidden"`
	Name          string `json:"name"`
	ThumbnailPath string `json:"thumbnailPath"`

	// UpdatedAt This property was added in v1.107.0
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PersonStatisticsResponseDto defines model for PersonStatisticsResponseDto.
type PersonStatisticsResponseDto struct {
	Assets int `json:"assets"`
}

// PersonUpdateDto defines model for PersonUpdateDto.
type PersonUpdateDto struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate *openapi_types.Date `json:"birthDate"`
	Color     *string             `json:"color"`

	// FeatureFaceAssetId Asset is used to get the feature face thumbnail.
	FeatureFaceAssetId *openapi_types.UUID `json:"featureFaceAssetId,omitempty"`
	IsFavorite         *bool               `json:"isFavorite,omitempty"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// PersonWithFacesResponseDto defines model for PersonWithFacesResponseDto.
type PersonWithFacesResponseDto struct {
	BirthDate *openapi_types.Date `json:"birthDate"`

	// Color This property was added in v1.126.0
	Color *string                             `json:"color,omitempty"`
	Faces []AssetFaceWithoutPersonResponseDto `json:"faces"`
	Id    string                              `json:"id"`

	// IsFavorite This property was added in v1.126.0
	IsFavorite    *bool  `json:"isFavorite,omitempty"`
	IsHidden      bool   `json:"isHidden"`
	Name          string `json:"name"`
	ThumbnailPath string `json:"thumbnailPath"`

	// UpdatedAt This property was added in v1.107.0
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PinCodeChangeDto defines model for PinCodeChangeDto.
type PinCodeChangeDto struct {
	NewPinCode string  `json:"newPinCode"`
	Password   *string `json:"password,omitempty"`
	PinCode    *string `json:"pinCode,omitempty"`
}

// PinCodeResetDto defines model for PinCodeResetDto.
type PinCodeResetDto struct {
	Password *string `json:"password,omitempty"`
	PinCode  *string `json:"pinCode,omitempty"`
}

// PinCodeSetupDto defines model for PinCodeSetupDto.
type PinCodeSetupDto struct {
	PinCode string `json:"pinCode"`
}

// PlacesResponseDto defines model for PlacesResponseDto.
type PlacesResponseDto struct {
	Admin1name *string `json:"admin1name,omitempty"`
	Admin2name *string `json:"admin2name,omitempty"`
	Latitude   float32 `json:"latitude"`
	Longitude  float32 `json:"longitude"`
	Name       string  `json:"name"`
}

// PurchaseResponse defines model for PurchaseResponse.
type PurchaseResponse struct {
	HideBuyButtonUntil string `json:"hideBuyButtonUntil"`
	ShowSupportBadge   bool   `json:"showSupportBadge"`
}

// PurchaseUpdate defines model for PurchaseUpdate.
type PurchaseUpdate struct {
	HideBuyButtonUntil *string `json:"hideBuyButtonUntil,omitempty"`
	ShowSupportBadge   *bool   `json:"showSupportBadge,omitempty"`
}

// QueueStatusDto defines model for QueueStatusDto.
type QueueStatusDto struct {
	IsActive bool `json:"isActive"`
	IsPaused bool `json:"isPaused"`
}

// RandomSearchDto defines model for RandomSearchDto.
type RandomSearchDto struct {
	City          *string               `json:"city"`
	Country       *string               `json:"country"`
	CreatedAfter  *time.Time            `json:"createdAfter,omitempty"`
	CreatedBefore *time.Time            `json:"createdBefore,omitempty"`
	DeviceId      *string               `json:"deviceId,omitempty"`
	IsEncoded     *bool                 `json:"isEncoded,omitempty"`
	IsFavorite    *bool                 `json:"isFavorite,omitempty"`
	IsMotion      *bool                 `json:"isMotion,omitempty"`
	IsNotInAlbum  *bool                 `json:"isNotInAlbum,omitempty"`
	IsOffline     *bool                 `json:"isOffline,omitempty"`
	LensModel     *string               `json:"lensModel"`
	LibraryId     *openapi_types.UUID   `json:"libraryId"`
	Make          *string               `json:"make,omitempty"`
	Model         *string               `json:"model"`
	PersonIds     *[]openapi_types.UUID `json:"personIds,omitempty"`
	Rating        *float32              `json:"rating,omitempty"`
	Size          *float32              `json:"size,omitempty"`
	State         *string               `json:"state"`
	TagIds        *[]openapi_types.UUID `json:"tagIds,omitempty"`
	TakenAfter    *time.Time            `json:"takenAfter,omitempty"`
	TakenBefore   *time.Time            `json:"takenBefore,omitempty"`
	TrashedAfter  *time.Time            `json:"trashedAfter,omitempty"`
	TrashedBefore *time.Time            `json:"trashedBefore,omitempty"`
	Type          *AssetTypeEnum        `json:"type,omitempty"`
	UpdatedAfter  *time.Time            `json:"updatedAfter,omitempty"`
	UpdatedBefore *time.Time            `json:"updatedBefore,omitempty"`
	Visibility    *AssetVisibility      `json:"visibility,omitempty"`
	WithDeleted   *bool                 `json:"withDeleted,omitempty"`
	WithExif      *bool                 `json:"withExif,omitempty"`
	WithPeople    *bool                 `json:"withPeople,omitempty"`
	WithStacked   *bool                 `json:"withStacked,omitempty"`
}

// RatingsResponse defines model for RatingsResponse.
type RatingsResponse struct {
	Enabled bool `json:"enabled"`
}

// RatingsUpdate defines model for RatingsUpdate.
type RatingsUpdate struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// ReactionLevel defines model for ReactionLevel.
type ReactionLevel string

// ReactionType defines model for ReactionType.
type ReactionType string

// ReverseGeocodingStateResponseDto defines model for ReverseGeocodingStateResponseDto.
type ReverseGeocodingStateResponseDto struct {
	LastImportFileName *string `json:"lastImportFileName"`
	LastUpdate         *string `json:"lastUpdate"`
}

// SearchAlbumResponseDto defines model for SearchAlbumResponseDto.
type SearchAlbumResponseDto struct {
	Count  int                      `json:"count"`
	Facets []SearchFacetResponseDto `json:"facets"`
	Items  []AlbumResponseDto       `json:"items"`
	Total  int                      `json:"total"`
}

// SearchAssetResponseDto defines model for SearchAssetResponseDto.
type SearchAssetResponseDto struct {
	Count    int                      `json:"count"`
	Facets   []SearchFacetResponseDto `json:"facets"`
	Items    []AssetResponseDto       `json:"items"`
	NextPage *string                  `json:"nextPage"`
	Total    int                      `json:"total"`
}

// SearchExploreItem defines model for SearchExploreItem.
type SearchExploreItem struct {
	Data  AssetResponseDto `json:"data"`
	Value string           `json:"value"`
}

// SearchExploreResponseDto defines model for SearchExploreResponseDto.
type SearchExploreResponseDto struct {
	FieldName string              `json:"fieldName"`
	Items     []SearchExploreItem `json:"items"`
}

// SearchFacetCountResponseDto defines model for SearchFacetCountResponseDto.
type SearchFacetCountResponseDto struct {
	Count int    `json:"count"`
	Value string `json:"value"`
}

// SearchFacetResponseDto defines model for SearchFacetResponseDto.
type SearchFacetResponseDto struct {
	Counts    []SearchFacetCountResponseDto `json:"counts"`
	FieldName string                        `json:"fieldName"`
}

// SearchResponseDto defines model for SearchResponseDto.
type SearchResponseDto struct {
	Albums SearchAlbumResponseDto `json:"albums"`
	Assets SearchAssetResponseDto `json:"assets"`
}

// SearchSuggestionType defines model for SearchSuggestionType.
type SearchSuggestionType string

// ServerAboutResponseDto defines model for ServerAboutResponseDto.
type ServerAboutResponseDto struct {
	Build                      *string `json:"build,omitempty"`
	BuildImage                 *string `json:"buildImage,omitempty"`
	BuildImageUrl              *string `json:"buildImageUrl,omitempty"`
	BuildUrl                   *string `json:"buildUrl,omitempty"`
	Exiftool                   *string `json:"exiftool,omitempty"`
	Ffmpeg                     *string `json:"ffmpeg,omitempty"`
	Imagemagick                *string `json:"imagemagick,omitempty"`
	Libvips                    *string `json:"libvips,omitempty"`
	Licensed                   bool    `json:"licensed"`
	Nodejs                     *string `json:"nodejs,omitempty"`
	Repository                 *string `json:"repository,omitempty"`
	RepositoryUrl              *string `json:"repositoryUrl,omitempty"`
	SourceCommit               *string `json:"sourceCommit,omitempty"`
	SourceRef                  *string `json:"sourceRef,omitempty"`
	SourceUrl                  *string `json:"sourceUrl,omitempty"`
	ThirdPartyBugFeatureUrl    *string `json:"thirdPartyBugFeatureUrl,omitempty"`
	ThirdPartyDocumentationUrl *string `json:"thirdPartyDocumentationUrl,omitempty"`
	ThirdPartySourceUrl        *string `json:"thirdPartySourceUrl,omitempty"`
	ThirdPartySupportUrl       *string `json:"thirdPartySupportUrl,omitempty"`
	Version                    string  `json:"version"`
	VersionUrl                 string  `json:"versionUrl"`
}

// ServerConfigDto defines model for ServerConfigDto.
type ServerConfigDto struct {
	ExternalDomain   string `json:"externalDomain"`
	IsInitialized    bool   `json:"isInitialized"`
	IsOnboarded      bool   `json:"isOnboarded"`
	LoginPageMessage string `json:"loginPageMessage"`
	MapDarkStyleUrl  string `json:"mapDarkStyleUrl"`
	MapLightStyleUrl string `json:"mapLightStyleUrl"`
	OauthButtonText  string `json:"oauthButtonText"`
	PublicUsers      bool   `json:"publicUsers"`
	TrashDays        int    `json:"trashDays"`
	UserDeleteDelay  int    `json:"userDeleteDelay"`
}

// ServerFeaturesDto defines model for ServerFeaturesDto.
type ServerFeaturesDto struct {
	ConfigFile         bool `json:"configFile"`
	DuplicateDetection bool `json:"duplicateDetection"`
	Email              bool `json:"email"`
	FacialRecognition  bool `json:"facialRecognition"`
	ImportFaces        bool `json:"importFaces"`
	Map                bool `json:"map"`
	Oauth              bool `json:"oauth"`
	OauthAutoLaunch    bool `json:"oauthAutoLaunch"`
	PasswordLogin      bool `json:"passwordLogin"`
	ReverseGeocoding   bool `json:"reverseGeocoding"`
	Search             bool `json:"search"`
	Sidecar            bool `json:"sidecar"`
	SmartSearch        bool `json:"smartSearch"`
	Trash              bool `json:"trash"`
}

// ServerMediaTypesResponseDto defines model for ServerMediaTypesResponseDto.
type ServerMediaTypesResponseDto struct {
	Image   []string `json:"image"`
	Sidecar []string `json:"sidecar"`
	Video   []string `json:"video"`
}

// ServerPingResponse defines model for ServerPingResponse.
type ServerPingResponse struct {
	Res *string `json:"res,omitempty"`
}

// ServerStatsResponseDto defines model for ServerStatsResponseDto.
type ServerStatsResponseDto struct {
	Photos      int              `json:"photos"`
	Usage       int64            `json:"usage"`
	UsageByUser []UsageByUserDto `json:"usageByUser"`
	UsagePhotos int64            `json:"usagePhotos"`
	UsageVideos int64            `json:"usageVideos"`
	Videos      int              `json:"videos"`
}

// ServerStorageResponseDto defines model for ServerStorageResponseDto.
type ServerStorageResponseDto struct {
	DiskAvailable       string  `json:"diskAvailable"`
	DiskAvailableRaw    int64   `json:"diskAvailableRaw"`
	DiskSize            string  `json:"diskSize"`
	DiskSizeRaw         int64   `json:"diskSizeRaw"`
	DiskUsagePercentage float64 `json:"diskUsagePercentage"`
	DiskUse             string  `json:"diskUse"`
	DiskUseRaw          int64   `json:"diskUseRaw"`
}

// ServerThemeDto defines model for ServerThemeDto.
type ServerThemeDto struct {
	CustomCss string `json:"customCss"`
}

// ServerVersionHistoryResponseDto defines model for ServerVersionHistoryResponseDto.
type ServerVersionHistoryResponseDto struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Version   string    `json:"version"`
}

// ServerVersionResponseDto defines model for ServerVersionResponseDto.
type ServerVersionResponseDto struct {
	Major int `json:"major"`
	Minor int `json:"minor"`
	Patch int `json:"patch"`
}

// SessionCreateDto defines model for SessionCreateDto.
type SessionCreateDto struct {
	DeviceOS   *string `json:"deviceOS,omitempty"`
	DeviceType *string `json:"deviceType,omitempty"`

	// Duration session duration, in seconds
	Duration *float32 `json:"duration,omitempty"`
}

// SessionCreateResponseDto defines model for SessionCreateResponseDto.
type SessionCreateResponseDto struct {
	CreatedAt  string  `json:"createdAt"`
	Current    bool    `json:"current"`
	DeviceOS   string  `json:"deviceOS"`
	DeviceType string  `json:"deviceType"`
	ExpiresAt  *string `json:"expiresAt,omitempty"`
	Id         string  `json:"id"`
	Token      string  `json:"token"`
	UpdatedAt  string  `json:"updatedAt"`
}

// SessionResponseDto defines model for SessionResponseDto.
type SessionResponseDto struct {
	CreatedAt  string  `json:"createdAt"`
	Current    bool    `json:"current"`
	DeviceOS   string  `json:"deviceOS"`
	DeviceType string  `json:"deviceType"`
	ExpiresAt  *string `json:"expiresAt,omitempty"`
	Id         string  `json:"id"`
	UpdatedAt  string  `json:"updatedAt"`
}

// SessionUnlockDto defines model for SessionUnlockDto.
type SessionUnlockDto struct {
	Password *string `json:"password,omitempty"`
	PinCode  *string `json:"pinCode,omitempty"`
}

// SharedLinkCreateDto defines model for SharedLinkCreateDto.
type SharedLinkCreateDto struct {
	AlbumId       *openapi_types.UUID   `json:"albumId,omitempty"`
	AllowDownload *bool                 `json:"allowDownload,omitempty"`
	AllowUpload   *bool                 `json:"allowUpload,omitempty"`
	AssetIds      *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Description   *string               `json:"description,omitempty"`
	ExpiresAt     *time.Time            `json:"expiresAt"`
	Password      *string               `json:"password,omitempty"`
	ShowMetadata  *bool                 `json:"showMetadata,omitempty"`
	Type          SharedLinkType        `json:"type"`
}

// SharedLinkEditDto defines model for SharedLinkEditDto.
type SharedLinkEditDto struct {
	AllowDownload *bool `json:"allowDownload,omitempty"`
	AllowUpload   *bool `json:"allowUpload,omitempty"`

	// ChangeExpiryTime Few clients cannot send null to set the expiryTime to never.
	// Setting this flag and not sending expiryAt is considered as null instead.
	// Clients that can send null values can ignore this.
	ChangeExpiryTime *bool      `json:"changeExpiryTime,omitempty"`
	Description      *string    `json:"description,omitempty"`
	ExpiresAt        *time.Time `json:"expiresAt"`
	Password         *string    `json:"password,omitempty"`
	ShowMetadata     *bool      `json:"showMetadata,omitempty"`
}

// SharedLinkResponseDto defines model for SharedLinkResponseDto.
type SharedLinkResponseDto struct {
	Album         *AlbumResponseDto  `json:"album,omitempty"`
	AllowDownload bool               `json:"allowDownload"`
	AllowUpload   bool               `json:"allowUpload"`
	Assets        []AssetResponseDto `json:"assets"`
	CreatedAt     time.Time          `json:"createdAt"`
	Description   *string            `json:"description"`
	ExpiresAt     *time.Time         `json:"expiresAt"`
	Id            string             `json:"id"`
	Key           string             `json:"key"`
	Password      *string            `json:"password"`
	ShowMetadata  bool               `json:"showMetadata"`
	Token         *string            `json:"token"`
	Type          SharedLinkType     `json:"type"`
	UserId        string             `json:"userId"`
}

// SharedLinkType defines model for SharedLinkType.
type SharedLinkType string

// SharedLinksResponse defines model for SharedLinksResponse.
type SharedLinksResponse struct {
	Enabled    bool `json:"enabled"`
	SidebarWeb bool `json:"sidebarWeb"`
}

// SharedLinksUpdate defines model for SharedLinksUpdate.
type SharedLinksUpdate struct {
	Enabled    *bool `json:"enabled,omitempty"`
	SidebarWeb *bool `json:"sidebarWeb,omitempty"`
}

// SignUpDto defines model for SignUpDto.
type SignUpDto struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// SmartSearchDto defines model for SmartSearchDto.
type SmartSearchDto struct {
	City          *string               `json:"city"`
	Country       *string               `json:"country"`
	CreatedAfter  *time.Time            `json:"createdAfter,omitempty"`
	CreatedBefore *time.Time            `json:"createdBefore,omitempty"`
	DeviceId      *string               `json:"deviceId,omitempty"`
	IsEncoded     *bool                 `json:"isEncoded,omitempty"`
	IsFavorite    *bool                 `json:"isFavorite,omitempty"`
	IsMotion      *bool                 `json:"isMotion,omitempty"`
	IsNotInAlbum  *bool                 `json:"isNotInAlbum,omitempty"`
	IsOffline     *bool                 `json:"isOffline,omitempty"`
	Language      *string               `json:"language,omitempty"`
	LensModel     *string               `json:"lensModel"`
	LibraryId     *openapi_types.UUID   `json:"libraryId"`
	Make          *string               `json:"make,omitempty"`
	Model         *string               `json:"model"`
	Page          *float32              `json:"page,omitempty"`
	PersonIds     *[]openapi_types.UUID `json:"personIds,omitempty"`
	Query         string                `json:"query"`
	Rating        *float32              `json:"rating,omitempty"`
	Size          *float32              `json:"size,omitempty"`
	State         *string               `json:"state"`
	TagIds        *[]openapi_types.UUID `json:"tagIds,omitempty"`
	TakenAfter    *time.Time            `json:"takenAfter,omitempty"`
	TakenBefore   *time.Time            `json:"takenBefore,omitempty"`
	TrashedAfter  *time.Time            `json:"trashedAfter,omitempty"`
	TrashedBefore *time.Time            `json:"trashedBefore,omitempty"`
	Type          *AssetTypeEnum        `json:"type,omitempty"`
	UpdatedAfter  *time.Time            `json:"updatedAfter,omitempty"`
	UpdatedBefore *time.Time            `json:"updatedBefore,omitempty"`
	Visibility    *AssetVisibility      `json:"visibility,omitempty"`
	WithDeleted   *bool                 `json:"withDeleted,omitempty"`
	WithExif      *bool                 `json:"withExif,omitempty"`
}

// SourceType defines model for SourceType.
type SourceType string

// StackCreateDto defines model for StackCreateDto.
type StackCreateDto struct {
	// AssetIds first asset becomes the primary
	AssetIds []openapi_types.UUID `json:"assetIds"`
}

// StackResponseDto defines model for StackResponseDto.
type StackResponseDto struct {
	Assets         []AssetResponseDto `json:"assets"`
	Id             string             `json:"id"`
	PrimaryAssetId string             `json:"primaryAssetId"`
}

// StackUpdateDto defines model for StackUpdateDto.
type StackUpdateDto struct {
	PrimaryAssetId *openapi_types.UUID `json:"primaryAssetId,omitempty"`
}

// SyncAckDeleteDto defines model for SyncAckDeleteDto.
type SyncAckDeleteDto struct {
	Types *[]SyncEntityType `json:"types,omitempty"`
}

// SyncAckDto defines model for SyncAckDto.
type SyncAckDto struct {
	Ack  string         `json:"ack"`
	Type SyncEntityType `json:"type"`
}

// SyncAckSetDto defines model for SyncAckSetDto.
type SyncAckSetDto struct {
	Acks []string `json:"acks"`
}

// SyncEntityType defines model for SyncEntityType.
type SyncEntityType string

// SyncRequestType defines model for SyncRequestType.
type SyncRequestType string

// SyncStreamDto defines model for SyncStreamDto.
type SyncStreamDto struct {
	Types []SyncRequestType `json:"types"`
}

// SystemConfigBackupsDto defines model for SystemConfigBackupsDto.
type SystemConfigBackupsDto struct {
	Database DatabaseBackupConfig `json:"database"`
}

// SystemConfigDto defines model for SystemConfigDto.
type SystemConfigDto struct {
	Backup           SystemConfigBackupsDto          `json:"backup"`
	Ffmpeg           SystemConfigFFmpegDto           `json:"ffmpeg"`
	Image            SystemConfigImageDto            `json:"image"`
	Job              SystemConfigJobDto              `json:"job"`
	Library          SystemConfigLibraryDto          `json:"library"`
	Logging          SystemConfigLoggingDto          `json:"logging"`
	MachineLearning  SystemConfigMachineLearningDto  `json:"machineLearning"`
	Map              SystemConfigMapDto              `json:"map"`
	Metadata         SystemConfigMetadataDto         `json:"metadata"`
	NewVersionCheck  SystemConfigNewVersionCheckDto  `json:"newVersionCheck"`
	Notifications    SystemConfigNotificationsDto    `json:"notifications"`
	Oauth            SystemConfigOAuthDto            `json:"oauth"`
	PasswordLogin    SystemConfigPasswordLoginDto    `json:"passwordLogin"`
	ReverseGeocoding SystemConfigReverseGeocodingDto `json:"reverseGeocoding"`
	Server           SystemConfigServerDto           `json:"server"`
	StorageTemplate  SystemConfigStorageTemplateDto  `json:"storageTemplate"`
	Templates        SystemConfigTemplatesDto        `json:"templates"`
	Theme            SystemConfigThemeDto            `json:"theme"`
	Trash            SystemConfigTrashDto            `json:"trash"`
	User             SystemConfigUserDto             `json:"user"`
}

// SystemConfigFFmpegDto defines model for SystemConfigFFmpegDto.
type SystemConfigFFmpegDto struct {
	Accel               TranscodeHWAccel `json:"accel"`
	AccelDecode         bool             `json:"accelDecode"`
	AcceptedAudioCodecs []AudioCodec     `json:"acceptedAudioCodecs"`
	AcceptedContainers  []VideoContainer `json:"acceptedContainers"`
	AcceptedVideoCodecs []VideoCodec     `json:"acceptedVideoCodecs"`
	Bframes             int              `json:"bframes"`
	CqMode              CQMode           `json:"cqMode"`
	Crf                 int              `json:"crf"`
	GopSize             int              `json:"gopSize"`
	MaxBitrate          string           `json:"maxBitrate"`
	PreferredHwDevice   string           `json:"preferredHwDevice"`
	Preset              string           `json:"preset"`
	Refs                int              `json:"refs"`
	TargetAudioCodec    AudioCodec       `json:"targetAudioCodec"`
	TargetResolution    string           `json:"targetResolution"`
	TargetVideoCodec    VideoCodec       `json:"targetVideoCodec"`
	TemporalAQ          bool             `json:"temporalAQ"`
	Threads             int              `json:"threads"`
	Tonemap             ToneMapping      `json:"tonemap"`
	Transcode           TranscodePolicy  `json:"transcode"`
	TwoPass             bool             `json:"twoPass"`
}

// SystemConfigFacesDto defines model for SystemConfigFacesDto.
type SystemConfigFacesDto struct {
	Import bool `json:"import"`
}

// SystemConfigGeneratedFullsizeImageDto defines model for SystemConfigGeneratedFullsizeImageDto.
type SystemConfigGeneratedFullsizeImageDto struct {
	Enabled bool        `json:"enabled"`
	Format  ImageFormat `json:"format"`
	Quality int         `json:"quality"`
}

// SystemConfigGeneratedImageDto defines model for SystemConfigGeneratedImageDto.
type SystemConfigGeneratedImageDto struct {
	Format  ImageFormat `json:"format"`
	Quality int         `json:"quality"`
	Size    int         `json:"size"`
}

// SystemConfigImageDto defines model for SystemConfigImageDto.
type SystemConfigImageDto struct {
	Colorspace      Colorspace                            `json:"colorspace"`
	ExtractEmbedded bool                                  `json:"extractEmbedded"`
	Fullsize        SystemConfigGeneratedFullsizeImageDto `json:"fullsize"`
	Preview         SystemConfigGeneratedImageDto         `json:"preview"`
	Thumbnail       SystemConfigGeneratedImageDto         `json:"thumbnail"`
}

// SystemConfigJobDto defines model for SystemConfigJobDto.
type SystemConfigJobDto struct {
	BackgroundTask      JobSettingsDto `json:"backgroundTask"`
	FaceDetection       JobSettingsDto `json:"faceDetection"`
	Library             JobSettingsDto `json:"library"`
	MetadataExtraction  JobSettingsDto `json:"metadataExtraction"`
	Migration           JobSettingsDto `json:"migration"`
	Notifications       JobSettingsDto `json:"notifications"`
	Search              JobSettingsDto `json:"search"`
	Sidecar             JobSettingsDto `json:"sidecar"`
	SmartSearch         JobSettingsDto `json:"smartSearch"`
	ThumbnailGeneration JobSettingsDto `json:"thumbnailGeneration"`
	VideoConversion     JobSettingsDto `json:"videoConversion"`
}

// SystemConfigLibraryDto defines model for SystemConfigLibraryDto.
type SystemConfigLibraryDto struct {
	Scan  SystemConfigLibraryScanDto  `json:"scan"`
	Watch SystemConfigLibraryWatchDto `json:"watch"`
}

// SystemConfigLibraryScanDto defines model for SystemConfigLibraryScanDto.
type SystemConfigLibraryScanDto struct {
	CronExpression string `json:"cronExpression"`
	Enabled        bool   `json:"enabled"`
}

// SystemConfigLibraryWatchDto defines model for SystemConfigLibraryWatchDto.
type SystemConfigLibraryWatchDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigLoggingDto defines model for SystemConfigLoggingDto.
type SystemConfigLoggingDto struct {
	Enabled bool     `json:"enabled"`
	Level   LogLevel `json:"level"`
}

// SystemConfigMachineLearningDto defines model for SystemConfigMachineLearningDto.
type SystemConfigMachineLearningDto struct {
	Clip               CLIPConfig               `json:"clip"`
	DuplicateDetection DuplicateDetectionConfig `json:"duplicateDetection"`
	Enabled            bool                     `json:"enabled"`
	FacialRecognition  FacialRecognitionConfig  `json:"facialRecognition"`

	// Url This property was deprecated in v1.122.0
	// Deprecated:
	Url  *string  `json:"url,omitempty"`
	Urls []string `json:"urls"`
}

// SystemConfigMapDto defines model for SystemConfigMapDto.
type SystemConfigMapDto struct {
	DarkStyle  string `json:"darkStyle"`
	Enabled    bool   `json:"enabled"`
	LightStyle string `json:"lightStyle"`
}

// SystemConfigMetadataDto defines model for SystemConfigMetadataDto.
type SystemConfigMetadataDto struct {
	Faces SystemConfigFacesDto `json:"faces"`
}

// SystemConfigNewVersionCheckDto defines model for SystemConfigNewVersionCheckDto.
type SystemConfigNewVersionCheckDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigNotificationsDto defines model for SystemConfigNotificationsDto.
type SystemConfigNotificationsDto struct {
	Smtp SystemConfigSmtpDto `json:"smtp"`
}

// SystemConfigOAuthDto defines model for SystemConfigOAuthDto.
type SystemConfigOAuthDto struct {
	AutoLaunch              bool                         `json:"autoLaunch"`
	AutoRegister            bool                         `json:"autoRegister"`
	ButtonText              string                       `json:"buttonText"`
	ClientId                string                       `json:"clientId"`
	ClientSecret            string                       `json:"clientSecret"`
	DefaultStorageQuota     float32                      `json:"defaultStorageQuota"`
	Enabled                 bool                         `json:"enabled"`
	IssuerUrl               string                       `json:"issuerUrl"`
	MobileOverrideEnabled   bool                         `json:"mobileOverrideEnabled"`
	MobileRedirectUri       string                       `json:"mobileRedirectUri"`
	ProfileSigningAlgorithm string                       `json:"profileSigningAlgorithm"`
	Scope                   string                       `json:"scope"`
	SigningAlgorithm        string                       `json:"signingAlgorithm"`
	StorageLabelClaim       string                       `json:"storageLabelClaim"`
	StorageQuotaClaim       string                       `json:"storageQuotaClaim"`
	Timeout                 int                          `json:"timeout"`
	TokenEndpointAuthMethod OAuthTokenEndpointAuthMethod `json:"tokenEndpointAuthMethod"`
}

// SystemConfigPasswordLoginDto defines model for SystemConfigPasswordLoginDto.
type SystemConfigPasswordLoginDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigReverseGeocodingDto defines model for SystemConfigReverseGeocodingDto.
type SystemConfigReverseGeocodingDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigServerDto defines model for SystemConfigServerDto.
type SystemConfigServerDto struct {
	ExternalDomain   string `json:"externalDomain"`
	LoginPageMessage string `json:"loginPageMessage"`
	PublicUsers      bool   `json:"publicUsers"`
}

// SystemConfigSmtpDto defines model for SystemConfigSmtpDto.
type SystemConfigSmtpDto struct {
	Enabled   bool                         `json:"enabled"`
	From      string                       `json:"from"`
	ReplyTo   string                       `json:"replyTo"`
	Transport SystemConfigSmtpTransportDto `json:"transport"`
}

// SystemConfigSmtpTransportDto defines model for SystemConfigSmtpTransportDto.
type SystemConfigSmtpTransportDto struct {
	Host       string  `json:"host"`
	IgnoreCert bool    `json:"ignoreCert"`
	Password   string  `json:"password"`
	Port       float32 `json:"port"`
	Username   string  `json:"username"`
}

// SystemConfigStorageTemplateDto defines model for SystemConfigStorageTemplateDto.
type SystemConfigStorageTemplateDto struct {
	Enabled                 bool   `json:"enabled"`
	HashVerificationEnabled bool   `json:"hashVerificationEnabled"`
	Template                string `json:"template"`
}

// SystemConfigTemplateEmailsDto defines model for SystemConfigTemplateEmailsDto.
type SystemConfigTemplateEmailsDto struct {
	AlbumInviteTemplate string `json:"albumInviteTemplate"`
	AlbumUpdateTemplate string `json:"albumUpdateTemplate"`
	WelcomeTemplate     string `json:"welcomeTemplate"`
}

// SystemConfigTemplateStorageOptionDto defines model for SystemConfigTemplateStorageOptionDto.
type SystemConfigTemplateStorageOptionDto struct {
	DayOptions    []string `json:"dayOptions"`
	HourOptions   []string `json:"hourOptions"`
	MinuteOptions []string `json:"minuteOptions"`
	MonthOptions  []string `json:"monthOptions"`
	PresetOptions []string `json:"presetOptions"`
	SecondOptions []string `json:"secondOptions"`
	WeekOptions   []string `json:"weekOptions"`
	YearOptions   []string `json:"yearOptions"`
}

// SystemConfigTemplatesDto defines model for SystemConfigTemplatesDto.
type SystemConfigTemplatesDto struct {
	Email SystemConfigTemplateEmailsDto `json:"email"`
}

// SystemConfigThemeDto defines model for SystemConfigThemeDto.
type SystemConfigThemeDto struct {
	CustomCss string `json:"customCss"`
}

// SystemConfigTrashDto defines model for SystemConfigTrashDto.
type SystemConfigTrashDto struct {
	Days    int  `json:"days"`
	Enabled bool `json:"enabled"`
}

// SystemConfigUserDto defines model for SystemConfigUserDto.
type SystemConfigUserDto struct {
	DeleteDelay int `json:"deleteDelay"`
}

// TagBulkAssetsDto defines model for TagBulkAssetsDto.
type TagBulkAssetsDto struct {
	AssetIds []openapi_types.UUID `json:"assetIds"`
	TagIds   []openapi_types.UUID `json:"tagIds"`
}

// TagBulkAssetsResponseDto defines model for TagBulkAssetsResponseDto.
type TagBulkAssetsResponseDto struct {
	Count int `json:"count"`
}

// TagCreateDto defines model for TagCreateDto.
type TagCreateDto struct {
	Color    *string             `json:"color,omitempty"`
	Name     string              `json:"name"`
	ParentId *openapi_types.UUID `json:"parentId"`
}

// TagResponseDto defines model for TagResponseDto.
type TagResponseDto struct {
	Color     *string   `json:"color,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	ParentId  *string   `json:"parentId,omitempty"`
	UpdatedAt time.Time `json:"updatedAt"`
	Value     string    `json:"value"`
}

// TagUpdateDto defines model for TagUpdateDto.
type TagUpdateDto struct {
	Color *string `json:"color"`
}

// TagUpsertDto defines model for TagUpsertDto.
type TagUpsertDto struct {
	Tags []string `json:"tags"`
}

// TagsResponse defines model for TagsResponse.
type TagsResponse struct {
	Enabled    bool `json:"enabled"`
	SidebarWeb bool `json:"sidebarWeb"`
}

// TagsUpdate defines model for TagsUpdate.
type TagsUpdate struct {
	Enabled    *bool `json:"enabled,omitempty"`
	SidebarWeb *bool `json:"sidebarWeb,omitempty"`
}

// TemplateDto defines model for TemplateDto.
type TemplateDto struct {
	Template string `json:"template"`
}

// TemplateResponseDto defines model for TemplateResponseDto.
type TemplateResponseDto struct {
	Html string `json:"html"`
	Name string `json:"name"`
}

// TestEmailResponseDto defines model for TestEmailResponseDto.
type TestEmailResponseDto struct {
	MessageId string `json:"messageId"`
}

// TimeBucketAssetResponseDto defines model for TimeBucketAssetResponseDto.
type TimeBucketAssetResponseDto struct {
	City             []string  `json:"city"`
	Country          []string  `json:"country"`
	Duration         []string  `json:"duration"`
	Id               []string  `json:"id"`
	IsFavorite       []bool    `json:"isFavorite"`
	IsImage          []bool    `json:"isImage"`
	IsTrashed        []bool    `json:"isTrashed"`
	LivePhotoVideoId []string  `json:"livePhotoVideoId"`
	LocalDateTime    []string  `json:"localDateTime"`
	OwnerId          []string  `json:"ownerId"`
	ProjectionType   []string  `json:"projectionType"`
	Ratio            []float32 `json:"ratio"`

	// Stack (stack ID, stack asset count) tuple
	Stack      *[][]string       `json:"stack,omitempty"`
	Thumbhash  []string          `json:"thumbhash"`
	Visibility []AssetVisibility `json:"visibility"`
}

// TimeBucketsResponseDto defines model for TimeBucketsResponseDto.
type TimeBucketsResponseDto struct {
	Count      int    `json:"count"`
	TimeBucket string `json:"timeBucket"`
}

// ToneMapping defines model for ToneMapping.
type ToneMapping string

// TranscodeHWAccel defines model for TranscodeHWAccel.
type TranscodeHWAccel string

// TranscodePolicy defines model for TranscodePolicy.
type TranscodePolicy string

// TrashResponseDto defines model for TrashResponseDto.
type TrashResponseDto struct {
	Count int `json:"count"`
}

// UpdateAlbumDto defines model for UpdateAlbumDto.
type UpdateAlbumDto struct {
	AlbumName             *string             `json:"albumName,omitempty"`
	AlbumThumbnailAssetId *openapi_types.UUID `json:"albumThumbnailAssetId,omitempty"`
	Description           *string             `json:"description,omitempty"`
	IsActivityEnabled     *bool               `json:"isActivityEnabled,omitempty"`
	Order                 *AssetOrder         `json:"order,omitempty"`
}

// UpdateAlbumUserDto defines model for UpdateAlbumUserDto.
type UpdateAlbumUserDto struct {
	Role AlbumUserRole `json:"role"`
}

// UpdateAssetDto defines model for UpdateAssetDto.
type UpdateAssetDto struct {
	DateTimeOriginal *string             `json:"dateTimeOriginal,omitempty"`
	Description      *string             `json:"description,omitempty"`
	IsFavorite       *bool               `json:"isFavorite,omitempty"`
	Latitude         *float32            `json:"latitude,omitempty"`
	LivePhotoVideoId *openapi_types.UUID `json:"livePhotoVideoId"`
	Longitude        *float32            `json:"longitude,omitempty"`
	Rating           *float32            `json:"rating,omitempty"`
	Visibility       *AssetVisibility    `json:"visibility,omitempty"`
}

// UpdateLibraryDto defines model for UpdateLibraryDto.
type UpdateLibraryDto struct {
	ExclusionPatterns *[]string `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string `json:"importPaths,omitempty"`
	Name              *string   `json:"name,omitempty"`
}

// UpdatePartnerDto defines model for UpdatePartnerDto.
type UpdatePartnerDto struct {
	InTimeline bool `json:"inTimeline"`
}

// UsageByUserDto defines model for UsageByUserDto.
type UsageByUserDto struct {
	Photos           int    `json:"photos"`
	QuotaSizeInBytes *int64 `json:"quotaSizeInBytes"`
	Usage            int64  `json:"usage"`
	UsagePhotos      int64  `json:"usagePhotos"`
	UsageVideos      int64  `json:"usageVideos"`
	UserId           string `json:"userId"`
	UserName         string `json:"userName"`
	Videos           int    `json:"videos"`
}

// UserAdminCreateDto defines model for UserAdminCreateDto.
type UserAdminCreateDto struct {
	AvatarColor          *UserAvatarColor    `json:"avatarColor"`
	Email                openapi_types.Email `json:"email"`
	Name                 string              `json:"name"`
	Notify               *bool               `json:"notify,omitempty"`
	Password             string              `json:"password"`
	QuotaSizeInBytes     *int64              `json:"quotaSizeInBytes"`
	ShouldChangePassword *bool               `json:"shouldChangePassword,omitempty"`
	StorageLabel         *string             `json:"storageLabel"`
}

// UserAdminDeleteDto defines model for UserAdminDeleteDto.
type UserAdminDeleteDto struct {
	Force *bool `json:"force,omitempty"`
}

// UserAdminResponseDto defines model for UserAdminResponseDto.
type UserAdminResponseDto struct {
	AvatarColor          UserAvatarColor `json:"avatarColor"`
	CreatedAt            time.Time       `json:"createdAt"`
	DeletedAt            *time.Time      `json:"deletedAt"`
	Email                string          `json:"email"`
	Id                   string          `json:"id"`
	IsAdmin              bool            `json:"isAdmin"`
	License              *UserLicense    `json:"license"`
	Name                 string          `json:"name"`
	OauthId              string          `json:"oauthId"`
	ProfileChangedAt     time.Time       `json:"profileChangedAt"`
	ProfileImagePath     string          `json:"profileImagePath"`
	QuotaSizeInBytes     *int64          `json:"quotaSizeInBytes"`
	QuotaUsageInBytes    *int64          `json:"quotaUsageInBytes"`
	ShouldChangePassword bool            `json:"shouldChangePassword"`
	Status               UserStatus      `json:"status"`
	StorageLabel         *string         `json:"storageLabel"`
	UpdatedAt            time.Time       `json:"updatedAt"`
}

// UserAdminUpdateDto defines model for UserAdminUpdateDto.
type UserAdminUpdateDto struct {
	AvatarColor          *UserAvatarColor     `json:"avatarColor"`
	Email                *openapi_types.Email `json:"email,omitempty"`
	Name                 *string              `json:"name,omitempty"`
	Password             *string              `json:"password,omitempty"`
	PinCode              *string              `json:"pinCode"`
	QuotaSizeInBytes     *int64               `json:"quotaSizeInBytes"`
	ShouldChangePassword *bool                `json:"shouldChangePassword,omitempty"`
	StorageLabel         *string              `json:"storageLabel"`
}

// UserAvatarColor defines model for UserAvatarColor.
type UserAvatarColor string

// UserLicense defines model for UserLicense.
type UserLicense struct {
	ActivatedAt   time.Time `json:"activatedAt"`
	ActivationKey string    `json:"activationKey"`
	LicenseKey    string    `json:"licenseKey"`
}

// UserPreferencesResponseDto defines model for UserPreferencesResponseDto.
type UserPreferencesResponseDto struct {
	Download           DownloadResponse           `json:"download"`
	EmailNotifications EmailNotificationsResponse `json:"emailNotifications"`
	Folders            FoldersResponse            `json:"folders"`
	Memories           MemoriesResponse           `json:"memories"`
	People             PeopleResponse             `json:"people"`
	Purchase           PurchaseResponse           `json:"purchase"`
	Ratings            RatingsResponse            `json:"ratings"`
	SharedLinks        SharedLinksResponse        `json:"sharedLinks"`
	Tags               TagsResponse               `json:"tags"`
}

// UserPreferencesUpdateDto defines model for UserPreferencesUpdateDto.
type UserPreferencesUpdateDto struct {
	Avatar             *AvatarUpdate             `json:"avatar,omitempty"`
	Download           *DownloadUpdate           `json:"download,omitempty"`
	EmailNotifications *EmailNotificationsUpdate `json:"emailNotifications,omitempty"`
	Folders            *FoldersUpdate            `json:"folders,omitempty"`
	Memories           *MemoriesUpdate           `json:"memories,omitempty"`
	People             *PeopleUpdate             `json:"people,omitempty"`
	Purchase           *PurchaseUpdate           `json:"purchase,omitempty"`
	Ratings            *RatingsUpdate            `json:"ratings,omitempty"`
	SharedLinks        *SharedLinksUpdate        `json:"sharedLinks,omitempty"`
	Tags               *TagsUpdate               `json:"tags,omitempty"`
}

// UserResponseDto defines model for UserResponseDto.
type UserResponseDto struct {
	AvatarColor      UserAvatarColor `json:"avatarColor"`
	Email            string          `json:"email"`
	Id               string          `json:"id"`
	Name             string          `json:"name"`
	ProfileChangedAt time.Time       `json:"profileChangedAt"`
	ProfileImagePath string          `json:"profileImagePath"`
}

// UserStatus defines model for UserStatus.
type UserStatus string

// UserUpdateMeDto defines model for UserUpdateMeDto.
type UserUpdateMeDto struct {
	AvatarColor *UserAvatarColor     `json:"avatarColor"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	Name        *string              `json:"name,omitempty"`
	Password    *string              `json:"password,omitempty"`
}

// ValidateAccessTokenResponseDto defines model for ValidateAccessTokenResponseDto.
type ValidateAccessTokenResponseDto struct {
	AuthStatus bool `json:"authStatus"`
}

// ValidateLibraryDto defines model for ValidateLibraryDto.
type ValidateLibraryDto struct {
	ExclusionPatterns *[]string `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string `json:"importPaths,omitempty"`
}

// ValidateLibraryImportPathResponseDto defines model for ValidateLibraryImportPathResponseDto.
type ValidateLibraryImportPathResponseDto struct {
	ImportPath string  `json:"importPath"`
	IsValid    bool    `json:"isValid"`
	Message    *string `json:"message,omitempty"`
}

// ValidateLibraryResponseDto defines model for ValidateLibraryResponseDto.
type ValidateLibraryResponseDto struct {
	ImportPaths *[]ValidateLibraryImportPathResponseDto `json:"importPaths,omitempty"`
}

// VideoCodec defines model for VideoCodec.
type VideoCodec string

// VideoContainer defines model for VideoContainer.
type VideoContainer string

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	AlbumId openapi_types.UUID  `form:"albumId" json:"albumId"`
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
	Level   *ReactionLevel      `form:"level,omitempty" json:"level,omitempty"`
	Type    *ReactionType       `form:"type,omitempty" json:"type,omitempty"`
	UserId  *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetActivityStatisticsParams defines parameters for GetActivityStatistics.
type GetActivityStatisticsParams struct {
	AlbumId openapi_types.UUID  `form:"albumId" json:"albumId"`
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
}

// SearchUsersAdminParams defines parameters for SearchUsersAdmin.
type SearchUsersAdminParams struct {
	Id          *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	WithDeleted *bool               `form:"withDeleted,omitempty" json:"withDeleted,omitempty"`
}

// GetUserStatisticsAdminParams defines parameters for GetUserStatisticsAdmin.
type GetUserStatisticsAdminParams struct {
	IsFavorite *bool            `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed  *bool            `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Visibility *AssetVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
}

// GetAllAlbumsParams defines parameters for GetAllAlbums.
type GetAllAlbumsParams struct {
	// AssetId Only returns albums that contain the asset
	// Ignores the shared parameter
	// undefined: get all albums
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
	Shared  *bool               `form:"shared,omitempty" json:"shared,omitempty"`
}

// GetAlbumInfoParams defines parameters for GetAlbumInfo.
type GetAlbumInfoParams struct {
	Key           *string `form:"key,omitempty" json:"key,omitempty"`
	WithoutAssets *bool   `form:"withoutAssets,omitempty" json:"withoutAssets,omitempty"`
}

// AddAssetsToAlbumParams defines parameters for AddAssetsToAlbum.
type AddAssetsToAlbumParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// UploadAssetParams defines parameters for UploadAsset.
type UploadAssetParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// XImmichChecksum sha1 checksum that can be used for duplicate detection before the file is uploaded
	XImmichChecksum *string `json:"x-immich-checksum,omitempty"`
}

// GetRandomParams defines parameters for GetRandom.
type GetRandomParams struct {
	Count *float32 `form:"count,omitempty" json:"count,omitempty"`
}

// GetAssetStatisticsParams defines parameters for GetAssetStatistics.
type GetAssetStatisticsParams struct {
	IsFavorite *bool            `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed  *bool            `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Visibility *AssetVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// DownloadAssetParams defines parameters for DownloadAsset.
type DownloadAssetParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// ReplaceAssetParams defines parameters for ReplaceAsset.
type ReplaceAssetParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// ViewAssetParams defines parameters for ViewAsset.
type ViewAssetParams struct {
	Key  *string         `form:"key,omitempty" json:"key,omitempty"`
	Size *AssetMediaSize `form:"size,omitempty" json:"size,omitempty"`
}

// PlayAssetVideoParams defines parameters for PlayAssetVideo.
type PlayAssetVideoParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// DownloadArchiveParams defines parameters for DownloadArchive.
type DownloadArchiveParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetDownloadInfoParams defines parameters for GetDownloadInfo.
type GetDownloadInfoParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetFacesParams defines parameters for GetFaces.
type GetFacesParams struct {
	Id openapi_types.UUID `form:"id" json:"id"`
}

// GetMapMarkersParams defines parameters for GetMapMarkers.
type GetMapMarkersParams struct {
	FileCreatedAfter  *time.Time `form:"fileCreatedAfter,omitempty" json:"fileCreatedAfter,omitempty"`
	FileCreatedBefore *time.Time `form:"fileCreatedBefore,omitempty" json:"fileCreatedBefore,omitempty"`
	IsArchived        *bool      `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite        *bool      `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	WithPartners      *bool      `form:"withPartners,omitempty" json:"withPartners,omitempty"`
	WithSharedAlbums  *bool      `form:"withSharedAlbums,omitempty" json:"withSharedAlbums,omitempty"`
}

// ReverseGeocodeParams defines parameters for ReverseGeocode.
type ReverseGeocodeParams struct {
	Lat float64 `form:"lat" json:"lat"`
	Lon float64 `form:"lon" json:"lon"`
}

// SearchMemoriesParams defines parameters for SearchMemories.
type SearchMemoriesParams struct {
	For       *time.Time  `form:"for,omitempty" json:"for,omitempty"`
	IsSaved   *bool       `form:"isSaved,omitempty" json:"isSaved,omitempty"`
	IsTrashed *bool       `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Type      *MemoryType `form:"type,omitempty" json:"type,omitempty"`
}

// GetNotificationsParams defines parameters for GetNotifications.
type GetNotificationsParams struct {
	Id     *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	Level  *NotificationLevel  `form:"level,omitempty" json:"level,omitempty"`
	Type   *NotificationType   `form:"type,omitempty" json:"type,omitempty"`
	Unread *bool               `form:"unread,omitempty" json:"unread,omitempty"`
}

// GetPartnersParams defines parameters for GetPartners.
type GetPartnersParams struct {
	Direction PartnerDirection `form:"direction" json:"direction"`
}

// GetAllPeopleParams defines parameters for GetAllPeople.
type GetAllPeopleParams struct {
	ClosestAssetId  *openapi_types.UUID `form:"closestAssetId,omitempty" json:"closestAssetId,omitempty"`
	ClosestPersonId *openapi_types.UUID `form:"closestPersonId,omitempty" json:"closestPersonId,omitempty"`

	// Page Page number for pagination
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size       *float32 `form:"size,omitempty" json:"size,omitempty"`
	WithHidden *bool    `form:"withHidden,omitempty" json:"withHidden,omitempty"`
}

// SearchPersonParams defines parameters for SearchPerson.
type SearchPersonParams struct {
	Name       string `form:"name" json:"name"`
	WithHidden *bool  `form:"withHidden,omitempty" json:"withHidden,omitempty"`
}

// SearchPlacesParams defines parameters for SearchPlaces.
type SearchPlacesParams struct {
	Name string `form:"name" json:"name"`
}

// GetSearchSuggestionsParams defines parameters for GetSearchSuggestions.
type GetSearchSuggestionsParams struct {
	Country *string `form:"country,omitempty" json:"country,omitempty"`

	// IncludeNull This property was added in v111.0.0
	IncludeNull *bool                `form:"includeNull,omitempty" json:"includeNull,omitempty"`
	Make        *string              `form:"make,omitempty" json:"make,omitempty"`
	Model       *string              `form:"model,omitempty" json:"model,omitempty"`
	State       *string              `form:"state,omitempty" json:"state,omitempty"`
	Type        SearchSuggestionType `form:"type" json:"type"`
}

// GetAllSharedLinksParams defines parameters for GetAllSharedLinks.
type GetAllSharedLinksParams struct {
	AlbumId *openapi_types.UUID `form:"albumId,omitempty" json:"albumId,omitempty"`
}

// GetMySharedLinkParams defines parameters for GetMySharedLink.
type GetMySharedLinkParams struct {
	Key      *string `form:"key,omitempty" json:"key,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty"`
	Token    *string `form:"token,omitempty" json:"token,omitempty"`
}

// RemoveSharedLinkAssetsParams defines parameters for RemoveSharedLinkAssets.
type RemoveSharedLinkAssetsParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// AddSharedLinkAssetsParams defines parameters for AddSharedLinkAssets.
type AddSharedLinkAssetsParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// SearchStacksParams defines parameters for SearchStacks.
type SearchStacksParams struct {
	PrimaryAssetId *openapi_types.UUID `form:"primaryAssetId,omitempty" json:"primaryAssetId,omitempty"`
}

// GetTimeBucketParams defines parameters for GetTimeBucket.
type GetTimeBucketParams struct {
	AlbumId      *openapi_types.UUID `form:"albumId,omitempty" json:"albumId,omitempty"`
	IsFavorite   *bool               `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed    *bool               `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Key          *string             `form:"key,omitempty" json:"key,omitempty"`
	Order        *AssetOrder         `form:"order,omitempty" json:"order,omitempty"`
	Page         *float32            `form:"page,omitempty" json:"page,omitempty"`
	PageSize     *float32            `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PersonId     *openapi_types.UUID `form:"personId,omitempty" json:"personId,omitempty"`
	TagId        *openapi_types.UUID `form:"tagId,omitempty" json:"tagId,omitempty"`
	TimeBucket   string              `form:"timeBucket" json:"timeBucket"`
	UserId       *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
	Visibility   *AssetVisibility    `form:"visibility,omitempty" json:"visibility,omitempty"`
	WithPartners *bool               `form:"withPartners,omitempty" json:"withPartners,omitempty"`
	WithStacked  *bool               `form:"withStacked,omitempty" json:"withStacked,omitempty"`
}

// GetTimeBucketsParams defines parameters for GetTimeBuckets.
type GetTimeBucketsParams struct {
	AlbumId      *openapi_types.UUID `form:"albumId,omitempty" json:"albumId,omitempty"`
	IsFavorite   *bool               `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed    *bool               `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Key          *string             `form:"key,omitempty" json:"key,omitempty"`
	Order        *AssetOrder         `form:"order,omitempty" json:"order,omitempty"`
	PersonId     *openapi_types.UUID `form:"personId,omitempty" json:"personId,omitempty"`
	TagId        *openapi_types.UUID `form:"tagId,omitempty" json:"tagId,omitempty"`
	UserId       *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
	Visibility   *AssetVisibility    `form:"visibility,omitempty" json:"visibility,omitempty"`
	WithPartners *bool               `form:"withPartners,omitempty" json:"withPartners,omitempty"`
	WithStacked  *bool               `form:"withStacked,omitempty" json:"withStacked,omitempty"`
}

// GetAssetsByOriginalPathParams defines parameters for GetAssetsByOriginalPath.
type GetAssetsByOriginalPathParams struct {
	Path string `form:"path" json:"path"`
}

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = ActivityCreateDto

// CreateNotificationJSONRequestBody defines body for CreateNotification for application/json ContentType.
type CreateNotificationJSONRequestBody = NotificationCreateDto

// GetNotificationTemplateAdminJSONRequestBody defines body for GetNotificationTemplateAdmin for application/json ContentType.
type GetNotificationTemplateAdminJSONRequestBody = TemplateDto

// SendTestEmailAdminJSONRequestBody defines body for SendTestEmailAdmin for application/json ContentType.
type SendTestEmailAdminJSONRequestBody = SystemConfigSmtpDto

// CreateUserAdminJSONRequestBody defines body for CreateUserAdmin for application/json ContentType.
type CreateUserAdminJSONRequestBody = UserAdminCreateDto

// DeleteUserAdminJSONRequestBody defines body for DeleteUserAdmin for application/json ContentType.
type DeleteUserAdminJSONRequestBody = UserAdminDeleteDto

// UpdateUserAdminJSONRequestBody defines body for UpdateUserAdmin for application/json ContentType.
type UpdateUserAdminJSONRequestBody = UserAdminUpdateDto

// UpdateUserPreferencesAdminJSONRequestBody defines body for UpdateUserPreferencesAdmin for application/json ContentType.
type UpdateUserPreferencesAdminJSONRequestBody = UserPreferencesUpdateDto

// CreateAlbumJSONRequestBody defines body for CreateAlbum for application/json ContentType.
type CreateAlbumJSONRequestBody = CreateAlbumDto

// UpdateAlbumInfoJSONRequestBody defines body for UpdateAlbumInfo for application/json ContentType.
type UpdateAlbumInfoJSONRequestBody = UpdateAlbumDto

// RemoveAssetFromAlbumJSONRequestBody defines body for RemoveAssetFromAlbum for application/json ContentType.
type RemoveAssetFromAlbumJSONRequestBody = BulkIdsDto

// AddAssetsToAlbumJSONRequestBody defines body for AddAssetsToAlbum for application/json ContentType.
type AddAssetsToAlbumJSONRequestBody = BulkIdsDto

// UpdateAlbumUserJSONRequestBody defines body for UpdateAlbumUser for application/json ContentType.
type UpdateAlbumUserJSONRequestBody = UpdateAlbumUserDto

// AddUsersToAlbumJSONRequestBody defines body for AddUsersToAlbum for application/json ContentType.
type AddUsersToAlbumJSONRequestBody = AddUsersDto

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = APIKeyCreateDto

// UpdateApiKeyJSONRequestBody defines body for UpdateApiKey for application/json ContentType.
type UpdateApiKeyJSONRequestBody = APIKeyUpdateDto

// DeleteAssetsJSONRequestBody defines body for DeleteAssets for application/json ContentType.
type DeleteAssetsJSONRequestBody = AssetBulkDeleteDto

// UploadAssetMultipartRequestBody defines body for UploadAsset for multipart/form-data ContentType.
type UploadAssetMultipartRequestBody = AssetMediaCreateDto

// UpdateAssetsJSONRequestBody defines body for UpdateAssets for application/json ContentType.
type UpdateAssetsJSONRequestBody = AssetBulkUpdateDto

// CheckBulkUploadJSONRequestBody defines body for CheckBulkUpload for application/json ContentType.
type CheckBulkUploadJSONRequestBody = AssetBulkUploadCheckDto

// CheckExistingAssetsJSONRequestBody defines body for CheckExistingAssets for application/json ContentType.
type CheckExistingAssetsJSONRequestBody = CheckExistingAssetsDto

// RunAssetJobsJSONRequestBody defines body for RunAssetJobs for application/json ContentType.
type RunAssetJobsJSONRequestBody = AssetJobsDto

// UpdateAssetJSONRequestBody defines body for UpdateAsset for application/json ContentType.
type UpdateAssetJSONRequestBody = UpdateAssetDto

// ReplaceAssetMultipartRequestBody defines body for ReplaceAsset for multipart/form-data ContentType.
type ReplaceAssetMultipartRequestBody = AssetMediaReplaceDto

// SignUpAdminJSONRequestBody defines body for SignUpAdmin for application/json ContentType.
type SignUpAdminJSONRequestBody = SignUpDto

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordDto

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginCredentialDto

// ResetPinCodeJSONRequestBody defines body for ResetPinCode for application/json ContentType.
type ResetPinCodeJSONRequestBody = PinCodeResetDto

// SetupPinCodeJSONRequestBody defines body for SetupPinCode for application/json ContentType.
type SetupPinCodeJSONRequestBody = PinCodeSetupDto

// ChangePinCodeJSONRequestBody defines body for ChangePinCode for application/json ContentType.
type ChangePinCodeJSONRequestBody = PinCodeChangeDto

// UnlockAuthSessionJSONRequestBody defines body for UnlockAuthSession for application/json ContentType.
type UnlockAuthSessionJSONRequestBody = SessionUnlockDto

// DownloadArchiveJSONRequestBody defines body for DownloadArchive for application/json ContentType.
type DownloadArchiveJSONRequestBody = AssetIdsDto

// GetDownloadInfoJSONRequestBody defines body for GetDownloadInfo for application/json ContentType.
type GetDownloadInfoJSONRequestBody = DownloadInfoDto

// CreateFaceJSONRequestBody defines body for CreateFace for application/json ContentType.
type CreateFaceJSONRequestBody = AssetFaceCreateDto

// DeleteFaceJSONRequestBody defines body for DeleteFace for application/json ContentType.
type DeleteFaceJSONRequestBody = AssetFaceDeleteDto

// ReassignFacesByIdJSONRequestBody defines body for ReassignFacesById for application/json ContentType.
type ReassignFacesByIdJSONRequestBody = FaceDto

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = JobCreateDto

// SendJobCommandJSONRequestBody defines body for SendJobCommand for application/json ContentType.
type SendJobCommandJSONRequestBody = JobCommandDto

// CreateLibraryJSONRequestBody defines body for CreateLibrary for application/json ContentType.
type CreateLibraryJSONRequestBody = CreateLibraryDto

// UpdateLibraryJSONRequestBody defines body for UpdateLibrary for application/json ContentType.
type UpdateLibraryJSONRequestBody = UpdateLibraryDto

// ValidateJSONRequestBody defines body for Validate for application/json ContentType.
type ValidateJSONRequestBody = ValidateLibraryDto

// CreateMemoryJSONRequestBody defines body for CreateMemory for application/json ContentType.
type CreateMemoryJSONRequestBody = MemoryCreateDto

// UpdateMemoryJSONRequestBody defines body for UpdateMemory for application/json ContentType.
type UpdateMemoryJSONRequestBody = MemoryUpdateDto

// RemoveMemoryAssetsJSONRequestBody defines body for RemoveMemoryAssets for application/json ContentType.
type RemoveMemoryAssetsJSONRequestBody = BulkIdsDto

// AddMemoryAssetsJSONRequestBody defines body for AddMemoryAssets for application/json ContentType.
type AddMemoryAssetsJSONRequestBody = BulkIdsDto

// DeleteNotificationsJSONRequestBody defines body for DeleteNotifications for application/json ContentType.
type DeleteNotificationsJSONRequestBody = NotificationDeleteAllDto

// UpdateNotificationsJSONRequestBody defines body for UpdateNotifications for application/json ContentType.
type UpdateNotificationsJSONRequestBody = NotificationUpdateAllDto

// UpdateNotificationJSONRequestBody defines body for UpdateNotification for application/json ContentType.
type UpdateNotificationJSONRequestBody = NotificationUpdateDto

// StartOAuthJSONRequestBody defines body for StartOAuth for application/json ContentType.
type StartOAuthJSONRequestBody = OAuthConfigDto

// FinishOAuthJSONRequestBody defines body for FinishOAuth for application/json ContentType.
type FinishOAuthJSONRequestBody = OAuthCallbackDto

// LinkOAuthAccountJSONRequestBody defines body for LinkOAuthAccount for application/json ContentType.
type LinkOAuthAccountJSONRequestBody = OAuthCallbackDto

// UpdatePartnerJSONRequestBody defines body for UpdatePartner for application/json ContentType.
type UpdatePartnerJSONRequestBody = UpdatePartnerDto

// CreatePersonJSONRequestBody defines body for CreatePerson for application/json ContentType.
type CreatePersonJSONRequestBody = PersonCreateDto

// UpdatePeopleJSONRequestBody defines body for UpdatePeople for application/json ContentType.
type UpdatePeopleJSONRequestBody = PeopleUpdateDto

// UpdatePersonJSONRequestBody defines body for UpdatePerson for application/json ContentType.
type UpdatePersonJSONRequestBody = PersonUpdateDto

// MergePersonJSONRequestBody defines body for MergePerson for application/json ContentType.
type MergePersonJSONRequestBody = MergePersonDto

// ReassignFacesJSONRequestBody defines body for ReassignFaces for application/json ContentType.
type ReassignFacesJSONRequestBody = AssetFaceUpdateDto

// SearchAssetsJSONRequestBody defines body for SearchAssets for application/json ContentType.
type SearchAssetsJSONRequestBody = MetadataSearchDto

// SearchRandomJSONRequestBody defines body for SearchRandom for application/json ContentType.
type SearchRandomJSONRequestBody = RandomSearchDto

// SearchSmartJSONRequestBody defines body for SearchSmart for application/json ContentType.
type SearchSmartJSONRequestBody = SmartSearchDto

// SetServerLicenseJSONRequestBody defines body for SetServerLicense for application/json ContentType.
type SetServerLicenseJSONRequestBody = LicenseKeyDto

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = SessionCreateDto

// CreateSharedLinkJSONRequestBody defines body for CreateSharedLink for application/json ContentType.
type CreateSharedLinkJSONRequestBody = SharedLinkCreateDto

// UpdateSharedLinkJSONRequestBody defines body for UpdateSharedLink for application/json ContentType.
type UpdateSharedLinkJSONRequestBody = SharedLinkEditDto

// RemoveSharedLinkAssetsJSONRequestBody defines body for RemoveSharedLinkAssets for application/json ContentType.
type RemoveSharedLinkAssetsJSONRequestBody = AssetIdsDto

// AddSharedLinkAssetsJSONRequestBody defines body for AddSharedLinkAssets for application/json ContentType.
type AddSharedLinkAssetsJSONRequestBody = AssetIdsDto

// DeleteStacksJSONRequestBody defines body for DeleteStacks for application/json ContentType.
type DeleteStacksJSONRequestBody = BulkIdsDto

// CreateStackJSONRequestBody defines body for CreateStack for application/json ContentType.
type CreateStackJSONRequestBody = StackCreateDto

// UpdateStackJSONRequestBody defines body for UpdateStack for application/json ContentType.
type UpdateStackJSONRequestBody = StackUpdateDto

// DeleteSyncAckJSONRequestBody defines body for DeleteSyncAck for application/json ContentType.
type DeleteSyncAckJSONRequestBody = SyncAckDeleteDto

// SendSyncAckJSONRequestBody defines body for SendSyncAck for application/json ContentType.
type SendSyncAckJSONRequestBody = SyncAckSetDto

// GetDeltaSyncJSONRequestBody defines body for GetDeltaSync for application/json ContentType.
type GetDeltaSyncJSONRequestBody = AssetDeltaSyncDto

// GetFullSyncForUserJSONRequestBody defines body for GetFullSyncForUser for application/json ContentType.
type GetFullSyncForUserJSONRequestBody = AssetFullSyncDto

// GetSyncStreamJSONRequestBody defines body for GetSyncStream for application/json ContentType.
type GetSyncStreamJSONRequestBody = SyncStreamDto

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = SystemConfigDto

// UpdateAdminOnboardingJSONRequestBody defines body for UpdateAdminOnboarding for application/json ContentType.
type UpdateAdminOnboardingJSONRequestBody = AdminOnboardingUpdateDto

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = TagCreateDto

// UpsertTagsJSONRequestBody defines body for UpsertTags for application/json ContentType.
type UpsertTagsJSONRequestBody = TagUpsertDto

// BulkTagAssetsJSONRequestBody defines body for BulkTagAssets for application/json ContentType.
type BulkTagAssetsJSONRequestBody = TagBulkAssetsDto

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = TagUpdateDto

// UntagAssetsJSONRequestBody defines body for UntagAssets for application/json ContentType.
type UntagAssetsJSONRequestBody = BulkIdsDto

// TagAssetsJSONRequestBody defines body for TagAssets for application/json ContentType.
type TagAssetsJSONRequestBody = BulkIdsDto

// RestoreAssetsJSONRequestBody defines body for RestoreAssets for application/json ContentType.
type RestoreAssetsJSONRequestBody = BulkIdsDto

// UpdateMyUserJSONRequestBody defines body for UpdateMyUser for application/json ContentType.
type UpdateMyUserJSONRequestBody = UserUpdateMeDto

// SetUserLicenseJSONRequestBody defines body for SetUserLicense for application/json ContentType.
type SetUserLicenseJSONRequestBody = LicenseKeyDto

// UpdateMyPreferencesJSONRequestBody defines body for UpdateMyPreferences for application/json ContentType.
type UpdateMyPreferencesJSONRequestBody = UserPreferencesUpdateDto

// CreateProfileImageMultipartRequestBody defines body for CreateProfileImage for multipart/form-data ContentType.
type CreateProfileImageMultipartRequestBody = CreateProfileImageDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetActivities request
	GetActivities(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateActivityWithBody request with any body
	CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityStatistics request
	GetActivityStatistics(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActivity request
	DeleteActivity(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNotificationWithBody request with any body
	CreateNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNotification(ctx context.Context, body CreateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationTemplateAdminWithBody request with any body
	GetNotificationTemplateAdminWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNotificationTemplateAdmin(ctx context.Context, name string, body GetNotificationTemplateAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendTestEmailAdminWithBody request with any body
	SendTestEmailAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendTestEmailAdmin(ctx context.Context, body SendTestEmailAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsersAdmin request
	SearchUsersAdmin(ctx context.Context, params *SearchUsersAdminParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserAdminWithBody request with any body
	CreateUserAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserAdmin(ctx context.Context, body CreateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserAdminWithBody request with any body
	DeleteUserAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserAdmin(ctx context.Context, id openapi_types.UUID, body DeleteUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAdmin request
	GetUserAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserAdminWithBody request with any body
	UpdateUserAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserAdmin(ctx context.Context, id openapi_types.UUID, body UpdateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPreferencesAdmin request
	GetUserPreferencesAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserPreferencesAdminWithBody request with any body
	UpdateUserPreferencesAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserPreferencesAdmin(ctx context.Context, id openapi_types.UUID, body UpdateUserPreferencesAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreUserAdmin request
	RestoreUserAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserStatisticsAdmin request
	GetUserStatisticsAdmin(ctx context.Context, id openapi_types.UUID, params *GetUserStatisticsAdminParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAlbums request
	GetAllAlbums(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlbumWithBody request with any body
	CreateAlbumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlbum(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumStatistics request
	GetAlbumStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlbum request
	DeleteAlbum(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumInfo request
	GetAlbumInfo(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlbumInfoWithBody request with any body
	UpdateAlbumInfoWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlbumInfo(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAssetFromAlbumWithBody request with any body
	RemoveAssetFromAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveAssetFromAlbum(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAssetsToAlbumWithBody request with any body
	AddAssetsToAlbumWithBody(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAssetsToAlbum(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromAlbum request
	RemoveUserFromAlbum(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlbumUserWithBody request with any body
	UpdateAlbumUserWithBody(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlbumUser(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUsersToAlbumWithBody request with any body
	AddUsersToAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUsersToAlbum(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeys request
	GetApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyWithBody request with any body
	CreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKey(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKey request
	DeleteApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiKeyWithBody request with any body
	UpdateApiKeyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiKey(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssetsWithBody request with any body
	DeleteAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAssets(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadAssetWithBody request with any body
	UploadAssetWithBody(ctx context.Context, params *UploadAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAssetsWithBody request with any body
	UpdateAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAssets(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckBulkUploadWithBody request with any body
	CheckBulkUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckBulkUpload(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUserAssetsByDeviceId request
	GetAllUserAssetsByDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckExistingAssetsWithBody request with any body
	CheckExistingAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckExistingAssets(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunAssetJobsWithBody request with any body
	RunAssetJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunAssetJobs(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandom request
	GetRandom(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetStatistics request
	GetAssetStatistics(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetInfo request
	GetAssetInfo(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAssetWithBody request with any body
	UpdateAssetWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAsset(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadAsset request
	DownloadAsset(ctx context.Context, id openapi_types.UUID, params *DownloadAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceAssetWithBody request with any body
	ReplaceAssetWithBody(ctx context.Context, id openapi_types.UUID, params *ReplaceAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewAsset request
	ViewAsset(ctx context.Context, id openapi_types.UUID, params *ViewAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlayAssetVideo request
	PlayAssetVideo(ctx context.Context, id openapi_types.UUID, params *PlayAssetVideoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignUpAdminWithBody request with any body
	SignUpAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignUpAdmin(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordWithBody request with any body
	ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetPinCodeWithBody request with any body
	ResetPinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetPinCode(ctx context.Context, body ResetPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupPinCodeWithBody request with any body
	SetupPinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupPinCode(ctx context.Context, body SetupPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePinCodeWithBody request with any body
	ChangePinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePinCode(ctx context.Context, body ChangePinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LockAuthSession request
	LockAuthSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnlockAuthSessionWithBody request with any body
	UnlockAuthSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnlockAuthSession(ctx context.Context, body UnlockAuthSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthStatus request
	GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateAccessToken request
	ValidateAccessToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadArchiveWithBody request with any body
	DownloadArchiveWithBody(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DownloadArchive(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDownloadInfoWithBody request with any body
	GetDownloadInfoWithBody(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDownloadInfo(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetDuplicates request
	GetAssetDuplicates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaces request
	GetFaces(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFaceWithBody request with any body
	CreateFaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFace(ctx context.Context, body CreateFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFaceWithBody request with any body
	DeleteFaceWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFace(ctx context.Context, id openapi_types.UUID, body DeleteFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReassignFacesByIdWithBody request with any body
	ReassignFacesByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReassignFacesById(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllJobsStatus request
	GetAllJobsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJobWithBody request with any body
	CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendJobCommandWithBody request with any body
	SendJobCommandWithBody(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendJobCommand(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLibraries request
	GetAllLibraries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLibraryWithBody request with any body
	CreateLibraryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLibrary(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLibrary request
	DeleteLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibrary request
	GetLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLibraryWithBody request with any body
	UpdateLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLibrary(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScanLibrary request
	ScanLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibraryStatistics request
	GetLibraryStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateWithBody request with any body
	ValidateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Validate(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapMarkers request
	GetMapMarkers(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReverseGeocode request
	ReverseGeocode(ctx context.Context, params *ReverseGeocodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMemories request
	SearchMemories(ctx context.Context, params *SearchMemoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMemoryWithBody request with any body
	CreateMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMemory(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMemory request
	DeleteMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemory request
	GetMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMemoryWithBody request with any body
	UpdateMemoryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMemory(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMemoryAssetsWithBody request with any body
	RemoveMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMemoryAssets(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMemoryAssetsWithBody request with any body
	AddMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMemoryAssets(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsWithBody request with any body
	DeleteNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteNotifications(ctx context.Context, body DeleteNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotifications request
	GetNotifications(ctx context.Context, params *GetNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNotificationsWithBody request with any body
	UpdateNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNotifications(ctx context.Context, body UpdateNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotification request
	DeleteNotification(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotification request
	GetNotification(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNotificationWithBody request with any body
	UpdateNotificationWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNotification(ctx context.Context, id openapi_types.UUID, body UpdateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartOAuthWithBody request with any body
	StartOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartOAuth(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinishOAuthWithBody request with any body
	FinishOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FinishOAuth(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkOAuthAccountWithBody request with any body
	LinkOAuthAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LinkOAuthAccount(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedirectOAuthToMobile request
	RedirectOAuthToMobile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnlinkOAuthAccount request
	UnlinkOAuthAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartners request
	GetPartners(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovePartner request
	RemovePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePartner request
	CreatePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePartnerWithBody request with any body
	UpdatePartnerWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePartner(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPeople request
	GetAllPeople(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePersonWithBody request with any body
	CreatePersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePerson(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePeopleWithBody request with any body
	UpdatePeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePeople(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerson request
	GetPerson(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePersonWithBody request with any body
	UpdatePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePerson(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MergePersonWithBody request with any body
	MergePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MergePerson(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReassignFacesWithBody request with any body
	ReassignFacesWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReassignFaces(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonStatistics request
	GetPersonStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonThumbnail request
	GetPersonThumbnail(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsByCity request
	GetAssetsByCity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExploreData request
	GetExploreData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchAssetsWithBody request with any body
	SearchAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchAssets(ctx context.Context, body SearchAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPerson request
	SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPlaces request
	SearchPlaces(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchRandomWithBody request with any body
	SearchRandomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchRandom(ctx context.Context, body SearchRandomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSmartWithBody request with any body
	SearchSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchSmart(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSuggestions request
	GetSearchSuggestions(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAboutInfo request
	GetAboutInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerConfig request
	GetServerConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerFeatures request
	GetServerFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServerLicense request
	DeleteServerLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerLicense request
	GetServerLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetServerLicenseWithBody request with any body
	SetServerLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetServerLicense(ctx context.Context, body SetServerLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportedMediaTypes request
	GetSupportedMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingServer request
	PingServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerStatistics request
	GetServerStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorage request
	GetStorage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTheme request
	GetTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerVersion request
	GetServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersionHistory request
	GetVersionHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllSessions request
	DeleteAllSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessions request
	GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSessionWithBody request with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LockSession request
	LockSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSharedLinks request
	GetAllSharedLinks(ctx context.Context, params *GetAllSharedLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSharedLinkWithBody request with any body
	CreateSharedLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSharedLink(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMySharedLink request
	GetMySharedLink(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSharedLink request
	RemoveSharedLink(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedLinkById request
	GetSharedLinkById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSharedLinkWithBody request with any body
	UpdateSharedLinkWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSharedLink(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSharedLinkAssetsWithBody request with any body
	RemoveSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSharedLinkAssetsWithBody request with any body
	AddSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStacksWithBody request with any body
	DeleteStacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteStacks(ctx context.Context, body DeleteStacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchStacks request
	SearchStacks(ctx context.Context, params *SearchStacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStackWithBody request with any body
	CreateStackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStack(ctx context.Context, body CreateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStack request
	DeleteStack(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStack request
	GetStack(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStackWithBody request with any body
	UpdateStackWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStack(ctx context.Context, id openapi_types.UUID, body UpdateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSyncAckWithBody request with any body
	DeleteSyncAckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSyncAck(ctx context.Context, body DeleteSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncAck request
	GetSyncAck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendSyncAckWithBody request with any body
	SendSyncAckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendSyncAck(ctx context.Context, body SendSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeltaSyncWithBody request with any body
	GetDeltaSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDeltaSync(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFullSyncForUserWithBody request with any body
	GetFullSyncForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFullSyncForUser(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncStreamWithBody request with any body
	GetSyncStreamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSyncStream(ctx context.Context, body GetSyncStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConfigWithBody request with any body
	UpdateConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConfig(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigDefaults request
	GetConfigDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageTemplateOptions request
	GetStorageTemplateOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminOnboarding request
	GetAdminOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAdminOnboardingWithBody request with any body
	UpdateAdminOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAdminOnboarding(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReverseGeocodingState request
	GetReverseGeocodingState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTags request
	GetAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagWithBody request with any body
	CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertTagsWithBody request with any body
	UpsertTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertTags(ctx context.Context, body UpsertTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkTagAssetsWithBody request with any body
	BulkTagAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkTagAssets(ctx context.Context, body BulkTagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagById request
	GetTagById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagWithBody request with any body
	UpdateTagWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTag(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UntagAssetsWithBody request with any body
	UntagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UntagAssets(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagAssetsWithBody request with any body
	TagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagAssets(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeBucket request
	GetTimeBucket(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeBuckets request
	GetTimeBuckets(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmptyTrash request
	EmptyTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreTrash request
	RestoreTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreAssetsWithBody request with any body
	RestoreAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestoreAssets(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsers request
	SearchUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyUser request
	GetMyUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMyUserWithBody request with any body
	UpdateMyUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMyUser(ctx context.Context, body UpdateMyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserLicense request
	DeleteUserLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserLicense request
	GetUserLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUserLicenseWithBody request with any body
	SetUserLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUserLicense(ctx context.Context, body SetUserLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyPreferences request
	GetMyPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMyPreferencesWithBody request with any body
	UpdateMyPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMyPreferences(ctx context.Context, body UpdateMyPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProfileImage request
	DeleteProfileImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProfileImageWithBody request with any body
	CreateProfileImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileImage request
	GetProfileImage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsByOriginalPath request
	GetAssetsByOriginalPath(ctx context.Context, params *GetAssetsByOriginalPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniqueOriginalPaths request
	GetUniqueOriginalPaths(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetActivities(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityStatistics(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActivity(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActivityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotification(ctx context.Context, body CreateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationTemplateAdminWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationTemplateAdminRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationTemplateAdmin(ctx context.Context, name string, body GetNotificationTemplateAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationTemplateAdminRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendTestEmailAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendTestEmailAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendTestEmailAdmin(ctx context.Context, body SendTestEmailAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendTestEmailAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsersAdmin(ctx context.Context, params *SearchUsersAdminParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsersAdminRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserAdmin(ctx context.Context, body CreateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserAdmin(ctx context.Context, id openapi_types.UUID, body DeleteUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserAdmin(ctx context.Context, id openapi_types.UUID, body UpdateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPreferencesAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPreferencesAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPreferencesAdminWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPreferencesAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPreferencesAdmin(ctx context.Context, id openapi_types.UUID, body UpdateUserPreferencesAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPreferencesAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreUserAdmin(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreUserAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserStatisticsAdmin(ctx context.Context, id openapi_types.UUID, params *GetUserStatisticsAdminParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserStatisticsAdminRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAlbums(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAlbumsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlbumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlbumRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlbum(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlbumRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumStatisticsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlbum(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlbumRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumInfo(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumInfoWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumInfo(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssetFromAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssetFromAlbumRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssetFromAlbum(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssetFromAlbumRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAssetsToAlbumWithBody(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAssetsToAlbumRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAssetsToAlbum(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAssetsToAlbumRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromAlbum(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromAlbumRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumUserWithBody(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumUserRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumUser(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumUserRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToAlbumRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToAlbum(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToAlbumRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKey(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKeyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKey(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssets(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadAssetWithBody(ctx context.Context, params *UploadAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadAssetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssets(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckBulkUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckBulkUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckBulkUpload(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckBulkUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUserAssetsByDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUserAssetsByDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckExistingAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckExistingAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckExistingAssets(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckExistingAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunAssetJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunAssetJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunAssetJobs(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunAssetJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandom(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetStatistics(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetInfo(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssetWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAsset(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadAsset(ctx context.Context, id openapi_types.UUID, params *DownloadAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadAssetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceAssetWithBody(ctx context.Context, id openapi_types.UUID, params *ReplaceAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceAssetRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewAsset(ctx context.Context, id openapi_types.UUID, params *ViewAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewAssetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlayAssetVideo(ctx context.Context, id openapi_types.UUID, params *PlayAssetVideoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayAssetVideoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignUpAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignUpAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignUpAdmin(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignUpAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPinCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPinCode(ctx context.Context, body ResetPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPinCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupPinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupPinCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupPinCode(ctx context.Context, body SetupPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupPinCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePinCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePinCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePinCode(ctx context.Context, body ChangePinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePinCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockAuthSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockAuthSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlockAuthSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlockAuthSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlockAuthSession(ctx context.Context, body UnlockAuthSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlockAuthSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateAccessToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateAccessTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadArchiveWithBody(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadArchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadArchive(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadArchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadInfoWithBody(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadInfoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadInfo(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadInfoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetDuplicates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetDuplicatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaces(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFace(ctx context.Context, body CreateFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFaceWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFaceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFace(ctx context.Context, id openapi_types.UUID, body DeleteFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFaceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesByIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesById(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesByIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllJobsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllJobsStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobCommandWithBody(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobCommandRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobCommand(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobCommandRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLibraries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLibrariesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLibraryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLibraryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLibrary(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLibraryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLibraryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLibraryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLibrary(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLibraryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScanLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanLibraryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibraryStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryStatisticsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Validate(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapMarkers(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMarkersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseGeocode(ctx context.Context, params *ReverseGeocodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseGeocodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMemories(ctx context.Context, params *SearchMemoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMemoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemory(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemoryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemory(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemoryAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMemoryAssets(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemoryAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemoryAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMemoryAssets(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemoryAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotifications(ctx context.Context, body DeleteNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotifications(ctx context.Context, params *GetNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotifications(ctx context.Context, body UpdateNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotification(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotification(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotification(ctx context.Context, id openapi_types.UUID, body UpdateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOAuth(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishOAuth(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkOAuthAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkOAuthAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkOAuthAccount(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkOAuthAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedirectOAuthToMobile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedirectOAuthToMobileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlinkOAuthAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlinkOAuthAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartners(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartnerWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartner(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPeople(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPeopleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePerson(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePeopleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePeople(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePeopleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerson(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePersonRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePerson(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePersonRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergePersonRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergePerson(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergePersonRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFaces(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonStatisticsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonThumbnail(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonThumbnailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsByCity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsByCityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExploreData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExploreDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAssets(ctx context.Context, body SearchAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPersonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPlaces(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPlacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchRandomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRandomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchRandom(ctx context.Context, body SearchRandomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRandomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSmartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSmart(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSmartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSuggestions(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSuggestionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAboutInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAboutInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServerLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServerLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerLicenseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerLicense(ctx context.Context, body SetServerLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerLicenseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportedMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportedMediaTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerStatisticsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThemeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersionHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionHistoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSharedLinks(ctx context.Context, params *GetAllSharedLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSharedLinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSharedLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSharedLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSharedLink(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSharedLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMySharedLink(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMySharedLinkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLink(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedLinkById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedLinkByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSharedLinkWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSharedLinkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSharedLink(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSharedLinkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkAssetsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkAssetsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSharedLinkAssetsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSharedLinkAssetsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStacks(ctx context.Context, body DeleteStacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchStacks(ctx context.Context, params *SearchStacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchStacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStack(ctx context.Context, body CreateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStack(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStackRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStack(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStackRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStackWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStack(ctx context.Context, id openapi_types.UUID, body UpdateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStackRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSyncAckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSyncAckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSyncAck(ctx context.Context, body DeleteSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSyncAckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncAck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncAckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendSyncAckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendSyncAckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendSyncAck(ctx context.Context, body SendSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendSyncAckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeltaSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeltaSync(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaSyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFullSyncForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFullSyncForUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFullSyncForUser(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFullSyncForUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncStreamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncStreamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncStream(ctx context.Context, body GetSyncStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncStreamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfig(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigDefaultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageTemplateOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageTemplateOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminOnboardingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminOnboardingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminOnboarding(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminOnboardingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReverseGeocodingState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReverseGeocodingStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertTags(ctx context.Context, body UpsertTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkTagAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkTagAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkTagAssets(ctx context.Context, body BulkTagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkTagAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTag(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UntagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUntagAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UntagAssets(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUntagAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagAssets(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeBucket(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeBucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeBuckets(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeBucketsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmptyTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmptyTrashRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreTrashRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreAssets(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyUser(ctx context.Context, body UpdateMyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserLicenseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserLicense(ctx context.Context, body SetUserLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserLicenseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyPreferencesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyPreferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyPreferences(ctx context.Context, body UpdateMyPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyPreferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProfileImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProfileImageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfileImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileImage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileImageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsByOriginalPath(ctx context.Context, params *GetAssetsByOriginalPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsByOriginalPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniqueOriginalPaths(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniqueOriginalPathsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetActivitiesRequest generates requests for GetActivities
func NewGetActivitiesRequest(server string, params *GetActivitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, params.AlbumId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateActivityRequest calls the generic CreateActivity builder with application/json body
func NewCreateActivityRequest(server string, body CreateActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateActivityRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateActivityRequestWithBody generates requests for CreateActivity with any type of body
func NewCreateActivityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivityStatisticsRequest generates requests for GetActivityStatistics
func NewGetActivityStatisticsRequest(server string, params *GetActivityStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, params.AlbumId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteActivityRequest generates requests for DeleteActivity
func NewDeleteActivityRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNotificationRequest calls the generic CreateNotification builder with application/json body
func NewCreateNotificationRequest(server string, body CreateNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNotificationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNotificationRequestWithBody generates requests for CreateNotification with any type of body
func NewCreateNotificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNotificationTemplateAdminRequest calls the generic GetNotificationTemplateAdmin builder with application/json body
func NewGetNotificationTemplateAdminRequest(server string, name string, body GetNotificationTemplateAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNotificationTemplateAdminRequestWithBody(server, name, "application/json", bodyReader)
}

// NewGetNotificationTemplateAdminRequestWithBody generates requests for GetNotificationTemplateAdmin with any type of body
func NewGetNotificationTemplateAdminRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/notifications/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendTestEmailAdminRequest calls the generic SendTestEmailAdmin builder with application/json body
func NewSendTestEmailAdminRequest(server string, body SendTestEmailAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendTestEmailAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewSendTestEmailAdminRequestWithBody generates requests for SendTestEmailAdmin with any type of body
func NewSendTestEmailAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/notifications/test-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchUsersAdminRequest generates requests for SearchUsersAdmin
func NewSearchUsersAdminRequest(server string, params *SearchUsersAdminParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDeleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserAdminRequest calls the generic CreateUserAdmin builder with application/json body
func NewCreateUserAdminRequest(server string, body CreateUserAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserAdminRequestWithBody generates requests for CreateUserAdmin with any type of body
func NewCreateUserAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserAdminRequest calls the generic DeleteUserAdmin builder with application/json body
func NewDeleteUserAdminRequest(server string, id openapi_types.UUID, body DeleteUserAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteUserAdminRequestWithBody generates requests for DeleteUserAdmin with any type of body
func NewDeleteUserAdminRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserAdminRequest generates requests for GetUserAdmin
func NewGetUserAdminRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserAdminRequest calls the generic UpdateUserAdmin builder with application/json body
func NewUpdateUserAdminRequest(server string, id openapi_types.UUID, body UpdateUserAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserAdminRequestWithBody generates requests for UpdateUserAdmin with any type of body
func NewUpdateUserAdminRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPreferencesAdminRequest generates requests for GetUserPreferencesAdmin
func NewGetUserPreferencesAdminRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/preferences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserPreferencesAdminRequest calls the generic UpdateUserPreferencesAdmin builder with application/json body
func NewUpdateUserPreferencesAdminRequest(server string, id openapi_types.UUID, body UpdateUserPreferencesAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserPreferencesAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserPreferencesAdminRequestWithBody generates requests for UpdateUserPreferencesAdmin with any type of body
func NewUpdateUserPreferencesAdminRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/preferences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestoreUserAdminRequest generates requests for RestoreUserAdmin
func NewRestoreUserAdminRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserStatisticsAdminRequest generates requests for GetUserStatisticsAdmin
func NewGetUserStatisticsAdminRequest(server string, id openapi_types.UUID, params *GetUserStatisticsAdminParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllAlbumsRequest generates requests for GetAllAlbums
func NewGetAllAlbumsRequest(server string, params *GetAllAlbumsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shared != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shared", runtime.ParamLocationQuery, *params.Shared); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlbumRequest calls the generic CreateAlbum builder with application/json body
func NewCreateAlbumRequest(server string, body CreateAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlbumRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAlbumRequestWithBody generates requests for CreateAlbum with any type of body
func NewCreateAlbumRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlbumStatisticsRequest generates requests for GetAlbumStatistics
func NewGetAlbumStatisticsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAlbumRequest generates requests for DeleteAlbum
func NewDeleteAlbumRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumInfoRequest generates requests for GetAlbumInfo
func NewGetAlbumInfoRequest(server string, id openapi_types.UUID, params *GetAlbumInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutAssets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withoutAssets", runtime.ParamLocationQuery, *params.WithoutAssets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlbumInfoRequest calls the generic UpdateAlbumInfo builder with application/json body
func NewUpdateAlbumInfoRequest(server string, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlbumInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAlbumInfoRequestWithBody generates requests for UpdateAlbumInfo with any type of body
func NewUpdateAlbumInfoRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAssetFromAlbumRequest calls the generic RemoveAssetFromAlbum builder with application/json body
func NewRemoveAssetFromAlbumRequest(server string, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveAssetFromAlbumRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRemoveAssetFromAlbumRequestWithBody generates requests for RemoveAssetFromAlbum with any type of body
func NewRemoveAssetFromAlbumRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddAssetsToAlbumRequest calls the generic AddAssetsToAlbum builder with application/json body
func NewAddAssetsToAlbumRequest(server string, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAssetsToAlbumRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddAssetsToAlbumRequestWithBody generates requests for AddAssetsToAlbum with any type of body
func NewAddAssetsToAlbumRequestWithBody(server string, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserFromAlbumRequest generates requests for RemoveUserFromAlbum
func NewRemoveUserFromAlbumRequest(server string, id openapi_types.UUID, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlbumUserRequest calls the generic UpdateAlbumUser builder with application/json body
func NewUpdateAlbumUserRequest(server string, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlbumUserRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewUpdateAlbumUserRequestWithBody generates requests for UpdateAlbumUser with any type of body
func NewUpdateAlbumUserRequestWithBody(server string, id openapi_types.UUID, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUsersToAlbumRequest calls the generic AddUsersToAlbum builder with application/json body
func NewAddUsersToAlbumRequest(server string, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUsersToAlbumRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddUsersToAlbumRequestWithBody generates requests for AddUsersToAlbum with any type of body
func NewAddUsersToAlbumRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiKeysRequest generates requests for GetApiKeys
func NewGetApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyRequest calls the generic CreateApiKey builder with application/json body
func NewCreateApiKeyRequest(server string, body CreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApiKeyRequestWithBody generates requests for CreateApiKey with any type of body
func NewCreateApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyRequest generates requests for DeleteApiKey
func NewDeleteApiKeyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiKeyRequest calls the generic UpdateApiKey builder with application/json body
func NewUpdateApiKeyRequest(server string, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateApiKeyRequestWithBody generates requests for UpdateApiKey with any type of body
func NewUpdateApiKeyRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssetsRequest calls the generic DeleteAssets builder with application/json body
func NewDeleteAssetsRequest(server string, body DeleteAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAssetsRequestWithBody generates requests for DeleteAssets with any type of body
func NewDeleteAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadAssetRequestWithBody generates requests for UploadAsset with any type of body
func NewUploadAssetRequestWithBody(server string, params *UploadAssetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XImmichChecksum != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-immich-checksum", runtime.ParamLocationHeader, *params.XImmichChecksum)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-immich-checksum", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAssetsRequest calls the generic UpdateAssets builder with application/json body
func NewUpdateAssetsRequest(server string, body UpdateAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAssetsRequestWithBody generates requests for UpdateAssets with any type of body
func NewUpdateAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckBulkUploadRequest calls the generic CheckBulkUpload builder with application/json body
func NewCheckBulkUploadRequest(server string, body CheckBulkUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckBulkUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckBulkUploadRequestWithBody generates requests for CheckBulkUpload with any type of body
func NewCheckBulkUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/bulk-upload-check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllUserAssetsByDeviceIdRequest generates requests for GetAllUserAssetsByDeviceId
func NewGetAllUserAssetsByDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckExistingAssetsRequest calls the generic CheckExistingAssets builder with application/json body
func NewCheckExistingAssetsRequest(server string, body CheckExistingAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckExistingAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckExistingAssetsRequestWithBody generates requests for CheckExistingAssets with any type of body
func NewCheckExistingAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/exist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRunAssetJobsRequest calls the generic RunAssetJobs builder with application/json body
func NewRunAssetJobsRequest(server string, body RunAssetJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunAssetJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewRunAssetJobsRequestWithBody generates requests for RunAssetJobs with any type of body
func NewRunAssetJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRandomRequest generates requests for GetRandom
func NewGetRandomRequest(server string, params *GetRandomParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetStatisticsRequest generates requests for GetAssetStatistics
func NewGetAssetStatisticsRequest(server string, params *GetAssetStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetInfoRequest generates requests for GetAssetInfo
func NewGetAssetInfoRequest(server string, id openapi_types.UUID, params *GetAssetInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAssetRequest calls the generic UpdateAsset builder with application/json body
func NewUpdateAssetRequest(server string, id openapi_types.UUID, body UpdateAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAssetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAssetRequestWithBody generates requests for UpdateAsset with any type of body
func NewUpdateAssetRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadAssetRequest generates requests for DownloadAsset
func NewDownloadAssetRequest(server string, id openapi_types.UUID, params *DownloadAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s/original", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceAssetRequestWithBody generates requests for ReplaceAsset with any type of body
func NewReplaceAssetRequestWithBody(server string, id openapi_types.UUID, params *ReplaceAssetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s/original", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewViewAssetRequest generates requests for ViewAsset
func NewViewAssetRequest(server string, id openapi_types.UUID, params *ViewAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s/thumbnail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayAssetVideoRequest generates requests for PlayAssetVideo
func NewPlayAssetVideoRequest(server string, id openapi_types.UUID, params *PlayAssetVideoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s/video/playback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSignUpAdminRequest calls the generic SignUpAdmin builder with application/json body
func NewSignUpAdminRequest(server string, body SignUpAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignUpAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewSignUpAdminRequestWithBody generates requests for SignUpAdmin with any type of body
func NewSignUpAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/admin-sign-up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangePasswordRequest calls the generic ChangePassword builder with application/json body
func NewChangePasswordRequest(server string, body ChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordRequestWithBody generates requests for ChangePassword with any type of body
func NewChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetPinCodeRequest calls the generic ResetPinCode builder with application/json body
func NewResetPinCodeRequest(server string, body ResetPinCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetPinCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewResetPinCodeRequestWithBody generates requests for ResetPinCode with any type of body
func NewResetPinCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/pin-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupPinCodeRequest calls the generic SetupPinCode builder with application/json body
func NewSetupPinCodeRequest(server string, body SetupPinCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupPinCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupPinCodeRequestWithBody generates requests for SetupPinCode with any type of body
func NewSetupPinCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/pin-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangePinCodeRequest calls the generic ChangePinCode builder with application/json body
func NewChangePinCodeRequest(server string, body ChangePinCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePinCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePinCodeRequestWithBody generates requests for ChangePinCode with any type of body
func NewChangePinCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/pin-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLockAuthSessionRequest generates requests for LockAuthSession
func NewLockAuthSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/session/lock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnlockAuthSessionRequest calls the generic UnlockAuthSession builder with application/json body
func NewUnlockAuthSessionRequest(server string, body UnlockAuthSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnlockAuthSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewUnlockAuthSessionRequestWithBody generates requests for UnlockAuthSession with any type of body
func NewUnlockAuthSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/session/unlock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthStatusRequest generates requests for GetAuthStatus
func NewGetAuthStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateAccessTokenRequest generates requests for ValidateAccessToken
func NewValidateAccessTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/validateToken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadArchiveRequest calls the generic DownloadArchive builder with application/json body
func NewDownloadArchiveRequest(server string, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDownloadArchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDownloadArchiveRequestWithBody generates requests for DownloadArchive with any type of body
func NewDownloadArchiveRequestWithBody(server string, params *DownloadArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDownloadInfoRequest calls the generic GetDownloadInfo builder with application/json body
func NewGetDownloadInfoRequest(server string, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDownloadInfoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetDownloadInfoRequestWithBody generates requests for GetDownloadInfo with any type of body
func NewGetDownloadInfoRequestWithBody(server string, params *GetDownloadInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetDuplicatesRequest generates requests for GetAssetDuplicates
func NewGetAssetDuplicatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/duplicates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFacesRequest generates requests for GetFaces
func NewGetFacesRequest(server string, params *GetFacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFaceRequest calls the generic CreateFace builder with application/json body
func NewCreateFaceRequest(server string, body CreateFaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFaceRequestWithBody generates requests for CreateFace with any type of body
func NewCreateFaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFaceRequest calls the generic DeleteFace builder with application/json body
func NewDeleteFaceRequest(server string, id openapi_types.UUID, body DeleteFaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFaceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteFaceRequestWithBody generates requests for DeleteFace with any type of body
func NewDeleteFaceRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReassignFacesByIdRequest calls the generic ReassignFacesById builder with application/json body
func NewReassignFacesByIdRequest(server string, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReassignFacesByIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReassignFacesByIdRequestWithBody generates requests for ReassignFacesById with any type of body
func NewReassignFacesByIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/faces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllJobsStatusRequest generates requests for GetAllJobsStatus
func NewGetAllJobsStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJobRequest calls the generic CreateJob builder with application/json body
func NewCreateJobRequest(server string, body CreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJobRequestWithBody generates requests for CreateJob with any type of body
func NewCreateJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendJobCommandRequest calls the generic SendJobCommand builder with application/json body
func NewSendJobCommandRequest(server string, id JobName, body SendJobCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendJobCommandRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSendJobCommandRequestWithBody generates requests for SendJobCommand with any type of body
func NewSendJobCommandRequestWithBody(server string, id JobName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLibrariesRequest generates requests for GetAllLibraries
func NewGetAllLibrariesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLibraryRequest calls the generic CreateLibrary builder with application/json body
func NewCreateLibraryRequest(server string, body CreateLibraryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLibraryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLibraryRequestWithBody generates requests for CreateLibrary with any type of body
func NewCreateLibraryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLibraryRequest generates requests for DeleteLibrary
func NewDeleteLibraryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLibraryRequest generates requests for GetLibrary
func NewGetLibraryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLibraryRequest calls the generic UpdateLibrary builder with application/json body
func NewUpdateLibraryRequest(server string, id openapi_types.UUID, body UpdateLibraryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLibraryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateLibraryRequestWithBody generates requests for UpdateLibrary with any type of body
func NewUpdateLibraryRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScanLibraryRequest generates requests for ScanLibrary
func NewScanLibraryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s/scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLibraryStatisticsRequest generates requests for GetLibraryStatistics
func NewGetLibraryStatisticsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateRequest calls the generic Validate builder with application/json body
func NewValidateRequest(server string, id openapi_types.UUID, body ValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewValidateRequestWithBody generates requests for Validate with any type of body
func NewValidateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/libraries/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMapMarkersRequest generates requests for GetMapMarkers
func NewGetMapMarkersRequest(server string, params *GetMapMarkersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/map/markers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FileCreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileCreatedAfter", runtime.ParamLocationQuery, *params.FileCreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileCreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileCreatedBefore", runtime.ParamLocationQuery, *params.FileCreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSharedAlbums != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withSharedAlbums", runtime.ParamLocationQuery, *params.WithSharedAlbums); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReverseGeocodeRequest generates requests for ReverseGeocode
func NewReverseGeocodeRequest(server string, params *ReverseGeocodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/map/reverse-geocode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lon", runtime.ParamLocationQuery, params.Lon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchMemoriesRequest generates requests for SearchMemories
func NewSearchMemoriesRequest(server string, params *SearchMemoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.For != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "for", runtime.ParamLocationQuery, *params.For); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSaved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isSaved", runtime.ParamLocationQuery, *params.IsSaved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMemoryRequest calls the generic CreateMemory builder with application/json body
func NewCreateMemoryRequest(server string, body CreateMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMemoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMemoryRequestWithBody generates requests for CreateMemory with any type of body
func NewCreateMemoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMemoryRequest generates requests for DeleteMemory
func NewDeleteMemoryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemoryRequest generates requests for GetMemory
func NewGetMemoryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMemoryRequest calls the generic UpdateMemory builder with application/json body
func NewUpdateMemoryRequest(server string, id openapi_types.UUID, body UpdateMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMemoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateMemoryRequestWithBody generates requests for UpdateMemory with any type of body
func NewUpdateMemoryRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMemoryAssetsRequest calls the generic RemoveMemoryAssets builder with application/json body
func NewRemoveMemoryAssetsRequest(server string, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMemoryAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRemoveMemoryAssetsRequestWithBody generates requests for RemoveMemoryAssets with any type of body
func NewRemoveMemoryAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMemoryAssetsRequest calls the generic AddMemoryAssets builder with application/json body
func NewAddMemoryAssetsRequest(server string, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMemoryAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddMemoryAssetsRequestWithBody generates requests for AddMemoryAssets with any type of body
func NewAddMemoryAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotificationsRequest calls the generic DeleteNotifications builder with application/json body
func NewDeleteNotificationsRequest(server string, body DeleteNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteNotificationsRequestWithBody generates requests for DeleteNotifications with any type of body
func NewDeleteNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNotificationsRequest generates requests for GetNotifications
func NewGetNotificationsRequest(server string, params *GetNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Unread != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unread", runtime.ParamLocationQuery, *params.Unread); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNotificationsRequest calls the generic UpdateNotifications builder with application/json body
func NewUpdateNotificationsRequest(server string, body UpdateNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateNotificationsRequestWithBody generates requests for UpdateNotifications with any type of body
func NewUpdateNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotificationRequest generates requests for DeleteNotification
func NewDeleteNotificationRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationRequest generates requests for GetNotification
func NewGetNotificationRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNotificationRequest calls the generic UpdateNotification builder with application/json body
func NewUpdateNotificationRequest(server string, id openapi_types.UUID, body UpdateNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNotificationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateNotificationRequestWithBody generates requests for UpdateNotification with any type of body
func NewUpdateNotificationRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartOAuthRequest calls the generic StartOAuth builder with application/json body
func NewStartOAuthRequest(server string, body StartOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewStartOAuthRequestWithBody generates requests for StartOAuth with any type of body
func NewStartOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinishOAuthRequest calls the generic FinishOAuth builder with application/json body
func NewFinishOAuthRequest(server string, body FinishOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinishOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewFinishOAuthRequestWithBody generates requests for FinishOAuth with any type of body
func NewFinishOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLinkOAuthAccountRequest calls the generic LinkOAuthAccount builder with application/json body
func NewLinkOAuthAccountRequest(server string, body LinkOAuthAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLinkOAuthAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewLinkOAuthAccountRequestWithBody generates requests for LinkOAuthAccount with any type of body
func NewLinkOAuthAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRedirectOAuthToMobileRequest generates requests for RedirectOAuthToMobile
func NewRedirectOAuthToMobileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/mobile-redirect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnlinkOAuthAccountRequest generates requests for UnlinkOAuthAccount
func NewUnlinkOAuthAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/unlink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPartnersRequest generates requests for GetPartners
func NewGetPartnersRequest(server string, params *GetPartnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemovePartnerRequest generates requests for RemovePartner
func NewRemovePartnerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePartnerRequest generates requests for CreatePartner
func NewCreatePartnerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePartnerRequest calls the generic UpdatePartner builder with application/json body
func NewUpdatePartnerRequest(server string, id openapi_types.UUID, body UpdatePartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePartnerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePartnerRequestWithBody generates requests for UpdatePartner with any type of body
func NewUpdatePartnerRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllPeopleRequest generates requests for GetAllPeople
func NewGetAllPeopleRequest(server string, params *GetAllPeopleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClosestAssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "closestAssetId", runtime.ParamLocationQuery, *params.ClosestAssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClosestPersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "closestPersonId", runtime.ParamLocationQuery, *params.ClosestPersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withHidden", runtime.ParamLocationQuery, *params.WithHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePersonRequest calls the generic CreatePerson builder with application/json body
func NewCreatePersonRequest(server string, body CreatePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePersonRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePersonRequestWithBody generates requests for CreatePerson with any type of body
func NewCreatePersonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePeopleRequest calls the generic UpdatePeople builder with application/json body
func NewUpdatePeopleRequest(server string, body UpdatePeopleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePeopleRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePeopleRequestWithBody generates requests for UpdatePeople with any type of body
func NewUpdatePeopleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersonRequest generates requests for GetPerson
func NewGetPersonRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePersonRequest calls the generic UpdatePerson builder with application/json body
func NewUpdatePersonRequest(server string, id openapi_types.UUID, body UpdatePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePersonRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePersonRequestWithBody generates requests for UpdatePerson with any type of body
func NewUpdatePersonRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMergePersonRequest calls the generic MergePerson builder with application/json body
func NewMergePersonRequest(server string, id openapi_types.UUID, body MergePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMergePersonRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMergePersonRequestWithBody generates requests for MergePerson with any type of body
func NewMergePersonRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/merge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReassignFacesRequest calls the generic ReassignFaces builder with application/json body
func NewReassignFacesRequest(server string, id openapi_types.UUID, body ReassignFacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReassignFacesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReassignFacesRequestWithBody generates requests for ReassignFaces with any type of body
func NewReassignFacesRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/reassign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersonStatisticsRequest generates requests for GetPersonStatistics
func NewGetPersonStatisticsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersonThumbnailRequest generates requests for GetPersonThumbnail
func NewGetPersonThumbnailRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/thumbnail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetsByCityRequest generates requests for GetAssetsByCity
func NewGetAssetsByCityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/cities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExploreDataRequest generates requests for GetExploreData
func NewGetExploreDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/explore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchAssetsRequest calls the generic SearchAssets builder with application/json body
func NewSearchAssetsRequest(server string, body SearchAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchAssetsRequestWithBody generates requests for SearchAssets with any type of body
func NewSearchAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchPersonRequest generates requests for SearchPerson
func NewSearchPersonRequest(server string, params *SearchPersonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WithHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withHidden", runtime.ParamLocationQuery, *params.WithHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchPlacesRequest generates requests for SearchPlaces
func NewSearchPlacesRequest(server string, params *SearchPlacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchRandomRequest calls the generic SearchRandom builder with application/json body
func NewSearchRandomRequest(server string, body SearchRandomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchRandomRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchRandomRequestWithBody generates requests for SearchRandom with any type of body
func NewSearchRandomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchSmartRequest calls the generic SearchSmart builder with application/json body
func NewSearchSmartRequest(server string, body SearchSmartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchSmartRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchSmartRequestWithBody generates requests for SearchSmart with any type of body
func NewSearchSmartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/smart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchSuggestionsRequest generates requests for GetSearchSuggestions
func NewGetSearchSuggestionsRequest(server string, params *GetSearchSuggestionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/suggestions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeNull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeNull", runtime.ParamLocationQuery, *params.IncludeNull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Make != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "make", runtime.ParamLocationQuery, *params.Make); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Model != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, *params.Model); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAboutInfoRequest generates requests for GetAboutInfo
func NewGetAboutInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/about")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerConfigRequest generates requests for GetServerConfig
func NewGetServerConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerFeaturesRequest generates requests for GetServerFeatures
func NewGetServerFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteServerLicenseRequest generates requests for DeleteServerLicense
func NewDeleteServerLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerLicenseRequest generates requests for GetServerLicense
func NewGetServerLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetServerLicenseRequest calls the generic SetServerLicense builder with application/json body
func NewSetServerLicenseRequest(server string, body SetServerLicenseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetServerLicenseRequestWithBody(server, "application/json", bodyReader)
}

// NewSetServerLicenseRequestWithBody generates requests for SetServerLicense with any type of body
func NewSetServerLicenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSupportedMediaTypesRequest generates requests for GetSupportedMediaTypes
func NewGetSupportedMediaTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/media-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingServerRequest generates requests for PingServer
func NewPingServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerStatisticsRequest generates requests for GetServerStatistics
func NewGetServerStatisticsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageRequest generates requests for GetStorage
func NewGetStorageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThemeRequest generates requests for GetTheme
func NewGetThemeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/theme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerVersionRequest generates requests for GetServerVersion
func NewGetServerVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionHistoryRequest generates requests for GetVersionHistory
func NewGetVersionHistoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/version-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAllSessionsRequest generates requests for DeleteAllSessions
func NewDeleteAllSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsRequest generates requests for GetSessions
func NewGetSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLockSessionRequest generates requests for LockSession
func NewLockSessionRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSharedLinksRequest generates requests for GetAllSharedLinks
func NewGetAllSharedLinksRequest(server string, params *GetAllSharedLinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AlbumId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, *params.AlbumId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSharedLinkRequest calls the generic CreateSharedLink builder with application/json body
func NewCreateSharedLinkRequest(server string, body CreateSharedLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSharedLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSharedLinkRequestWithBody generates requests for CreateSharedLink with any type of body
func NewCreateSharedLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMySharedLinkRequest generates requests for GetMySharedLink
func NewGetMySharedLinkRequest(server string, params *GetMySharedLinkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveSharedLinkRequest generates requests for RemoveSharedLink
func NewRemoveSharedLinkRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharedLinkByIdRequest generates requests for GetSharedLinkById
func NewGetSharedLinkByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSharedLinkRequest calls the generic UpdateSharedLink builder with application/json body
func NewUpdateSharedLinkRequest(server string, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSharedLinkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSharedLinkRequestWithBody generates requests for UpdateSharedLink with any type of body
func NewUpdateSharedLinkRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSharedLinkAssetsRequest calls the generic RemoveSharedLinkAssets builder with application/json body
func NewRemoveSharedLinkAssetsRequest(server string, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveSharedLinkAssetsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewRemoveSharedLinkAssetsRequestWithBody generates requests for RemoveSharedLinkAssets with any type of body
func NewRemoveSharedLinkAssetsRequestWithBody(server string, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSharedLinkAssetsRequest calls the generic AddSharedLinkAssets builder with application/json body
func NewAddSharedLinkAssetsRequest(server string, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSharedLinkAssetsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddSharedLinkAssetsRequestWithBody generates requests for AddSharedLinkAssets with any type of body
func NewAddSharedLinkAssetsRequestWithBody(server string, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-links/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStacksRequest calls the generic DeleteStacks builder with application/json body
func NewDeleteStacksRequest(server string, body DeleteStacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteStacksRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteStacksRequestWithBody generates requests for DeleteStacks with any type of body
func NewDeleteStacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchStacksRequest generates requests for SearchStacks
func NewSearchStacksRequest(server string, params *SearchStacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrimaryAssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryAssetId", runtime.ParamLocationQuery, *params.PrimaryAssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStackRequest calls the generic CreateStack builder with application/json body
func NewCreateStackRequest(server string, body CreateStackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStackRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStackRequestWithBody generates requests for CreateStack with any type of body
func NewCreateStackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStackRequest generates requests for DeleteStack
func NewDeleteStackRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStackRequest generates requests for GetStack
func NewGetStackRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStackRequest calls the generic UpdateStack builder with application/json body
func NewUpdateStackRequest(server string, id openapi_types.UUID, body UpdateStackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStackRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateStackRequestWithBody generates requests for UpdateStack with any type of body
func NewUpdateStackRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSyncAckRequest calls the generic DeleteSyncAck builder with application/json body
func NewDeleteSyncAckRequest(server string, body DeleteSyncAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSyncAckRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSyncAckRequestWithBody generates requests for DeleteSyncAck with any type of body
func NewDeleteSyncAckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSyncAckRequest generates requests for GetSyncAck
func NewGetSyncAckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendSyncAckRequest calls the generic SendSyncAck builder with application/json body
func NewSendSyncAckRequest(server string, body SendSyncAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendSyncAckRequestWithBody(server, "application/json", bodyReader)
}

// NewSendSyncAckRequestWithBody generates requests for SendSyncAck with any type of body
func NewSendSyncAckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeltaSyncRequest calls the generic GetDeltaSync builder with application/json body
func NewGetDeltaSyncRequest(server string, body GetDeltaSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDeltaSyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDeltaSyncRequestWithBody generates requests for GetDeltaSync with any type of body
func NewGetDeltaSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/delta-sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFullSyncForUserRequest calls the generic GetFullSyncForUser builder with application/json body
func NewGetFullSyncForUserRequest(server string, body GetFullSyncForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFullSyncForUserRequestWithBody(server, "application/json", bodyReader)
}

// NewGetFullSyncForUserRequestWithBody generates requests for GetFullSyncForUser with any type of body
func NewGetFullSyncForUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/full-sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSyncStreamRequest calls the generic GetSyncStream builder with application/json body
func NewGetSyncStreamRequest(server string, body GetSyncStreamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSyncStreamRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSyncStreamRequestWithBody generates requests for GetSyncStream with any type of body
func NewGetSyncStreamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/stream")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConfigRequest calls the generic UpdateConfig builder with application/json body
func NewUpdateConfigRequest(server string, body UpdateConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConfigRequestWithBody generates requests for UpdateConfig with any type of body
func NewUpdateConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigDefaultsRequest generates requests for GetConfigDefaults
func NewGetConfigDefaultsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageTemplateOptionsRequest generates requests for GetStorageTemplateOptions
func NewGetStorageTemplateOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config/storage-template-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminOnboardingRequest generates requests for GetAdminOnboarding
func NewGetAdminOnboardingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/admin-onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAdminOnboardingRequest calls the generic UpdateAdminOnboarding builder with application/json body
func NewUpdateAdminOnboardingRequest(server string, body UpdateAdminOnboardingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAdminOnboardingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAdminOnboardingRequestWithBody generates requests for UpdateAdminOnboarding with any type of body
func NewUpdateAdminOnboardingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/admin-onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReverseGeocodingStateRequest generates requests for GetReverseGeocodingState
func NewGetReverseGeocodingStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/reverse-geocoding-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTagsRequest generates requests for GetAllTags
func NewGetAllTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertTagsRequest calls the generic UpsertTags builder with application/json body
func NewUpsertTagsRequest(server string, body UpsertTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertTagsRequestWithBody generates requests for UpsertTags with any type of body
func NewUpsertTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkTagAssetsRequest calls the generic BulkTagAssets builder with application/json body
func NewBulkTagAssetsRequest(server string, body BulkTagAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkTagAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewBulkTagAssetsRequestWithBody generates requests for BulkTagAssets with any type of body
func NewBulkTagAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagByIdRequest generates requests for GetTagById
func NewGetTagByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTagRequest calls the generic UpdateTag builder with application/json body
func NewUpdateTagRequest(server string, id openapi_types.UUID, body UpdateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTagRequestWithBody generates requests for UpdateTag with any type of body
func NewUpdateTagRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUntagAssetsRequest calls the generic UntagAssets builder with application/json body
func NewUntagAssetsRequest(server string, id openapi_types.UUID, body UntagAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUntagAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUntagAssetsRequestWithBody generates requests for UntagAssets with any type of body
func NewUntagAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTagAssetsRequest calls the generic TagAssets builder with application/json body
func NewTagAssetsRequest(server string, id openapi_types.UUID, body TagAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTagAssetsRequestWithBody generates requests for TagAssets with any type of body
func NewTagAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimeBucketRequest generates requests for GetTimeBucket
func NewGetTimeBucketRequest(server string, params *GetTimeBucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AlbumId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, *params.AlbumId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personId", runtime.ParamLocationQuery, *params.PersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagId", runtime.ParamLocationQuery, *params.TagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeBucket", runtime.ParamLocationQuery, params.TimeBucket); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithStacked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withStacked", runtime.ParamLocationQuery, *params.WithStacked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeBucketsRequest generates requests for GetTimeBuckets
func NewGetTimeBucketsRequest(server string, params *GetTimeBucketsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/buckets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AlbumId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, *params.AlbumId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personId", runtime.ParamLocationQuery, *params.PersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagId", runtime.ParamLocationQuery, *params.TagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithStacked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withStacked", runtime.ParamLocationQuery, *params.WithStacked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmptyTrashRequest generates requests for EmptyTrash
func NewEmptyTrashRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/empty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreTrashRequest generates requests for RestoreTrash
func NewRestoreTrashRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreAssetsRequest calls the generic RestoreAssets builder with application/json body
func NewRestoreAssetsRequest(server string, body RestoreAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewRestoreAssetsRequestWithBody generates requests for RestoreAssets with any type of body
func NewRestoreAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/restore/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchUsersRequest generates requests for SearchUsers
func NewSearchUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyUserRequest generates requests for GetMyUser
func NewGetMyUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMyUserRequest calls the generic UpdateMyUser builder with application/json body
func NewUpdateMyUserRequest(server string, body UpdateMyUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMyUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateMyUserRequestWithBody generates requests for UpdateMyUser with any type of body
func NewUpdateMyUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserLicenseRequest generates requests for DeleteUserLicense
func NewDeleteUserLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserLicenseRequest generates requests for GetUserLicense
func NewGetUserLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetUserLicenseRequest calls the generic SetUserLicense builder with application/json body
func NewSetUserLicenseRequest(server string, body SetUserLicenseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUserLicenseRequestWithBody(server, "application/json", bodyReader)
}

// NewSetUserLicenseRequestWithBody generates requests for SetUserLicense with any type of body
func NewSetUserLicenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyPreferencesRequest generates requests for GetMyPreferences
func NewGetMyPreferencesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMyPreferencesRequest calls the generic UpdateMyPreferences builder with application/json body
func NewUpdateMyPreferencesRequest(server string, body UpdateMyPreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMyPreferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateMyPreferencesRequestWithBody generates requests for UpdateMyPreferences with any type of body
func NewUpdateMyPreferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProfileImageRequest generates requests for DeleteProfileImage
func NewDeleteProfileImageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/profile-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProfileImageRequestWithBody generates requests for CreateProfileImage with any type of body
func NewCreateProfileImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/profile-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileImageRequest generates requests for GetProfileImage
func NewGetProfileImageRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/profile-image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetsByOriginalPathRequest generates requests for GetAssetsByOriginalPath
func NewGetAssetsByOriginalPathRequest(server string, params *GetAssetsByOriginalPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniqueOriginalPathsRequest generates requests for GetUniqueOriginalPaths
func NewGetUniqueOriginalPathsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/folder/unique-paths")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetActivitiesWithResponse request
	GetActivitiesWithResponse(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error)

	// CreateActivityWithBodyWithResponse request with any body
	CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	// GetActivityStatisticsWithResponse request
	GetActivityStatisticsWithResponse(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*GetActivityStatisticsResponse, error)

	// DeleteActivityWithResponse request
	DeleteActivityWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error)

	// CreateNotificationWithBodyWithResponse request with any body
	CreateNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationResponse, error)

	CreateNotificationWithResponse(ctx context.Context, body CreateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationResponse, error)

	// GetNotificationTemplateAdminWithBodyWithResponse request with any body
	GetNotificationTemplateAdminWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNotificationTemplateAdminResponse, error)

	GetNotificationTemplateAdminWithResponse(ctx context.Context, name string, body GetNotificationTemplateAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNotificationTemplateAdminResponse, error)

	// SendTestEmailAdminWithBodyWithResponse request with any body
	SendTestEmailAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendTestEmailAdminResponse, error)

	SendTestEmailAdminWithResponse(ctx context.Context, body SendTestEmailAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SendTestEmailAdminResponse, error)

	// SearchUsersAdminWithResponse request
	SearchUsersAdminWithResponse(ctx context.Context, params *SearchUsersAdminParams, reqEditors ...RequestEditorFn) (*SearchUsersAdminResponse, error)

	// CreateUserAdminWithBodyWithResponse request with any body
	CreateUserAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserAdminResponse, error)

	CreateUserAdminWithResponse(ctx context.Context, body CreateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserAdminResponse, error)

	// DeleteUserAdminWithBodyWithResponse request with any body
	DeleteUserAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserAdminResponse, error)

	DeleteUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserAdminResponse, error)

	// GetUserAdminWithResponse request
	GetUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserAdminResponse, error)

	// UpdateUserAdminWithBodyWithResponse request with any body
	UpdateUserAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserAdminResponse, error)

	UpdateUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserAdminResponse, error)

	// GetUserPreferencesAdminWithResponse request
	GetUserPreferencesAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserPreferencesAdminResponse, error)

	// UpdateUserPreferencesAdminWithBodyWithResponse request with any body
	UpdateUserPreferencesAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesAdminResponse, error)

	UpdateUserPreferencesAdminWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserPreferencesAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesAdminResponse, error)

	// RestoreUserAdminWithResponse request
	RestoreUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestoreUserAdminResponse, error)

	// GetUserStatisticsAdminWithResponse request
	GetUserStatisticsAdminWithResponse(ctx context.Context, id openapi_types.UUID, params *GetUserStatisticsAdminParams, reqEditors ...RequestEditorFn) (*GetUserStatisticsAdminResponse, error)

	// GetAllAlbumsWithResponse request
	GetAllAlbumsWithResponse(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*GetAllAlbumsResponse, error)

	// CreateAlbumWithBodyWithResponse request with any body
	CreateAlbumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error)

	CreateAlbumWithResponse(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error)

	// GetAlbumStatisticsWithResponse request
	GetAlbumStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlbumStatisticsResponse, error)

	// DeleteAlbumWithResponse request
	DeleteAlbumWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAlbumResponse, error)

	// GetAlbumInfoWithResponse request
	GetAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*GetAlbumInfoResponse, error)

	// UpdateAlbumInfoWithBodyWithResponse request with any body
	UpdateAlbumInfoWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error)

	UpdateAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error)

	// RemoveAssetFromAlbumWithBodyWithResponse request with any body
	RemoveAssetFromAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error)

	RemoveAssetFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error)

	// AddAssetsToAlbumWithBodyWithResponse request with any body
	AddAssetsToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error)

	AddAssetsToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error)

	// RemoveUserFromAlbumWithResponse request
	RemoveUserFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromAlbumResponse, error)

	// UpdateAlbumUserWithBodyWithResponse request with any body
	UpdateAlbumUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error)

	UpdateAlbumUserWithResponse(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error)

	// AddUsersToAlbumWithBodyWithResponse request with any body
	AddUsersToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error)

	AddUsersToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error)

	// GetApiKeysWithResponse request
	GetApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error)

	// CreateApiKeyWithBodyWithResponse request with any body
	CreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	CreateApiKeyWithResponse(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	// DeleteApiKeyWithResponse request
	DeleteApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// UpdateApiKeyWithBodyWithResponse request with any body
	UpdateApiKeyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	UpdateApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	// DeleteAssetsWithBodyWithResponse request with any body
	DeleteAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error)

	DeleteAssetsWithResponse(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error)

	// UploadAssetWithBodyWithResponse request with any body
	UploadAssetWithBodyWithResponse(ctx context.Context, params *UploadAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadAssetResponse, error)

	// UpdateAssetsWithBodyWithResponse request with any body
	UpdateAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error)

	UpdateAssetsWithResponse(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error)

	// CheckBulkUploadWithBodyWithResponse request with any body
	CheckBulkUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error)

	CheckBulkUploadWithResponse(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error)

	// GetAllUserAssetsByDeviceIdWithResponse request
	GetAllUserAssetsByDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetAllUserAssetsByDeviceIdResponse, error)

	// CheckExistingAssetsWithBodyWithResponse request with any body
	CheckExistingAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error)

	CheckExistingAssetsWithResponse(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error)

	// RunAssetJobsWithBodyWithResponse request with any body
	RunAssetJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error)

	RunAssetJobsWithResponse(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error)

	// GetRandomWithResponse request
	GetRandomWithResponse(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*GetRandomResponse, error)

	// GetAssetStatisticsWithResponse request
	GetAssetStatisticsWithResponse(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*GetAssetStatisticsResponse, error)

	// GetAssetInfoWithResponse request
	GetAssetInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error)

	// UpdateAssetWithBodyWithResponse request with any body
	UpdateAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	UpdateAssetWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	// DownloadAssetWithResponse request
	DownloadAssetWithResponse(ctx context.Context, id openapi_types.UUID, params *DownloadAssetParams, reqEditors ...RequestEditorFn) (*DownloadAssetResponse, error)

	// ReplaceAssetWithBodyWithResponse request with any body
	ReplaceAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *ReplaceAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAssetResponse, error)

	// ViewAssetWithResponse request
	ViewAssetWithResponse(ctx context.Context, id openapi_types.UUID, params *ViewAssetParams, reqEditors ...RequestEditorFn) (*ViewAssetResponse, error)

	// PlayAssetVideoWithResponse request
	PlayAssetVideoWithResponse(ctx context.Context, id openapi_types.UUID, params *PlayAssetVideoParams, reqEditors ...RequestEditorFn) (*PlayAssetVideoResponse, error)

	// SignUpAdminWithBodyWithResponse request with any body
	SignUpAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error)

	SignUpAdminWithResponse(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error)

	// ChangePasswordWithBodyWithResponse request with any body
	ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// ResetPinCodeWithBodyWithResponse request with any body
	ResetPinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPinCodeResponse, error)

	ResetPinCodeWithResponse(ctx context.Context, body ResetPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetPinCodeResponse, error)

	// SetupPinCodeWithBodyWithResponse request with any body
	SetupPinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupPinCodeResponse, error)

	SetupPinCodeWithResponse(ctx context.Context, body SetupPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupPinCodeResponse, error)

	// ChangePinCodeWithBodyWithResponse request with any body
	ChangePinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePinCodeResponse, error)

	ChangePinCodeWithResponse(ctx context.Context, body ChangePinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePinCodeResponse, error)

	// LockAuthSessionWithResponse request
	LockAuthSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LockAuthSessionResponse, error)

	// UnlockAuthSessionWithBodyWithResponse request with any body
	UnlockAuthSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnlockAuthSessionResponse, error)

	UnlockAuthSessionWithResponse(ctx context.Context, body UnlockAuthSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UnlockAuthSessionResponse, error)

	// GetAuthStatusWithResponse request
	GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error)

	// ValidateAccessTokenWithResponse request
	ValidateAccessTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateAccessTokenResponse, error)

	// DownloadArchiveWithBodyWithResponse request with any body
	DownloadArchiveWithBodyWithResponse(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error)

	DownloadArchiveWithResponse(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error)

	// GetDownloadInfoWithBodyWithResponse request with any body
	GetDownloadInfoWithBodyWithResponse(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error)

	GetDownloadInfoWithResponse(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error)

	// GetAssetDuplicatesWithResponse request
	GetAssetDuplicatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetDuplicatesResponse, error)

	// GetFacesWithResponse request
	GetFacesWithResponse(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*GetFacesResponse, error)

	// CreateFaceWithBodyWithResponse request with any body
	CreateFaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFaceResponse, error)

	CreateFaceWithResponse(ctx context.Context, body CreateFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFaceResponse, error)

	// DeleteFaceWithBodyWithResponse request with any body
	DeleteFaceWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFaceResponse, error)

	DeleteFaceWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFaceResponse, error)

	// ReassignFacesByIdWithBodyWithResponse request with any body
	ReassignFacesByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error)

	ReassignFacesByIdWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error)

	// GetAllJobsStatusWithResponse request
	GetAllJobsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllJobsStatusResponse, error)

	// CreateJobWithBodyWithResponse request with any body
	CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	// SendJobCommandWithBodyWithResponse request with any body
	SendJobCommandWithBodyWithResponse(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error)

	SendJobCommandWithResponse(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error)

	// GetAllLibrariesWithResponse request
	GetAllLibrariesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllLibrariesResponse, error)

	// CreateLibraryWithBodyWithResponse request with any body
	CreateLibraryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error)

	CreateLibraryWithResponse(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error)

	// DeleteLibraryWithResponse request
	DeleteLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLibraryResponse, error)

	// GetLibraryWithResponse request
	GetLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error)

	// UpdateLibraryWithBodyWithResponse request with any body
	UpdateLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error)

	UpdateLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error)

	// ScanLibraryWithResponse request
	ScanLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error)

	// GetLibraryStatisticsWithResponse request
	GetLibraryStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryStatisticsResponse, error)

	// ValidateWithBodyWithResponse request with any body
	ValidateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	ValidateWithResponse(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	// GetMapMarkersWithResponse request
	GetMapMarkersWithResponse(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*GetMapMarkersResponse, error)

	// ReverseGeocodeWithResponse request
	ReverseGeocodeWithResponse(ctx context.Context, params *ReverseGeocodeParams, reqEditors ...RequestEditorFn) (*ReverseGeocodeResponse, error)

	// SearchMemoriesWithResponse request
	SearchMemoriesWithResponse(ctx context.Context, params *SearchMemoriesParams, reqEditors ...RequestEditorFn) (*SearchMemoriesResponse, error)

	// CreateMemoryWithBodyWithResponse request with any body
	CreateMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error)

	CreateMemoryWithResponse(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error)

	// DeleteMemoryWithResponse request
	DeleteMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMemoryResponse, error)

	// GetMemoryWithResponse request
	GetMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMemoryResponse, error)

	// UpdateMemoryWithBodyWithResponse request with any body
	UpdateMemoryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error)

	UpdateMemoryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error)

	// RemoveMemoryAssetsWithBodyWithResponse request with any body
	RemoveMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error)

	RemoveMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error)

	// AddMemoryAssetsWithBodyWithResponse request with any body
	AddMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error)

	AddMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error)

	// DeleteNotificationsWithBodyWithResponse request with any body
	DeleteNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNotificationsResponse, error)

	DeleteNotificationsWithResponse(ctx context.Context, body DeleteNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNotificationsResponse, error)

	// GetNotificationsWithResponse request
	GetNotificationsWithResponse(ctx context.Context, params *GetNotificationsParams, reqEditors ...RequestEditorFn) (*GetNotificationsResponse, error)

	// UpdateNotificationsWithBodyWithResponse request with any body
	UpdateNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationsResponse, error)

	UpdateNotificationsWithResponse(ctx context.Context, body UpdateNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationsResponse, error)

	// DeleteNotificationWithResponse request
	DeleteNotificationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNotificationResponse, error)

	// GetNotificationWithResponse request
	GetNotificationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNotificationResponse, error)

	// UpdateNotificationWithBodyWithResponse request with any body
	UpdateNotificationWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationResponse, error)

	UpdateNotificationWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationResponse, error)

	// StartOAuthWithBodyWithResponse request with any body
	StartOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error)

	StartOAuthWithResponse(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error)

	// FinishOAuthWithBodyWithResponse request with any body
	FinishOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error)

	FinishOAuthWithResponse(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error)

	// LinkOAuthAccountWithBodyWithResponse request with any body
	LinkOAuthAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error)

	LinkOAuthAccountWithResponse(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error)

	// RedirectOAuthToMobileWithResponse request
	RedirectOAuthToMobileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RedirectOAuthToMobileResponse, error)

	// UnlinkOAuthAccountWithResponse request
	UnlinkOAuthAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnlinkOAuthAccountResponse, error)

	// GetPartnersWithResponse request
	GetPartnersWithResponse(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*GetPartnersResponse, error)

	// RemovePartnerWithResponse request
	RemovePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemovePartnerResponse, error)

	// CreatePartnerWithResponse request
	CreatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreatePartnerResponse, error)

	// UpdatePartnerWithBodyWithResponse request with any body
	UpdatePartnerWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error)

	UpdatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error)

	// GetAllPeopleWithResponse request
	GetAllPeopleWithResponse(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*GetAllPeopleResponse, error)

	// CreatePersonWithBodyWithResponse request with any body
	CreatePersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error)

	CreatePersonWithResponse(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error)

	// UpdatePeopleWithBodyWithResponse request with any body
	UpdatePeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error)

	UpdatePeopleWithResponse(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error)

	// GetPersonWithResponse request
	GetPersonWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonResponse, error)

	// UpdatePersonWithBodyWithResponse request with any body
	UpdatePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error)

	UpdatePersonWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error)

	// MergePersonWithBodyWithResponse request with any body
	MergePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergePersonResponse, error)

	MergePersonWithResponse(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*MergePersonResponse, error)

	// ReassignFacesWithBodyWithResponse request with any body
	ReassignFacesWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error)

	ReassignFacesWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error)

	// GetPersonStatisticsWithResponse request
	GetPersonStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonStatisticsResponse, error)

	// GetPersonThumbnailWithResponse request
	GetPersonThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonThumbnailResponse, error)

	// GetAssetsByCityWithResponse request
	GetAssetsByCityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetsByCityResponse, error)

	// GetExploreDataWithResponse request
	GetExploreDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExploreDataResponse, error)

	// SearchAssetsWithBodyWithResponse request with any body
	SearchAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchAssetsResponse, error)

	SearchAssetsWithResponse(ctx context.Context, body SearchAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchAssetsResponse, error)

	// SearchPersonWithResponse request
	SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error)

	// SearchPlacesWithResponse request
	SearchPlacesWithResponse(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*SearchPlacesResponse, error)

	// SearchRandomWithBodyWithResponse request with any body
	SearchRandomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchRandomResponse, error)

	SearchRandomWithResponse(ctx context.Context, body SearchRandomJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchRandomResponse, error)

	// SearchSmartWithBodyWithResponse request with any body
	SearchSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error)

	SearchSmartWithResponse(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error)

	// GetSearchSuggestionsWithResponse request
	GetSearchSuggestionsWithResponse(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsResponse, error)

	// GetAboutInfoWithResponse request
	GetAboutInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAboutInfoResponse, error)

	// GetServerConfigWithResponse request
	GetServerConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error)

	// GetServerFeaturesWithResponse request
	GetServerFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerFeaturesResponse, error)

	// DeleteServerLicenseWithResponse request
	DeleteServerLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteServerLicenseResponse, error)

	// GetServerLicenseWithResponse request
	GetServerLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerLicenseResponse, error)

	// SetServerLicenseWithBodyWithResponse request with any body
	SetServerLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerLicenseResponse, error)

	SetServerLicenseWithResponse(ctx context.Context, body SetServerLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerLicenseResponse, error)

	// GetSupportedMediaTypesWithResponse request
	GetSupportedMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedMediaTypesResponse, error)

	// PingServerWithResponse request
	PingServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingServerResponse, error)

	// GetServerStatisticsWithResponse request
	GetServerStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerStatisticsResponse, error)

	// GetStorageWithResponse request
	GetStorageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageResponse, error)

	// GetThemeWithResponse request
	GetThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetThemeResponse, error)

	// GetServerVersionWithResponse request
	GetServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerVersionResponse, error)

	// GetVersionHistoryWithResponse request
	GetVersionHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionHistoryResponse, error)

	// DeleteAllSessionsWithResponse request
	DeleteAllSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllSessionsResponse, error)

	// GetSessionsWithResponse request
	GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error)

	// CreateSessionWithBodyWithResponse request with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// LockSessionWithResponse request
	LockSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*LockSessionResponse, error)

	// GetAllSharedLinksWithResponse request
	GetAllSharedLinksWithResponse(ctx context.Context, params *GetAllSharedLinksParams, reqEditors ...RequestEditorFn) (*GetAllSharedLinksResponse, error)

	// CreateSharedLinkWithBodyWithResponse request with any body
	CreateSharedLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error)

	CreateSharedLinkWithResponse(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error)

	// GetMySharedLinkWithResponse request
	GetMySharedLinkWithResponse(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*GetMySharedLinkResponse, error)

	// RemoveSharedLinkWithResponse request
	RemoveSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveSharedLinkResponse, error)

	// GetSharedLinkByIdWithResponse request
	GetSharedLinkByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSharedLinkByIdResponse, error)

	// UpdateSharedLinkWithBodyWithResponse request with any body
	UpdateSharedLinkWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error)

	UpdateSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error)

	// RemoveSharedLinkAssetsWithBodyWithResponse request with any body
	RemoveSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error)

	RemoveSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error)

	// AddSharedLinkAssetsWithBodyWithResponse request with any body
	AddSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error)

	AddSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error)

	// DeleteStacksWithBodyWithResponse request with any body
	DeleteStacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteStacksResponse, error)

	DeleteStacksWithResponse(ctx context.Context, body DeleteStacksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteStacksResponse, error)

	// SearchStacksWithResponse request
	SearchStacksWithResponse(ctx context.Context, params *SearchStacksParams, reqEditors ...RequestEditorFn) (*SearchStacksResponse, error)

	// CreateStackWithBodyWithResponse request with any body
	CreateStackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStackResponse, error)

	CreateStackWithResponse(ctx context.Context, body CreateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStackResponse, error)

	// DeleteStackWithResponse request
	DeleteStackWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteStackResponse, error)

	// GetStackWithResponse request
	GetStackWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStackResponse, error)

	// UpdateStackWithBodyWithResponse request with any body
	UpdateStackWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStackResponse, error)

	UpdateStackWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStackResponse, error)

	// DeleteSyncAckWithBodyWithResponse request with any body
	DeleteSyncAckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSyncAckResponse, error)

	DeleteSyncAckWithResponse(ctx context.Context, body DeleteSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSyncAckResponse, error)

	// GetSyncAckWithResponse request
	GetSyncAckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSyncAckResponse, error)

	// SendSyncAckWithBodyWithResponse request with any body
	SendSyncAckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendSyncAckResponse, error)

	SendSyncAckWithResponse(ctx context.Context, body SendSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SendSyncAckResponse, error)

	// GetDeltaSyncWithBodyWithResponse request with any body
	GetDeltaSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error)

	GetDeltaSyncWithResponse(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error)

	// GetFullSyncForUserWithBodyWithResponse request with any body
	GetFullSyncForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error)

	GetFullSyncForUserWithResponse(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error)

	// GetSyncStreamWithBodyWithResponse request with any body
	GetSyncStreamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSyncStreamResponse, error)

	GetSyncStreamWithResponse(ctx context.Context, body GetSyncStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSyncStreamResponse, error)

	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// UpdateConfigWithBodyWithResponse request with any body
	UpdateConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	UpdateConfigWithResponse(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	// GetConfigDefaultsWithResponse request
	GetConfigDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigDefaultsResponse, error)

	// GetStorageTemplateOptionsWithResponse request
	GetStorageTemplateOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageTemplateOptionsResponse, error)

	// GetAdminOnboardingWithResponse request
	GetAdminOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminOnboardingResponse, error)

	// UpdateAdminOnboardingWithBodyWithResponse request with any body
	UpdateAdminOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error)

	UpdateAdminOnboardingWithResponse(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error)

	// GetReverseGeocodingStateWithResponse request
	GetReverseGeocodingStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReverseGeocodingStateResponse, error)

	// GetAllTagsWithResponse request
	GetAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error)

	// CreateTagWithBodyWithResponse request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// UpsertTagsWithBodyWithResponse request with any body
	UpsertTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertTagsResponse, error)

	UpsertTagsWithResponse(ctx context.Context, body UpsertTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertTagsResponse, error)

	// BulkTagAssetsWithBodyWithResponse request with any body
	BulkTagAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkTagAssetsResponse, error)

	BulkTagAssetsWithResponse(ctx context.Context, body BulkTagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkTagAssetsResponse, error)

	// DeleteTagWithResponse request
	DeleteTagWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTagByIdWithResponse request
	GetTagByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error)

	// UpdateTagWithBodyWithResponse request with any body
	UpdateTagWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	UpdateTagWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	// UntagAssetsWithBodyWithResponse request with any body
	UntagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error)

	UntagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error)

	// TagAssetsWithBodyWithResponse request with any body
	TagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error)

	TagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error)

	// GetTimeBucketWithResponse request
	GetTimeBucketWithResponse(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*GetTimeBucketResponse, error)

	// GetTimeBucketsWithResponse request
	GetTimeBucketsWithResponse(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*GetTimeBucketsResponse, error)

	// EmptyTrashWithResponse request
	EmptyTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EmptyTrashResponse, error)

	// RestoreTrashWithResponse request
	RestoreTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestoreTrashResponse, error)

	// RestoreAssetsWithBodyWithResponse request with any body
	RestoreAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error)

	RestoreAssetsWithResponse(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error)

	// SearchUsersWithResponse request
	SearchUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error)

	// GetMyUserWithResponse request
	GetMyUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyUserResponse, error)

	// UpdateMyUserWithBodyWithResponse request with any body
	UpdateMyUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyUserResponse, error)

	UpdateMyUserWithResponse(ctx context.Context, body UpdateMyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyUserResponse, error)

	// DeleteUserLicenseWithResponse request
	DeleteUserLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserLicenseResponse, error)

	// GetUserLicenseWithResponse request
	GetUserLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserLicenseResponse, error)

	// SetUserLicenseWithBodyWithResponse request with any body
	SetUserLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserLicenseResponse, error)

	SetUserLicenseWithResponse(ctx context.Context, body SetUserLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserLicenseResponse, error)

	// GetMyPreferencesWithResponse request
	GetMyPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyPreferencesResponse, error)

	// UpdateMyPreferencesWithBodyWithResponse request with any body
	UpdateMyPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyPreferencesResponse, error)

	UpdateMyPreferencesWithResponse(ctx context.Context, body UpdateMyPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyPreferencesResponse, error)

	// DeleteProfileImageWithResponse request
	DeleteProfileImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error)

	// CreateProfileImageWithBodyWithResponse request with any body
	CreateProfileImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileImageResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetProfileImageWithResponse request
	GetProfileImageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error)

	// GetAssetsByOriginalPathWithResponse request
	GetAssetsByOriginalPathWithResponse(ctx context.Context, params *GetAssetsByOriginalPathParams, reqEditors ...RequestEditorFn) (*GetAssetsByOriginalPathResponse, error)

	// GetUniqueOriginalPathsWithResponse request
	GetUniqueOriginalPathsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniqueOriginalPathsResponse, error)
}

type GetActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActivityResponseDto
}

// Status returns HTTPResponse.Status
func (r GetActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ActivityResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityStatisticsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetActivityStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NotificationDto
}

// Status returns HTTPResponse.Status
func (r CreateNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationTemplateAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateResponseDto
}

// Status returns HTTPResponse.Status
func (r GetNotificationTemplateAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationTemplateAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendTestEmailAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestEmailResponseDto
}

// Status returns HTTPResponse.Status
func (r SendTestEmailAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendTestEmailAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsersAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchUsersAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsersAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateUserAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r DeleteUserAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateUserAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPreferencesAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserPreferencesAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPreferencesAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserPreferencesAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateUserPreferencesAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserPreferencesAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreUserAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r RestoreUserAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreUserAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserStatisticsAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserStatisticsAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserStatisticsAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAlbumsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumStatisticsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAlbumStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAlbumInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlbumInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateAlbumInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlbumInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAssetFromAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveAssetFromAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAssetFromAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAssetsToAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r AddAssetsToAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAssetsToAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlbumUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAlbumUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlbumUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUsersToAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r AddUsersToAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUsersToAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r GetApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIKeyCreateResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AssetMediaResponseDto
}

// Status returns HTTPResponse.Status
func (r UploadAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckBulkUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetBulkUploadCheckResponseDto
}

// Status returns HTTPResponse.Status
func (r CheckBulkUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckBulkUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUserAssetsByDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAllUserAssetsByDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUserAssetsByDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckExistingAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckExistingAssetsResponseDto
}

// Status returns HTTPResponse.Status
func (r CheckExistingAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckExistingAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunAssetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunAssetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunAssetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetMediaResponseDto
}

// Status returns HTTPResponse.Status
func (r ReplaceAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ViewAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayAssetVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlayAssetVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayAssetVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignUpAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r SignUpAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignUpAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r ChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoginResponseDto
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogoutResponseDto
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetPinCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetPinCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPinCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupPinCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetupPinCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupPinCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePinCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangePinCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePinCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockAuthSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LockAuthSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockAuthSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlockAuthSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnlockAuthSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlockAuthSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthStatusResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAuthStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateAccessTokenResponseDto
}

// Status returns HTTPResponse.Status
func (r ValidateAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDownloadInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DownloadResponseDto
}

// Status returns HTTPResponse.Status
func (r GetDownloadInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDownloadInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetDuplicatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DuplicateResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetDuplicatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetDuplicatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetFaceResponseDto
}

// Status returns HTTPResponse.Status
func (r GetFacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateFaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReassignFacesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r ReassignFacesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReassignFacesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllJobsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllJobStatusResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllJobsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllJobsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendJobCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobStatusDto
}

// Status returns HTTPResponse.Status
func (r SendJobCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendJobCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLibrariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllLibrariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLibrariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScanLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ScanLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScanLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetLibraryStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateLibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r ValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapMarkersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MapMarkerResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMapMarkersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMarkersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverseGeocodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MapReverseGeocodeResponseDto
}

// Status returns HTTPResponse.Status
func (r ReverseGeocodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverseGeocodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMemoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchMemoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMemoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMemoryAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveMemoryAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMemoryAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMemoryAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r AddMemoryAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMemoryAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationDto
}

// Status returns HTTPResponse.Status
func (r GetNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationDto
}

// Status returns HTTPResponse.Status
func (r GetNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationDto
}

// Status returns HTTPResponse.Status
func (r UpdateNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OAuthAuthorizeResponseDto
}

// Status returns HTTPResponse.Status
func (r StartOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinishOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoginResponseDto
}

// Status returns HTTPResponse.Status
func (r FinishOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinishOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkOAuthAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r LinkOAuthAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkOAuthAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedirectOAuthToMobileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RedirectOAuthToMobileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedirectOAuthToMobileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlinkOAuthAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r UnlinkOAuthAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlinkOAuthAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPartnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemovePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r CreatePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeopleResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r CreatePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MergePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r MergePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MergePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReassignFacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r ReassignFacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReassignFacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonStatisticsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPersonStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonThumbnailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPersonThumbnailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonThumbnailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsByCityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetsByCityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsByCityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExploreDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchExploreResponseDto
}

// Status returns HTTPResponse.Status
func (r GetExploreDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExploreDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchPersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPlacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PlacesResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchPlacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPlacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchRandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSuggestionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetSearchSuggestionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSuggestionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAboutInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerAboutResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAboutInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAboutInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerConfigDto
}

// Status returns HTTPResponse.Status
func (r GetServerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerFeaturesDto
}

// Status returns HTTPResponse.Status
func (r GetServerFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServerLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServerLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServerLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetServerLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseResponseDto
}

// Status returns HTTPResponse.Status
func (r SetServerLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetServerLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportedMediaTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerMediaTypesResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSupportedMediaTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportedMediaTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerPingResponse
}

// Status returns HTTPResponse.Status
func (r PingServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerStorageResponseDto
}

// Status returns HTTPResponse.Status
func (r GetStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerThemeDto
}

// Status returns HTTPResponse.Status
func (r GetThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerVersionResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServerVersionHistoryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetVersionHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAllSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SessionResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SessionCreateResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LockSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSharedLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllSharedLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSharedLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMySharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMySharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMySharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedLinkByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSharedLinkByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedLinkByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSharedLinkAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveSharedLinkAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSharedLinkAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSharedLinkAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r AddSharedLinkAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSharedLinkAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchStacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StackResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchStacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchStacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StackResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateStackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackResponseDto
}

// Status returns HTTPResponse.Status
func (r GetStackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateStackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSyncAckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSyncAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSyncAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncAckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SyncAckDto
}

// Status returns HTTPResponse.Status
func (r GetSyncAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendSyncAckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SendSyncAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendSyncAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeltaSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetDeltaSyncResponseDto
}

// Status returns HTTPResponse.Status
func (r GetDeltaSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeltaSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFullSyncForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetFullSyncForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFullSyncForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSyncStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r UpdateConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r GetConfigDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageTemplateOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigTemplateStorageOptionDto
}

// Status returns HTTPResponse.Status
func (r GetStorageTemplateOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageTemplateOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminOnboardingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminOnboardingUpdateDto
}

// Status returns HTTPResponse.Status
func (r GetAdminOnboardingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminOnboardingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAdminOnboardingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAdminOnboardingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAdminOnboardingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReverseGeocodingStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReverseGeocodingStateResponseDto
}

// Status returns HTTPResponse.Status
func (r GetReverseGeocodingStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReverseGeocodingStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResponseDto
}

// Status returns HTTPResponse.Status
func (r UpsertTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkTagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagBulkAssetsResponseDto
}

// Status returns HTTPResponse.Status
func (r BulkTagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkTagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTagByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UntagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r UntagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UntagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r TagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeBucketAssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTimeBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimeBucketsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTimeBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmptyTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrashResponseDto
}

// Status returns HTTPResponse.Status
func (r EmptyTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmptyTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrashResponseDto
}

// Status returns HTTPResponse.Status
func (r RestoreTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrashResponseDto
}

// Status returns HTTPResponse.Status
func (r RestoreAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMyUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMyUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAdminResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateMyUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMyUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseResponseDto
}

// Status returns HTTPResponse.Status
func (r SetUserLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMyPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMyPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateMyPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMyPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateProfileImageResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsByOriginalPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetsByOriginalPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsByOriginalPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniqueOriginalPathsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetUniqueOriginalPathsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniqueOriginalPathsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetActivitiesWithResponse request returning *GetActivitiesResponse
func (c *ClientWithResponses) GetActivitiesWithResponse(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error) {
	rsp, err := c.GetActivities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivitiesResponse(rsp)
}

// CreateActivityWithBodyWithResponse request with arbitrary body returning *CreateActivityResponse
func (c *ClientWithResponses) CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

func (c *ClientWithResponses) CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

// GetActivityStatisticsWithResponse request returning *GetActivityStatisticsResponse
func (c *ClientWithResponses) GetActivityStatisticsWithResponse(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*GetActivityStatisticsResponse, error) {
	rsp, err := c.GetActivityStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityStatisticsResponse(rsp)
}

// DeleteActivityWithResponse request returning *DeleteActivityResponse
func (c *ClientWithResponses) DeleteActivityWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error) {
	rsp, err := c.DeleteActivity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActivityResponse(rsp)
}

// CreateNotificationWithBodyWithResponse request with arbitrary body returning *CreateNotificationResponse
func (c *ClientWithResponses) CreateNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationResponse, error) {
	rsp, err := c.CreateNotificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationResponse(rsp)
}

func (c *ClientWithResponses) CreateNotificationWithResponse(ctx context.Context, body CreateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationResponse, error) {
	rsp, err := c.CreateNotification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationResponse(rsp)
}

// GetNotificationTemplateAdminWithBodyWithResponse request with arbitrary body returning *GetNotificationTemplateAdminResponse
func (c *ClientWithResponses) GetNotificationTemplateAdminWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNotificationTemplateAdminResponse, error) {
	rsp, err := c.GetNotificationTemplateAdminWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationTemplateAdminResponse(rsp)
}

func (c *ClientWithResponses) GetNotificationTemplateAdminWithResponse(ctx context.Context, name string, body GetNotificationTemplateAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNotificationTemplateAdminResponse, error) {
	rsp, err := c.GetNotificationTemplateAdmin(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationTemplateAdminResponse(rsp)
}

// SendTestEmailAdminWithBodyWithResponse request with arbitrary body returning *SendTestEmailAdminResponse
func (c *ClientWithResponses) SendTestEmailAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendTestEmailAdminResponse, error) {
	rsp, err := c.SendTestEmailAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendTestEmailAdminResponse(rsp)
}

func (c *ClientWithResponses) SendTestEmailAdminWithResponse(ctx context.Context, body SendTestEmailAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SendTestEmailAdminResponse, error) {
	rsp, err := c.SendTestEmailAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendTestEmailAdminResponse(rsp)
}

// SearchUsersAdminWithResponse request returning *SearchUsersAdminResponse
func (c *ClientWithResponses) SearchUsersAdminWithResponse(ctx context.Context, params *SearchUsersAdminParams, reqEditors ...RequestEditorFn) (*SearchUsersAdminResponse, error) {
	rsp, err := c.SearchUsersAdmin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsersAdminResponse(rsp)
}

// CreateUserAdminWithBodyWithResponse request with arbitrary body returning *CreateUserAdminResponse
func (c *ClientWithResponses) CreateUserAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserAdminResponse, error) {
	rsp, err := c.CreateUserAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserAdminResponse(rsp)
}

func (c *ClientWithResponses) CreateUserAdminWithResponse(ctx context.Context, body CreateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserAdminResponse, error) {
	rsp, err := c.CreateUserAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserAdminResponse(rsp)
}

// DeleteUserAdminWithBodyWithResponse request with arbitrary body returning *DeleteUserAdminResponse
func (c *ClientWithResponses) DeleteUserAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserAdminResponse, error) {
	rsp, err := c.DeleteUserAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserAdminResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserAdminResponse, error) {
	rsp, err := c.DeleteUserAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserAdminResponse(rsp)
}

// GetUserAdminWithResponse request returning *GetUserAdminResponse
func (c *ClientWithResponses) GetUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserAdminResponse, error) {
	rsp, err := c.GetUserAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAdminResponse(rsp)
}

// UpdateUserAdminWithBodyWithResponse request with arbitrary body returning *UpdateUserAdminResponse
func (c *ClientWithResponses) UpdateUserAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserAdminResponse, error) {
	rsp, err := c.UpdateUserAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserAdminResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserAdminResponse, error) {
	rsp, err := c.UpdateUserAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserAdminResponse(rsp)
}

// GetUserPreferencesAdminWithResponse request returning *GetUserPreferencesAdminResponse
func (c *ClientWithResponses) GetUserPreferencesAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserPreferencesAdminResponse, error) {
	rsp, err := c.GetUserPreferencesAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPreferencesAdminResponse(rsp)
}

// UpdateUserPreferencesAdminWithBodyWithResponse request with arbitrary body returning *UpdateUserPreferencesAdminResponse
func (c *ClientWithResponses) UpdateUserPreferencesAdminWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesAdminResponse, error) {
	rsp, err := c.UpdateUserPreferencesAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPreferencesAdminResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserPreferencesAdminWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserPreferencesAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPreferencesAdminResponse, error) {
	rsp, err := c.UpdateUserPreferencesAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPreferencesAdminResponse(rsp)
}

// RestoreUserAdminWithResponse request returning *RestoreUserAdminResponse
func (c *ClientWithResponses) RestoreUserAdminWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestoreUserAdminResponse, error) {
	rsp, err := c.RestoreUserAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreUserAdminResponse(rsp)
}

// GetUserStatisticsAdminWithResponse request returning *GetUserStatisticsAdminResponse
func (c *ClientWithResponses) GetUserStatisticsAdminWithResponse(ctx context.Context, id openapi_types.UUID, params *GetUserStatisticsAdminParams, reqEditors ...RequestEditorFn) (*GetUserStatisticsAdminResponse, error) {
	rsp, err := c.GetUserStatisticsAdmin(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserStatisticsAdminResponse(rsp)
}

// GetAllAlbumsWithResponse request returning *GetAllAlbumsResponse
func (c *ClientWithResponses) GetAllAlbumsWithResponse(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*GetAllAlbumsResponse, error) {
	rsp, err := c.GetAllAlbums(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAlbumsResponse(rsp)
}

// CreateAlbumWithBodyWithResponse request with arbitrary body returning *CreateAlbumResponse
func (c *ClientWithResponses) CreateAlbumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error) {
	rsp, err := c.CreateAlbumWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlbumResponse(rsp)
}

func (c *ClientWithResponses) CreateAlbumWithResponse(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error) {
	rsp, err := c.CreateAlbum(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlbumResponse(rsp)
}

// GetAlbumStatisticsWithResponse request returning *GetAlbumStatisticsResponse
func (c *ClientWithResponses) GetAlbumStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlbumStatisticsResponse, error) {
	rsp, err := c.GetAlbumStatistics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumStatisticsResponse(rsp)
}

// DeleteAlbumWithResponse request returning *DeleteAlbumResponse
func (c *ClientWithResponses) DeleteAlbumWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAlbumResponse, error) {
	rsp, err := c.DeleteAlbum(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlbumResponse(rsp)
}

// GetAlbumInfoWithResponse request returning *GetAlbumInfoResponse
func (c *ClientWithResponses) GetAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*GetAlbumInfoResponse, error) {
	rsp, err := c.GetAlbumInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumInfoResponse(rsp)
}

// UpdateAlbumInfoWithBodyWithResponse request with arbitrary body returning *UpdateAlbumInfoResponse
func (c *ClientWithResponses) UpdateAlbumInfoWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error) {
	rsp, err := c.UpdateAlbumInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error) {
	rsp, err := c.UpdateAlbumInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumInfoResponse(rsp)
}

// RemoveAssetFromAlbumWithBodyWithResponse request with arbitrary body returning *RemoveAssetFromAlbumResponse
func (c *ClientWithResponses) RemoveAssetFromAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error) {
	rsp, err := c.RemoveAssetFromAlbumWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssetFromAlbumResponse(rsp)
}

func (c *ClientWithResponses) RemoveAssetFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error) {
	rsp, err := c.RemoveAssetFromAlbum(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssetFromAlbumResponse(rsp)
}

// AddAssetsToAlbumWithBodyWithResponse request with arbitrary body returning *AddAssetsToAlbumResponse
func (c *ClientWithResponses) AddAssetsToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error) {
	rsp, err := c.AddAssetsToAlbumWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAssetsToAlbumResponse(rsp)
}

func (c *ClientWithResponses) AddAssetsToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error) {
	rsp, err := c.AddAssetsToAlbum(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAssetsToAlbumResponse(rsp)
}

// RemoveUserFromAlbumWithResponse request returning *RemoveUserFromAlbumResponse
func (c *ClientWithResponses) RemoveUserFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromAlbumResponse, error) {
	rsp, err := c.RemoveUserFromAlbum(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromAlbumResponse(rsp)
}

// UpdateAlbumUserWithBodyWithResponse request with arbitrary body returning *UpdateAlbumUserResponse
func (c *ClientWithResponses) UpdateAlbumUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error) {
	rsp, err := c.UpdateAlbumUserWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlbumUserWithResponse(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error) {
	rsp, err := c.UpdateAlbumUser(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumUserResponse(rsp)
}

// AddUsersToAlbumWithBodyWithResponse request with arbitrary body returning *AddUsersToAlbumResponse
func (c *ClientWithResponses) AddUsersToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error) {
	rsp, err := c.AddUsersToAlbumWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToAlbumResponse(rsp)
}

func (c *ClientWithResponses) AddUsersToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error) {
	rsp, err := c.AddUsersToAlbum(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToAlbumResponse(rsp)
}

// GetApiKeysWithResponse request returning *GetApiKeysResponse
func (c *ClientWithResponses) GetApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error) {
	rsp, err := c.GetApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysResponse(rsp)
}

// CreateApiKeyWithBodyWithResponse request with arbitrary body returning *CreateApiKeyResponse
func (c *ClientWithResponses) CreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyWithResponse(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

// DeleteApiKeyWithResponse request returning *DeleteApiKeyResponse
func (c *ClientWithResponses) DeleteApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error) {
	rsp, err := c.DeleteApiKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// UpdateApiKeyWithBodyWithResponse request with arbitrary body returning *UpdateApiKeyResponse
func (c *ClientWithResponses) UpdateApiKeyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

// DeleteAssetsWithBodyWithResponse request with arbitrary body returning *DeleteAssetsResponse
func (c *ClientWithResponses) DeleteAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error) {
	rsp, err := c.DeleteAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetsResponse(rsp)
}

func (c *ClientWithResponses) DeleteAssetsWithResponse(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error) {
	rsp, err := c.DeleteAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetsResponse(rsp)
}

// UploadAssetWithBodyWithResponse request with arbitrary body returning *UploadAssetResponse
func (c *ClientWithResponses) UploadAssetWithBodyWithResponse(ctx context.Context, params *UploadAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadAssetResponse, error) {
	rsp, err := c.UploadAssetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadAssetResponse(rsp)
}

// UpdateAssetsWithBodyWithResponse request with arbitrary body returning *UpdateAssetsResponse
func (c *ClientWithResponses) UpdateAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error) {
	rsp, err := c.UpdateAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAssetsWithResponse(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error) {
	rsp, err := c.UpdateAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetsResponse(rsp)
}

// CheckBulkUploadWithBodyWithResponse request with arbitrary body returning *CheckBulkUploadResponse
func (c *ClientWithResponses) CheckBulkUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error) {
	rsp, err := c.CheckBulkUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckBulkUploadResponse(rsp)
}

func (c *ClientWithResponses) CheckBulkUploadWithResponse(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error) {
	rsp, err := c.CheckBulkUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckBulkUploadResponse(rsp)
}

// GetAllUserAssetsByDeviceIdWithResponse request returning *GetAllUserAssetsByDeviceIdResponse
func (c *ClientWithResponses) GetAllUserAssetsByDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetAllUserAssetsByDeviceIdResponse, error) {
	rsp, err := c.GetAllUserAssetsByDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUserAssetsByDeviceIdResponse(rsp)
}

// CheckExistingAssetsWithBodyWithResponse request with arbitrary body returning *CheckExistingAssetsResponse
func (c *ClientWithResponses) CheckExistingAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error) {
	rsp, err := c.CheckExistingAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckExistingAssetsResponse(rsp)
}

func (c *ClientWithResponses) CheckExistingAssetsWithResponse(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error) {
	rsp, err := c.CheckExistingAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckExistingAssetsResponse(rsp)
}

// RunAssetJobsWithBodyWithResponse request with arbitrary body returning *RunAssetJobsResponse
func (c *ClientWithResponses) RunAssetJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error) {
	rsp, err := c.RunAssetJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunAssetJobsResponse(rsp)
}

func (c *ClientWithResponses) RunAssetJobsWithResponse(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error) {
	rsp, err := c.RunAssetJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunAssetJobsResponse(rsp)
}

// GetRandomWithResponse request returning *GetRandomResponse
func (c *ClientWithResponses) GetRandomWithResponse(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*GetRandomResponse, error) {
	rsp, err := c.GetRandom(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomResponse(rsp)
}

// GetAssetStatisticsWithResponse request returning *GetAssetStatisticsResponse
func (c *ClientWithResponses) GetAssetStatisticsWithResponse(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*GetAssetStatisticsResponse, error) {
	rsp, err := c.GetAssetStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetStatisticsResponse(rsp)
}

// GetAssetInfoWithResponse request returning *GetAssetInfoResponse
func (c *ClientWithResponses) GetAssetInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error) {
	rsp, err := c.GetAssetInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetInfoResponse(rsp)
}

// UpdateAssetWithBodyWithResponse request with arbitrary body returning *UpdateAssetResponse
func (c *ClientWithResponses) UpdateAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAssetWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

func (c *ClientWithResponses) UpdateAssetWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAsset(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

// DownloadAssetWithResponse request returning *DownloadAssetResponse
func (c *ClientWithResponses) DownloadAssetWithResponse(ctx context.Context, id openapi_types.UUID, params *DownloadAssetParams, reqEditors ...RequestEditorFn) (*DownloadAssetResponse, error) {
	rsp, err := c.DownloadAsset(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadAssetResponse(rsp)
}

// ReplaceAssetWithBodyWithResponse request with arbitrary body returning *ReplaceAssetResponse
func (c *ClientWithResponses) ReplaceAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *ReplaceAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceAssetResponse, error) {
	rsp, err := c.ReplaceAssetWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceAssetResponse(rsp)
}

// ViewAssetWithResponse request returning *ViewAssetResponse
func (c *ClientWithResponses) ViewAssetWithResponse(ctx context.Context, id openapi_types.UUID, params *ViewAssetParams, reqEditors ...RequestEditorFn) (*ViewAssetResponse, error) {
	rsp, err := c.ViewAsset(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewAssetResponse(rsp)
}

// PlayAssetVideoWithResponse request returning *PlayAssetVideoResponse
func (c *ClientWithResponses) PlayAssetVideoWithResponse(ctx context.Context, id openapi_types.UUID, params *PlayAssetVideoParams, reqEditors ...RequestEditorFn) (*PlayAssetVideoResponse, error) {
	rsp, err := c.PlayAssetVideo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayAssetVideoResponse(rsp)
}

// SignUpAdminWithBodyWithResponse request with arbitrary body returning *SignUpAdminResponse
func (c *ClientWithResponses) SignUpAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error) {
	rsp, err := c.SignUpAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignUpAdminResponse(rsp)
}

func (c *ClientWithResponses) SignUpAdminWithResponse(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error) {
	rsp, err := c.SignUpAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignUpAdminResponse(rsp)
}

// ChangePasswordWithBodyWithResponse request with arbitrary body returning *ChangePasswordResponse
func (c *ClientWithResponses) ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// ResetPinCodeWithBodyWithResponse request with arbitrary body returning *ResetPinCodeResponse
func (c *ClientWithResponses) ResetPinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPinCodeResponse, error) {
	rsp, err := c.ResetPinCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPinCodeResponse(rsp)
}

func (c *ClientWithResponses) ResetPinCodeWithResponse(ctx context.Context, body ResetPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetPinCodeResponse, error) {
	rsp, err := c.ResetPinCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPinCodeResponse(rsp)
}

// SetupPinCodeWithBodyWithResponse request with arbitrary body returning *SetupPinCodeResponse
func (c *ClientWithResponses) SetupPinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupPinCodeResponse, error) {
	rsp, err := c.SetupPinCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupPinCodeResponse(rsp)
}

func (c *ClientWithResponses) SetupPinCodeWithResponse(ctx context.Context, body SetupPinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupPinCodeResponse, error) {
	rsp, err := c.SetupPinCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupPinCodeResponse(rsp)
}

// ChangePinCodeWithBodyWithResponse request with arbitrary body returning *ChangePinCodeResponse
func (c *ClientWithResponses) ChangePinCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePinCodeResponse, error) {
	rsp, err := c.ChangePinCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePinCodeResponse(rsp)
}

func (c *ClientWithResponses) ChangePinCodeWithResponse(ctx context.Context, body ChangePinCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePinCodeResponse, error) {
	rsp, err := c.ChangePinCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePinCodeResponse(rsp)
}

// LockAuthSessionWithResponse request returning *LockAuthSessionResponse
func (c *ClientWithResponses) LockAuthSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LockAuthSessionResponse, error) {
	rsp, err := c.LockAuthSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockAuthSessionResponse(rsp)
}

// UnlockAuthSessionWithBodyWithResponse request with arbitrary body returning *UnlockAuthSessionResponse
func (c *ClientWithResponses) UnlockAuthSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnlockAuthSessionResponse, error) {
	rsp, err := c.UnlockAuthSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlockAuthSessionResponse(rsp)
}

func (c *ClientWithResponses) UnlockAuthSessionWithResponse(ctx context.Context, body UnlockAuthSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UnlockAuthSessionResponse, error) {
	rsp, err := c.UnlockAuthSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlockAuthSessionResponse(rsp)
}

// GetAuthStatusWithResponse request returning *GetAuthStatusResponse
func (c *ClientWithResponses) GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error) {
	rsp, err := c.GetAuthStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthStatusResponse(rsp)
}

// ValidateAccessTokenWithResponse request returning *ValidateAccessTokenResponse
func (c *ClientWithResponses) ValidateAccessTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateAccessTokenResponse, error) {
	rsp, err := c.ValidateAccessToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateAccessTokenResponse(rsp)
}

// DownloadArchiveWithBodyWithResponse request with arbitrary body returning *DownloadArchiveResponse
func (c *ClientWithResponses) DownloadArchiveWithBodyWithResponse(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error) {
	rsp, err := c.DownloadArchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadArchiveResponse(rsp)
}

func (c *ClientWithResponses) DownloadArchiveWithResponse(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error) {
	rsp, err := c.DownloadArchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadArchiveResponse(rsp)
}

// GetDownloadInfoWithBodyWithResponse request with arbitrary body returning *GetDownloadInfoResponse
func (c *ClientWithResponses) GetDownloadInfoWithBodyWithResponse(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error) {
	rsp, err := c.GetDownloadInfoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadInfoResponse(rsp)
}

func (c *ClientWithResponses) GetDownloadInfoWithResponse(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error) {
	rsp, err := c.GetDownloadInfo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadInfoResponse(rsp)
}

// GetAssetDuplicatesWithResponse request returning *GetAssetDuplicatesResponse
func (c *ClientWithResponses) GetAssetDuplicatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetDuplicatesResponse, error) {
	rsp, err := c.GetAssetDuplicates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetDuplicatesResponse(rsp)
}

// GetFacesWithResponse request returning *GetFacesResponse
func (c *ClientWithResponses) GetFacesWithResponse(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*GetFacesResponse, error) {
	rsp, err := c.GetFaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFacesResponse(rsp)
}

// CreateFaceWithBodyWithResponse request with arbitrary body returning *CreateFaceResponse
func (c *ClientWithResponses) CreateFaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFaceResponse, error) {
	rsp, err := c.CreateFaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFaceResponse(rsp)
}

func (c *ClientWithResponses) CreateFaceWithResponse(ctx context.Context, body CreateFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFaceResponse, error) {
	rsp, err := c.CreateFace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFaceResponse(rsp)
}

// DeleteFaceWithBodyWithResponse request with arbitrary body returning *DeleteFaceResponse
func (c *ClientWithResponses) DeleteFaceWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFaceResponse, error) {
	rsp, err := c.DeleteFaceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFaceResponse(rsp)
}

func (c *ClientWithResponses) DeleteFaceWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteFaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFaceResponse, error) {
	rsp, err := c.DeleteFace(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFaceResponse(rsp)
}

// ReassignFacesByIdWithBodyWithResponse request with arbitrary body returning *ReassignFacesByIdResponse
func (c *ClientWithResponses) ReassignFacesByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error) {
	rsp, err := c.ReassignFacesByIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesByIdResponse(rsp)
}

func (c *ClientWithResponses) ReassignFacesByIdWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error) {
	rsp, err := c.ReassignFacesById(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesByIdResponse(rsp)
}

// GetAllJobsStatusWithResponse request returning *GetAllJobsStatusResponse
func (c *ClientWithResponses) GetAllJobsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllJobsStatusResponse, error) {
	rsp, err := c.GetAllJobsStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllJobsStatusResponse(rsp)
}

// CreateJobWithBodyWithResponse request with arbitrary body returning *CreateJobResponse
func (c *ClientWithResponses) CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

func (c *ClientWithResponses) CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

// SendJobCommandWithBodyWithResponse request with arbitrary body returning *SendJobCommandResponse
func (c *ClientWithResponses) SendJobCommandWithBodyWithResponse(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error) {
	rsp, err := c.SendJobCommandWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobCommandResponse(rsp)
}

func (c *ClientWithResponses) SendJobCommandWithResponse(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error) {
	rsp, err := c.SendJobCommand(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobCommandResponse(rsp)
}

// GetAllLibrariesWithResponse request returning *GetAllLibrariesResponse
func (c *ClientWithResponses) GetAllLibrariesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllLibrariesResponse, error) {
	rsp, err := c.GetAllLibraries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLibrariesResponse(rsp)
}

// CreateLibraryWithBodyWithResponse request with arbitrary body returning *CreateLibraryResponse
func (c *ClientWithResponses) CreateLibraryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error) {
	rsp, err := c.CreateLibraryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLibraryResponse(rsp)
}

func (c *ClientWithResponses) CreateLibraryWithResponse(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error) {
	rsp, err := c.CreateLibrary(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLibraryResponse(rsp)
}

// DeleteLibraryWithResponse request returning *DeleteLibraryResponse
func (c *ClientWithResponses) DeleteLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLibraryResponse, error) {
	rsp, err := c.DeleteLibrary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLibraryResponse(rsp)
}

// GetLibraryWithResponse request returning *GetLibraryResponse
func (c *ClientWithResponses) GetLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error) {
	rsp, err := c.GetLibrary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryResponse(rsp)
}

// UpdateLibraryWithBodyWithResponse request with arbitrary body returning *UpdateLibraryResponse
func (c *ClientWithResponses) UpdateLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error) {
	rsp, err := c.UpdateLibraryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLibraryResponse(rsp)
}

func (c *ClientWithResponses) UpdateLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error) {
	rsp, err := c.UpdateLibrary(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLibraryResponse(rsp)
}

// ScanLibraryWithResponse request returning *ScanLibraryResponse
func (c *ClientWithResponses) ScanLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error) {
	rsp, err := c.ScanLibrary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanLibraryResponse(rsp)
}

// GetLibraryStatisticsWithResponse request returning *GetLibraryStatisticsResponse
func (c *ClientWithResponses) GetLibraryStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryStatisticsResponse, error) {
	rsp, err := c.GetLibraryStatistics(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryStatisticsResponse(rsp)
}

// ValidateWithBodyWithResponse request with arbitrary body returning *ValidateResponse
func (c *ClientWithResponses) ValidateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.ValidateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

func (c *ClientWithResponses) ValidateWithResponse(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.Validate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

// GetMapMarkersWithResponse request returning *GetMapMarkersResponse
func (c *ClientWithResponses) GetMapMarkersWithResponse(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*GetMapMarkersResponse, error) {
	rsp, err := c.GetMapMarkers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMarkersResponse(rsp)
}

// ReverseGeocodeWithResponse request returning *ReverseGeocodeResponse
func (c *ClientWithResponses) ReverseGeocodeWithResponse(ctx context.Context, params *ReverseGeocodeParams, reqEditors ...RequestEditorFn) (*ReverseGeocodeResponse, error) {
	rsp, err := c.ReverseGeocode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseGeocodeResponse(rsp)
}

// SearchMemoriesWithResponse request returning *SearchMemoriesResponse
func (c *ClientWithResponses) SearchMemoriesWithResponse(ctx context.Context, params *SearchMemoriesParams, reqEditors ...RequestEditorFn) (*SearchMemoriesResponse, error) {
	rsp, err := c.SearchMemories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMemoriesResponse(rsp)
}

// CreateMemoryWithBodyWithResponse request with arbitrary body returning *CreateMemoryResponse
func (c *ClientWithResponses) CreateMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error) {
	rsp, err := c.CreateMemoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoryResponse(rsp)
}

func (c *ClientWithResponses) CreateMemoryWithResponse(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error) {
	rsp, err := c.CreateMemory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoryResponse(rsp)
}

// DeleteMemoryWithResponse request returning *DeleteMemoryResponse
func (c *ClientWithResponses) DeleteMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMemoryResponse, error) {
	rsp, err := c.DeleteMemory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemoryResponse(rsp)
}

// GetMemoryWithResponse request returning *GetMemoryResponse
func (c *ClientWithResponses) GetMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMemoryResponse, error) {
	rsp, err := c.GetMemory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemoryResponse(rsp)
}

// UpdateMemoryWithBodyWithResponse request with arbitrary body returning *UpdateMemoryResponse
func (c *ClientWithResponses) UpdateMemoryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error) {
	rsp, err := c.UpdateMemoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateMemoryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error) {
	rsp, err := c.UpdateMemory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoryResponse(rsp)
}

// RemoveMemoryAssetsWithBodyWithResponse request with arbitrary body returning *RemoveMemoryAssetsResponse
func (c *ClientWithResponses) RemoveMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error) {
	rsp, err := c.RemoveMemoryAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemoryAssetsResponse(rsp)
}

func (c *ClientWithResponses) RemoveMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error) {
	rsp, err := c.RemoveMemoryAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemoryAssetsResponse(rsp)
}

// AddMemoryAssetsWithBodyWithResponse request with arbitrary body returning *AddMemoryAssetsResponse
func (c *ClientWithResponses) AddMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error) {
	rsp, err := c.AddMemoryAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemoryAssetsResponse(rsp)
}

func (c *ClientWithResponses) AddMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error) {
	rsp, err := c.AddMemoryAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemoryAssetsResponse(rsp)
}

// DeleteNotificationsWithBodyWithResponse request with arbitrary body returning *DeleteNotificationsResponse
func (c *ClientWithResponses) DeleteNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteNotificationsResponse, error) {
	rsp, err := c.DeleteNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsResponse(rsp)
}

func (c *ClientWithResponses) DeleteNotificationsWithResponse(ctx context.Context, body DeleteNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteNotificationsResponse, error) {
	rsp, err := c.DeleteNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsResponse(rsp)
}

// GetNotificationsWithResponse request returning *GetNotificationsResponse
func (c *ClientWithResponses) GetNotificationsWithResponse(ctx context.Context, params *GetNotificationsParams, reqEditors ...RequestEditorFn) (*GetNotificationsResponse, error) {
	rsp, err := c.GetNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationsResponse(rsp)
}

// UpdateNotificationsWithBodyWithResponse request with arbitrary body returning *UpdateNotificationsResponse
func (c *ClientWithResponses) UpdateNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationsResponse, error) {
	rsp, err := c.UpdateNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationsResponse(rsp)
}

func (c *ClientWithResponses) UpdateNotificationsWithResponse(ctx context.Context, body UpdateNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationsResponse, error) {
	rsp, err := c.UpdateNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationsResponse(rsp)
}

// DeleteNotificationWithResponse request returning *DeleteNotificationResponse
func (c *ClientWithResponses) DeleteNotificationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNotificationResponse, error) {
	rsp, err := c.DeleteNotification(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationResponse(rsp)
}

// GetNotificationWithResponse request returning *GetNotificationResponse
func (c *ClientWithResponses) GetNotificationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNotificationResponse, error) {
	rsp, err := c.GetNotification(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationResponse(rsp)
}

// UpdateNotificationWithBodyWithResponse request with arbitrary body returning *UpdateNotificationResponse
func (c *ClientWithResponses) UpdateNotificationWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationResponse, error) {
	rsp, err := c.UpdateNotificationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationResponse(rsp)
}

func (c *ClientWithResponses) UpdateNotificationWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationResponse, error) {
	rsp, err := c.UpdateNotification(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationResponse(rsp)
}

// StartOAuthWithBodyWithResponse request with arbitrary body returning *StartOAuthResponse
func (c *ClientWithResponses) StartOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error) {
	rsp, err := c.StartOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOAuthResponse(rsp)
}

func (c *ClientWithResponses) StartOAuthWithResponse(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error) {
	rsp, err := c.StartOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOAuthResponse(rsp)
}

// FinishOAuthWithBodyWithResponse request with arbitrary body returning *FinishOAuthResponse
func (c *ClientWithResponses) FinishOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error) {
	rsp, err := c.FinishOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishOAuthResponse(rsp)
}

func (c *ClientWithResponses) FinishOAuthWithResponse(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error) {
	rsp, err := c.FinishOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishOAuthResponse(rsp)
}

// LinkOAuthAccountWithBodyWithResponse request with arbitrary body returning *LinkOAuthAccountResponse
func (c *ClientWithResponses) LinkOAuthAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error) {
	rsp, err := c.LinkOAuthAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkOAuthAccountResponse(rsp)
}

func (c *ClientWithResponses) LinkOAuthAccountWithResponse(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error) {
	rsp, err := c.LinkOAuthAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkOAuthAccountResponse(rsp)
}

// RedirectOAuthToMobileWithResponse request returning *RedirectOAuthToMobileResponse
func (c *ClientWithResponses) RedirectOAuthToMobileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RedirectOAuthToMobileResponse, error) {
	rsp, err := c.RedirectOAuthToMobile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedirectOAuthToMobileResponse(rsp)
}

// UnlinkOAuthAccountWithResponse request returning *UnlinkOAuthAccountResponse
func (c *ClientWithResponses) UnlinkOAuthAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnlinkOAuthAccountResponse, error) {
	rsp, err := c.UnlinkOAuthAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkOAuthAccountResponse(rsp)
}

// GetPartnersWithResponse request returning *GetPartnersResponse
func (c *ClientWithResponses) GetPartnersWithResponse(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*GetPartnersResponse, error) {
	rsp, err := c.GetPartners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnersResponse(rsp)
}

// RemovePartnerWithResponse request returning *RemovePartnerResponse
func (c *ClientWithResponses) RemovePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemovePartnerResponse, error) {
	rsp, err := c.RemovePartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovePartnerResponse(rsp)
}

// CreatePartnerWithResponse request returning *CreatePartnerResponse
func (c *ClientWithResponses) CreatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreatePartnerResponse, error) {
	rsp, err := c.CreatePartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePartnerResponse(rsp)
}

// UpdatePartnerWithBodyWithResponse request with arbitrary body returning *UpdatePartnerResponse
func (c *ClientWithResponses) UpdatePartnerWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error) {
	rsp, err := c.UpdatePartnerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerResponse(rsp)
}

func (c *ClientWithResponses) UpdatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error) {
	rsp, err := c.UpdatePartner(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerResponse(rsp)
}

// GetAllPeopleWithResponse request returning *GetAllPeopleResponse
func (c *ClientWithResponses) GetAllPeopleWithResponse(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*GetAllPeopleResponse, error) {
	rsp, err := c.GetAllPeople(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPeopleResponse(rsp)
}

// CreatePersonWithBodyWithResponse request with arbitrary body returning *CreatePersonResponse
func (c *ClientWithResponses) CreatePersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error) {
	rsp, err := c.CreatePersonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersonResponse(rsp)
}

func (c *ClientWithResponses) CreatePersonWithResponse(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error) {
	rsp, err := c.CreatePerson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersonResponse(rsp)
}

// UpdatePeopleWithBodyWithResponse request with arbitrary body returning *UpdatePeopleResponse
func (c *ClientWithResponses) UpdatePeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error) {
	rsp, err := c.UpdatePeopleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePeopleResponse(rsp)
}

func (c *ClientWithResponses) UpdatePeopleWithResponse(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error) {
	rsp, err := c.UpdatePeople(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePeopleResponse(rsp)
}

// GetPersonWithResponse request returning *GetPersonResponse
func (c *ClientWithResponses) GetPersonWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonResponse, error) {
	rsp, err := c.GetPerson(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonResponse(rsp)
}

// UpdatePersonWithBodyWithResponse request with arbitrary body returning *UpdatePersonResponse
func (c *ClientWithResponses) UpdatePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error) {
	rsp, err := c.UpdatePersonWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePersonResponse(rsp)
}

func (c *ClientWithResponses) UpdatePersonWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error) {
	rsp, err := c.UpdatePerson(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePersonResponse(rsp)
}

// MergePersonWithBodyWithResponse request with arbitrary body returning *MergePersonResponse
func (c *ClientWithResponses) MergePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergePersonResponse, error) {
	rsp, err := c.MergePersonWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergePersonResponse(rsp)
}

func (c *ClientWithResponses) MergePersonWithResponse(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*MergePersonResponse, error) {
	rsp, err := c.MergePerson(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergePersonResponse(rsp)
}

// ReassignFacesWithBodyWithResponse request with arbitrary body returning *ReassignFacesResponse
func (c *ClientWithResponses) ReassignFacesWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error) {
	rsp, err := c.ReassignFacesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesResponse(rsp)
}

func (c *ClientWithResponses) ReassignFacesWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error) {
	rsp, err := c.ReassignFaces(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesResponse(rsp)
}

// GetPersonStatisticsWithResponse request returning *GetPersonStatisticsResponse
func (c *ClientWithResponses) GetPersonStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonStatisticsResponse, error) {
	rsp, err := c.GetPersonStatistics(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonStatisticsResponse(rsp)
}

// GetPersonThumbnailWithResponse request returning *GetPersonThumbnailResponse
func (c *ClientWithResponses) GetPersonThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonThumbnailResponse, error) {
	rsp, err := c.GetPersonThumbnail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonThumbnailResponse(rsp)
}

// GetAssetsByCityWithResponse request returning *GetAssetsByCityResponse
func (c *ClientWithResponses) GetAssetsByCityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetsByCityResponse, error) {
	rsp, err := c.GetAssetsByCity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsByCityResponse(rsp)
}

// GetExploreDataWithResponse request returning *GetExploreDataResponse
func (c *ClientWithResponses) GetExploreDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExploreDataResponse, error) {
	rsp, err := c.GetExploreData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExploreDataResponse(rsp)
}

// SearchAssetsWithBodyWithResponse request with arbitrary body returning *SearchAssetsResponse
func (c *ClientWithResponses) SearchAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchAssetsResponse, error) {
	rsp, err := c.SearchAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAssetsResponse(rsp)
}

func (c *ClientWithResponses) SearchAssetsWithResponse(ctx context.Context, body SearchAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchAssetsResponse, error) {
	rsp, err := c.SearchAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAssetsResponse(rsp)
}

// SearchPersonWithResponse request returning *SearchPersonResponse
func (c *ClientWithResponses) SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error) {
	rsp, err := c.SearchPerson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPersonResponse(rsp)
}

// SearchPlacesWithResponse request returning *SearchPlacesResponse
func (c *ClientWithResponses) SearchPlacesWithResponse(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*SearchPlacesResponse, error) {
	rsp, err := c.SearchPlaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPlacesResponse(rsp)
}

// SearchRandomWithBodyWithResponse request with arbitrary body returning *SearchRandomResponse
func (c *ClientWithResponses) SearchRandomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchRandomResponse, error) {
	rsp, err := c.SearchRandomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchRandomResponse(rsp)
}

func (c *ClientWithResponses) SearchRandomWithResponse(ctx context.Context, body SearchRandomJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchRandomResponse, error) {
	rsp, err := c.SearchRandom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchRandomResponse(rsp)
}

// SearchSmartWithBodyWithResponse request with arbitrary body returning *SearchSmartResponse
func (c *ClientWithResponses) SearchSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error) {
	rsp, err := c.SearchSmartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSmartResponse(rsp)
}

func (c *ClientWithResponses) SearchSmartWithResponse(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error) {
	rsp, err := c.SearchSmart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSmartResponse(rsp)
}

// GetSearchSuggestionsWithResponse request returning *GetSearchSuggestionsResponse
func (c *ClientWithResponses) GetSearchSuggestionsWithResponse(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsResponse, error) {
	rsp, err := c.GetSearchSuggestions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSuggestionsResponse(rsp)
}

// GetAboutInfoWithResponse request returning *GetAboutInfoResponse
func (c *ClientWithResponses) GetAboutInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAboutInfoResponse, error) {
	rsp, err := c.GetAboutInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAboutInfoResponse(rsp)
}

// GetServerConfigWithResponse request returning *GetServerConfigResponse
func (c *ClientWithResponses) GetServerConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error) {
	rsp, err := c.GetServerConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerConfigResponse(rsp)
}

// GetServerFeaturesWithResponse request returning *GetServerFeaturesResponse
func (c *ClientWithResponses) GetServerFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerFeaturesResponse, error) {
	rsp, err := c.GetServerFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerFeaturesResponse(rsp)
}

// DeleteServerLicenseWithResponse request returning *DeleteServerLicenseResponse
func (c *ClientWithResponses) DeleteServerLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteServerLicenseResponse, error) {
	rsp, err := c.DeleteServerLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServerLicenseResponse(rsp)
}

// GetServerLicenseWithResponse request returning *GetServerLicenseResponse
func (c *ClientWithResponses) GetServerLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerLicenseResponse, error) {
	rsp, err := c.GetServerLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerLicenseResponse(rsp)
}

// SetServerLicenseWithBodyWithResponse request with arbitrary body returning *SetServerLicenseResponse
func (c *ClientWithResponses) SetServerLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerLicenseResponse, error) {
	rsp, err := c.SetServerLicenseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerLicenseResponse(rsp)
}

func (c *ClientWithResponses) SetServerLicenseWithResponse(ctx context.Context, body SetServerLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerLicenseResponse, error) {
	rsp, err := c.SetServerLicense(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerLicenseResponse(rsp)
}

// GetSupportedMediaTypesWithResponse request returning *GetSupportedMediaTypesResponse
func (c *ClientWithResponses) GetSupportedMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedMediaTypesResponse, error) {
	rsp, err := c.GetSupportedMediaTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportedMediaTypesResponse(rsp)
}

// PingServerWithResponse request returning *PingServerResponse
func (c *ClientWithResponses) PingServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingServerResponse, error) {
	rsp, err := c.PingServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingServerResponse(rsp)
}

// GetServerStatisticsWithResponse request returning *GetServerStatisticsResponse
func (c *ClientWithResponses) GetServerStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerStatisticsResponse, error) {
	rsp, err := c.GetServerStatistics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerStatisticsResponse(rsp)
}

// GetStorageWithResponse request returning *GetStorageResponse
func (c *ClientWithResponses) GetStorageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageResponse, error) {
	rsp, err := c.GetStorage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageResponse(rsp)
}

// GetThemeWithResponse request returning *GetThemeResponse
func (c *ClientWithResponses) GetThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetThemeResponse, error) {
	rsp, err := c.GetTheme(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThemeResponse(rsp)
}

// GetServerVersionWithResponse request returning *GetServerVersionResponse
func (c *ClientWithResponses) GetServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerVersionResponse, error) {
	rsp, err := c.GetServerVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerVersionResponse(rsp)
}

// GetVersionHistoryWithResponse request returning *GetVersionHistoryResponse
func (c *ClientWithResponses) GetVersionHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionHistoryResponse, error) {
	rsp, err := c.GetVersionHistory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionHistoryResponse(rsp)
}

// DeleteAllSessionsWithResponse request returning *DeleteAllSessionsResponse
func (c *ClientWithResponses) DeleteAllSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllSessionsResponse, error) {
	rsp, err := c.DeleteAllSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllSessionsResponse(rsp)
}

// GetSessionsWithResponse request returning *GetSessionsResponse
func (c *ClientWithResponses) GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error) {
	rsp, err := c.GetSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsResponse(rsp)
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// LockSessionWithResponse request returning *LockSessionResponse
func (c *ClientWithResponses) LockSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*LockSessionResponse, error) {
	rsp, err := c.LockSession(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockSessionResponse(rsp)
}

// GetAllSharedLinksWithResponse request returning *GetAllSharedLinksResponse
func (c *ClientWithResponses) GetAllSharedLinksWithResponse(ctx context.Context, params *GetAllSharedLinksParams, reqEditors ...RequestEditorFn) (*GetAllSharedLinksResponse, error) {
	rsp, err := c.GetAllSharedLinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSharedLinksResponse(rsp)
}

// CreateSharedLinkWithBodyWithResponse request with arbitrary body returning *CreateSharedLinkResponse
func (c *ClientWithResponses) CreateSharedLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error) {
	rsp, err := c.CreateSharedLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharedLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateSharedLinkWithResponse(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error) {
	rsp, err := c.CreateSharedLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharedLinkResponse(rsp)
}

// GetMySharedLinkWithResponse request returning *GetMySharedLinkResponse
func (c *ClientWithResponses) GetMySharedLinkWithResponse(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*GetMySharedLinkResponse, error) {
	rsp, err := c.GetMySharedLink(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMySharedLinkResponse(rsp)
}

// RemoveSharedLinkWithResponse request returning *RemoveSharedLinkResponse
func (c *ClientWithResponses) RemoveSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveSharedLinkResponse, error) {
	rsp, err := c.RemoveSharedLink(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkResponse(rsp)
}

// GetSharedLinkByIdWithResponse request returning *GetSharedLinkByIdResponse
func (c *ClientWithResponses) GetSharedLinkByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSharedLinkByIdResponse, error) {
	rsp, err := c.GetSharedLinkById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedLinkByIdResponse(rsp)
}

// UpdateSharedLinkWithBodyWithResponse request with arbitrary body returning *UpdateSharedLinkResponse
func (c *ClientWithResponses) UpdateSharedLinkWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error) {
	rsp, err := c.UpdateSharedLinkWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSharedLinkResponse(rsp)
}

func (c *ClientWithResponses) UpdateSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error) {
	rsp, err := c.UpdateSharedLink(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSharedLinkResponse(rsp)
}

// RemoveSharedLinkAssetsWithBodyWithResponse request with arbitrary body returning *RemoveSharedLinkAssetsResponse
func (c *ClientWithResponses) RemoveSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error) {
	rsp, err := c.RemoveSharedLinkAssetsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkAssetsResponse(rsp)
}

func (c *ClientWithResponses) RemoveSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error) {
	rsp, err := c.RemoveSharedLinkAssets(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkAssetsResponse(rsp)
}

// AddSharedLinkAssetsWithBodyWithResponse request with arbitrary body returning *AddSharedLinkAssetsResponse
func (c *ClientWithResponses) AddSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error) {
	rsp, err := c.AddSharedLinkAssetsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSharedLinkAssetsResponse(rsp)
}

func (c *ClientWithResponses) AddSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error) {
	rsp, err := c.AddSharedLinkAssets(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSharedLinkAssetsResponse(rsp)
}

// DeleteStacksWithBodyWithResponse request with arbitrary body returning *DeleteStacksResponse
func (c *ClientWithResponses) DeleteStacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteStacksResponse, error) {
	rsp, err := c.DeleteStacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStacksResponse(rsp)
}

func (c *ClientWithResponses) DeleteStacksWithResponse(ctx context.Context, body DeleteStacksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteStacksResponse, error) {
	rsp, err := c.DeleteStacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStacksResponse(rsp)
}

// SearchStacksWithResponse request returning *SearchStacksResponse
func (c *ClientWithResponses) SearchStacksWithResponse(ctx context.Context, params *SearchStacksParams, reqEditors ...RequestEditorFn) (*SearchStacksResponse, error) {
	rsp, err := c.SearchStacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchStacksResponse(rsp)
}

// CreateStackWithBodyWithResponse request with arbitrary body returning *CreateStackResponse
func (c *ClientWithResponses) CreateStackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStackResponse, error) {
	rsp, err := c.CreateStackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStackResponse(rsp)
}

func (c *ClientWithResponses) CreateStackWithResponse(ctx context.Context, body CreateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStackResponse, error) {
	rsp, err := c.CreateStack(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStackResponse(rsp)
}

// DeleteStackWithResponse request returning *DeleteStackResponse
func (c *ClientWithResponses) DeleteStackWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteStackResponse, error) {
	rsp, err := c.DeleteStack(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStackResponse(rsp)
}

// GetStackWithResponse request returning *GetStackResponse
func (c *ClientWithResponses) GetStackWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStackResponse, error) {
	rsp, err := c.GetStack(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStackResponse(rsp)
}

// UpdateStackWithBodyWithResponse request with arbitrary body returning *UpdateStackResponse
func (c *ClientWithResponses) UpdateStackWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStackResponse, error) {
	rsp, err := c.UpdateStackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStackResponse(rsp)
}

func (c *ClientWithResponses) UpdateStackWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateStackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStackResponse, error) {
	rsp, err := c.UpdateStack(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStackResponse(rsp)
}

// DeleteSyncAckWithBodyWithResponse request with arbitrary body returning *DeleteSyncAckResponse
func (c *ClientWithResponses) DeleteSyncAckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSyncAckResponse, error) {
	rsp, err := c.DeleteSyncAckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSyncAckResponse(rsp)
}

func (c *ClientWithResponses) DeleteSyncAckWithResponse(ctx context.Context, body DeleteSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSyncAckResponse, error) {
	rsp, err := c.DeleteSyncAck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSyncAckResponse(rsp)
}

// GetSyncAckWithResponse request returning *GetSyncAckResponse
func (c *ClientWithResponses) GetSyncAckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSyncAckResponse, error) {
	rsp, err := c.GetSyncAck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncAckResponse(rsp)
}

// SendSyncAckWithBodyWithResponse request with arbitrary body returning *SendSyncAckResponse
func (c *ClientWithResponses) SendSyncAckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendSyncAckResponse, error) {
	rsp, err := c.SendSyncAckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendSyncAckResponse(rsp)
}

func (c *ClientWithResponses) SendSyncAckWithResponse(ctx context.Context, body SendSyncAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SendSyncAckResponse, error) {
	rsp, err := c.SendSyncAck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendSyncAckResponse(rsp)
}

// GetDeltaSyncWithBodyWithResponse request with arbitrary body returning *GetDeltaSyncResponse
func (c *ClientWithResponses) GetDeltaSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error) {
	rsp, err := c.GetDeltaSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaSyncResponse(rsp)
}

func (c *ClientWithResponses) GetDeltaSyncWithResponse(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error) {
	rsp, err := c.GetDeltaSync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaSyncResponse(rsp)
}

// GetFullSyncForUserWithBodyWithResponse request with arbitrary body returning *GetFullSyncForUserResponse
func (c *ClientWithResponses) GetFullSyncForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error) {
	rsp, err := c.GetFullSyncForUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFullSyncForUserResponse(rsp)
}

func (c *ClientWithResponses) GetFullSyncForUserWithResponse(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error) {
	rsp, err := c.GetFullSyncForUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFullSyncForUserResponse(rsp)
}

// GetSyncStreamWithBodyWithResponse request with arbitrary body returning *GetSyncStreamResponse
func (c *ClientWithResponses) GetSyncStreamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSyncStreamResponse, error) {
	rsp, err := c.GetSyncStreamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncStreamResponse(rsp)
}

func (c *ClientWithResponses) GetSyncStreamWithResponse(ctx context.Context, body GetSyncStreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSyncStreamResponse, error) {
	rsp, err := c.GetSyncStream(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncStreamResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// UpdateConfigWithBodyWithResponse request with arbitrary body returning *UpdateConfigResponse
func (c *ClientWithResponses) UpdateConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateConfigWithResponse(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

// GetConfigDefaultsWithResponse request returning *GetConfigDefaultsResponse
func (c *ClientWithResponses) GetConfigDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigDefaultsResponse, error) {
	rsp, err := c.GetConfigDefaults(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigDefaultsResponse(rsp)
}

// GetStorageTemplateOptionsWithResponse request returning *GetStorageTemplateOptionsResponse
func (c *ClientWithResponses) GetStorageTemplateOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageTemplateOptionsResponse, error) {
	rsp, err := c.GetStorageTemplateOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageTemplateOptionsResponse(rsp)
}

// GetAdminOnboardingWithResponse request returning *GetAdminOnboardingResponse
func (c *ClientWithResponses) GetAdminOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminOnboardingResponse, error) {
	rsp, err := c.GetAdminOnboarding(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminOnboardingResponse(rsp)
}

// UpdateAdminOnboardingWithBodyWithResponse request with arbitrary body returning *UpdateAdminOnboardingResponse
func (c *ClientWithResponses) UpdateAdminOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error) {
	rsp, err := c.UpdateAdminOnboardingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminOnboardingResponse(rsp)
}

func (c *ClientWithResponses) UpdateAdminOnboardingWithResponse(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error) {
	rsp, err := c.UpdateAdminOnboarding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminOnboardingResponse(rsp)
}

// GetReverseGeocodingStateWithResponse request returning *GetReverseGeocodingStateResponse
func (c *ClientWithResponses) GetReverseGeocodingStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReverseGeocodingStateResponse, error) {
	rsp, err := c.GetReverseGeocodingState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReverseGeocodingStateResponse(rsp)
}

// GetAllTagsWithResponse request returning *GetAllTagsResponse
func (c *ClientWithResponses) GetAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error) {
	rsp, err := c.GetAllTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// UpsertTagsWithBodyWithResponse request with arbitrary body returning *UpsertTagsResponse
func (c *ClientWithResponses) UpsertTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertTagsResponse, error) {
	rsp, err := c.UpsertTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertTagsResponse(rsp)
}

func (c *ClientWithResponses) UpsertTagsWithResponse(ctx context.Context, body UpsertTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertTagsResponse, error) {
	rsp, err := c.UpsertTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertTagsResponse(rsp)
}

// BulkTagAssetsWithBodyWithResponse request with arbitrary body returning *BulkTagAssetsResponse
func (c *ClientWithResponses) BulkTagAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkTagAssetsResponse, error) {
	rsp, err := c.BulkTagAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkTagAssetsResponse(rsp)
}

func (c *ClientWithResponses) BulkTagAssetsWithResponse(ctx context.Context, body BulkTagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkTagAssetsResponse, error) {
	rsp, err := c.BulkTagAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkTagAssetsResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagByIdWithResponse request returning *GetTagByIdResponse
func (c *ClientWithResponses) GetTagByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error) {
	rsp, err := c.GetTagById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagByIdResponse(rsp)
}

// UpdateTagWithBodyWithResponse request with arbitrary body returning *UpdateTagResponse
func (c *ClientWithResponses) UpdateTagWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTagWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTag(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

// UntagAssetsWithBodyWithResponse request with arbitrary body returning *UntagAssetsResponse
func (c *ClientWithResponses) UntagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error) {
	rsp, err := c.UntagAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUntagAssetsResponse(rsp)
}

func (c *ClientWithResponses) UntagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error) {
	rsp, err := c.UntagAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUntagAssetsResponse(rsp)
}

// TagAssetsWithBodyWithResponse request with arbitrary body returning *TagAssetsResponse
func (c *ClientWithResponses) TagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error) {
	rsp, err := c.TagAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagAssetsResponse(rsp)
}

func (c *ClientWithResponses) TagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error) {
	rsp, err := c.TagAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagAssetsResponse(rsp)
}

// GetTimeBucketWithResponse request returning *GetTimeBucketResponse
func (c *ClientWithResponses) GetTimeBucketWithResponse(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*GetTimeBucketResponse, error) {
	rsp, err := c.GetTimeBucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeBucketResponse(rsp)
}

// GetTimeBucketsWithResponse request returning *GetTimeBucketsResponse
func (c *ClientWithResponses) GetTimeBucketsWithResponse(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*GetTimeBucketsResponse, error) {
	rsp, err := c.GetTimeBuckets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeBucketsResponse(rsp)
}

// EmptyTrashWithResponse request returning *EmptyTrashResponse
func (c *ClientWithResponses) EmptyTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EmptyTrashResponse, error) {
	rsp, err := c.EmptyTrash(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmptyTrashResponse(rsp)
}

// RestoreTrashWithResponse request returning *RestoreTrashResponse
func (c *ClientWithResponses) RestoreTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestoreTrashResponse, error) {
	rsp, err := c.RestoreTrash(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreTrashResponse(rsp)
}

// RestoreAssetsWithBodyWithResponse request with arbitrary body returning *RestoreAssetsResponse
func (c *ClientWithResponses) RestoreAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error) {
	rsp, err := c.RestoreAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreAssetsResponse(rsp)
}

func (c *ClientWithResponses) RestoreAssetsWithResponse(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error) {
	rsp, err := c.RestoreAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreAssetsResponse(rsp)
}

// SearchUsersWithResponse request returning *SearchUsersResponse
func (c *ClientWithResponses) SearchUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error) {
	rsp, err := c.SearchUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsersResponse(rsp)
}

// GetMyUserWithResponse request returning *GetMyUserResponse
func (c *ClientWithResponses) GetMyUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyUserResponse, error) {
	rsp, err := c.GetMyUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyUserResponse(rsp)
}

// UpdateMyUserWithBodyWithResponse request with arbitrary body returning *UpdateMyUserResponse
func (c *ClientWithResponses) UpdateMyUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyUserResponse, error) {
	rsp, err := c.UpdateMyUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateMyUserWithResponse(ctx context.Context, body UpdateMyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyUserResponse, error) {
	rsp, err := c.UpdateMyUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyUserResponse(rsp)
}

// DeleteUserLicenseWithResponse request returning *DeleteUserLicenseResponse
func (c *ClientWithResponses) DeleteUserLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserLicenseResponse, error) {
	rsp, err := c.DeleteUserLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserLicenseResponse(rsp)
}

// GetUserLicenseWithResponse request returning *GetUserLicenseResponse
func (c *ClientWithResponses) GetUserLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserLicenseResponse, error) {
	rsp, err := c.GetUserLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserLicenseResponse(rsp)
}

// SetUserLicenseWithBodyWithResponse request with arbitrary body returning *SetUserLicenseResponse
func (c *ClientWithResponses) SetUserLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserLicenseResponse, error) {
	rsp, err := c.SetUserLicenseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserLicenseResponse(rsp)
}

func (c *ClientWithResponses) SetUserLicenseWithResponse(ctx context.Context, body SetUserLicenseJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserLicenseResponse, error) {
	rsp, err := c.SetUserLicense(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserLicenseResponse(rsp)
}

// GetMyPreferencesWithResponse request returning *GetMyPreferencesResponse
func (c *ClientWithResponses) GetMyPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyPreferencesResponse, error) {
	rsp, err := c.GetMyPreferences(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyPreferencesResponse(rsp)
}

// UpdateMyPreferencesWithBodyWithResponse request with arbitrary body returning *UpdateMyPreferencesResponse
func (c *ClientWithResponses) UpdateMyPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyPreferencesResponse, error) {
	rsp, err := c.UpdateMyPreferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyPreferencesResponse(rsp)
}

func (c *ClientWithResponses) UpdateMyPreferencesWithResponse(ctx context.Context, body UpdateMyPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyPreferencesResponse, error) {
	rsp, err := c.UpdateMyPreferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyPreferencesResponse(rsp)
}

// DeleteProfileImageWithResponse request returning *DeleteProfileImageResponse
func (c *ClientWithResponses) DeleteProfileImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error) {
	rsp, err := c.DeleteProfileImage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProfileImageResponse(rsp)
}

// CreateProfileImageWithBodyWithResponse request with arbitrary body returning *CreateProfileImageResponse
func (c *ClientWithResponses) CreateProfileImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileImageResponse, error) {
	rsp, err := c.CreateProfileImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileImageResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetProfileImageWithResponse request returning *GetProfileImageResponse
func (c *ClientWithResponses) GetProfileImageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error) {
	rsp, err := c.GetProfileImage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileImageResponse(rsp)
}

// GetAssetsByOriginalPathWithResponse request returning *GetAssetsByOriginalPathResponse
func (c *ClientWithResponses) GetAssetsByOriginalPathWithResponse(ctx context.Context, params *GetAssetsByOriginalPathParams, reqEditors ...RequestEditorFn) (*GetAssetsByOriginalPathResponse, error) {
	rsp, err := c.GetAssetsByOriginalPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsByOriginalPathResponse(rsp)
}

// GetUniqueOriginalPathsWithResponse request returning *GetUniqueOriginalPathsResponse
func (c *ClientWithResponses) GetUniqueOriginalPathsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniqueOriginalPathsResponse, error) {
	rsp, err := c.GetUniqueOriginalPaths(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniqueOriginalPathsResponse(rsp)
}

// ParseGetActivitiesResponse parses an HTTP response from a GetActivitiesWithResponse call
func ParseGetActivitiesResponse(rsp *http.Response) (*GetActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActivityResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateActivityResponse parses an HTTP response from a CreateActivityWithResponse call
func ParseCreateActivityResponse(rsp *http.Response) (*CreateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ActivityResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetActivityStatisticsResponse parses an HTTP response from a GetActivityStatisticsWithResponse call
func ParseGetActivityStatisticsResponse(rsp *http.Response) (*GetActivityStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityStatisticsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActivityResponse parses an HTTP response from a DeleteActivityWithResponse call
func ParseDeleteActivityResponse(rsp *http.Response) (*DeleteActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateNotificationResponse parses an HTTP response from a CreateNotificationWithResponse call
func ParseCreateNotificationResponse(rsp *http.Response) (*CreateNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetNotificationTemplateAdminResponse parses an HTTP response from a GetNotificationTemplateAdminWithResponse call
func ParseGetNotificationTemplateAdminResponse(rsp *http.Response) (*GetNotificationTemplateAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationTemplateAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendTestEmailAdminResponse parses an HTTP response from a SendTestEmailAdminWithResponse call
func ParseSendTestEmailAdminResponse(rsp *http.Response) (*SendTestEmailAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendTestEmailAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestEmailResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchUsersAdminResponse parses an HTTP response from a SearchUsersAdminWithResponse call
func ParseSearchUsersAdminResponse(rsp *http.Response) (*SearchUsersAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsersAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserAdminResponse parses an HTTP response from a CreateUserAdminWithResponse call
func ParseCreateUserAdminResponse(rsp *http.Response) (*CreateUserAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserAdminResponse parses an HTTP response from a DeleteUserAdminWithResponse call
func ParseDeleteUserAdminResponse(rsp *http.Response) (*DeleteUserAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserAdminResponse parses an HTTP response from a GetUserAdminWithResponse call
func ParseGetUserAdminResponse(rsp *http.Response) (*GetUserAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserAdminResponse parses an HTTP response from a UpdateUserAdminWithResponse call
func ParseUpdateUserAdminResponse(rsp *http.Response) (*UpdateUserAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserPreferencesAdminResponse parses an HTTP response from a GetUserPreferencesAdminWithResponse call
func ParseGetUserPreferencesAdminResponse(rsp *http.Response) (*GetUserPreferencesAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPreferencesAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserPreferencesAdminResponse parses an HTTP response from a UpdateUserPreferencesAdminWithResponse call
func ParseUpdateUserPreferencesAdminResponse(rsp *http.Response) (*UpdateUserPreferencesAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserPreferencesAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRestoreUserAdminResponse parses an HTTP response from a RestoreUserAdminWithResponse call
func ParseRestoreUserAdminResponse(rsp *http.Response) (*RestoreUserAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreUserAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserStatisticsAdminResponse parses an HTTP response from a GetUserStatisticsAdminWithResponse call
func ParseGetUserStatisticsAdminResponse(rsp *http.Response) (*GetUserStatisticsAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserStatisticsAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllAlbumsResponse parses an HTTP response from a GetAllAlbumsWithResponse call
func ParseGetAllAlbumsResponse(rsp *http.Response) (*GetAllAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlbumResponse parses an HTTP response from a CreateAlbumWithResponse call
func ParseCreateAlbumResponse(rsp *http.Response) (*CreateAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAlbumStatisticsResponse parses an HTTP response from a GetAlbumStatisticsWithResponse call
func ParseGetAlbumStatisticsResponse(rsp *http.Response) (*GetAlbumStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumStatisticsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlbumResponse parses an HTTP response from a DeleteAlbumWithResponse call
func ParseDeleteAlbumResponse(rsp *http.Response) (*DeleteAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlbumInfoResponse parses an HTTP response from a GetAlbumInfoWithResponse call
func ParseGetAlbumInfoResponse(rsp *http.Response) (*GetAlbumInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAlbumInfoResponse parses an HTTP response from a UpdateAlbumInfoWithResponse call
func ParseUpdateAlbumInfoResponse(rsp *http.Response) (*UpdateAlbumInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlbumInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveAssetFromAlbumResponse parses an HTTP response from a RemoveAssetFromAlbumWithResponse call
func ParseRemoveAssetFromAlbumResponse(rsp *http.Response) (*RemoveAssetFromAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAssetFromAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddAssetsToAlbumResponse parses an HTTP response from a AddAssetsToAlbumWithResponse call
func ParseAddAssetsToAlbumResponse(rsp *http.Response) (*AddAssetsToAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAssetsToAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromAlbumResponse parses an HTTP response from a RemoveUserFromAlbumWithResponse call
func ParseRemoveUserFromAlbumResponse(rsp *http.Response) (*RemoveUserFromAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAlbumUserResponse parses an HTTP response from a UpdateAlbumUserWithResponse call
func ParseUpdateAlbumUserResponse(rsp *http.Response) (*UpdateAlbumUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlbumUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddUsersToAlbumResponse parses an HTTP response from a AddUsersToAlbumWithResponse call
func ParseAddUsersToAlbumResponse(rsp *http.Response) (*AddUsersToAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUsersToAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKeysResponse parses an HTTP response from a GetApiKeysWithResponse call
func ParseGetApiKeysResponse(rsp *http.Response) (*GetApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyResponse parses an HTTP response from a CreateApiKeyWithResponse call
func ParseCreateApiKeyResponse(rsp *http.Response) (*CreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIKeyCreateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyResponse parses an HTTP response from a DeleteApiKeyWithResponse call
func ParseDeleteApiKeyResponse(rsp *http.Response) (*DeleteApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApiKeyResponse parses an HTTP response from a UpdateApiKeyWithResponse call
func ParseUpdateApiKeyResponse(rsp *http.Response) (*UpdateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssetsResponse parses an HTTP response from a DeleteAssetsWithResponse call
func ParseDeleteAssetsResponse(rsp *http.Response) (*DeleteAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadAssetResponse parses an HTTP response from a UploadAssetWithResponse call
func ParseUploadAssetResponse(rsp *http.Response) (*UploadAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AssetMediaResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateAssetsResponse parses an HTTP response from a UpdateAssetsWithResponse call
func ParseUpdateAssetsResponse(rsp *http.Response) (*UpdateAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckBulkUploadResponse parses an HTTP response from a CheckBulkUploadWithResponse call
func ParseCheckBulkUploadResponse(rsp *http.Response) (*CheckBulkUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckBulkUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetBulkUploadCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllUserAssetsByDeviceIdResponse parses an HTTP response from a GetAllUserAssetsByDeviceIdWithResponse call
func ParseGetAllUserAssetsByDeviceIdResponse(rsp *http.Response) (*GetAllUserAssetsByDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUserAssetsByDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckExistingAssetsResponse parses an HTTP response from a CheckExistingAssetsWithResponse call
func ParseCheckExistingAssetsResponse(rsp *http.Response) (*CheckExistingAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckExistingAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckExistingAssetsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRunAssetJobsResponse parses an HTTP response from a RunAssetJobsWithResponse call
func ParseRunAssetJobsResponse(rsp *http.Response) (*RunAssetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunAssetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRandomResponse parses an HTTP response from a GetRandomWithResponse call
func ParseGetRandomResponse(rsp *http.Response) (*GetRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssetStatisticsResponse parses an HTTP response from a GetAssetStatisticsWithResponse call
func ParseGetAssetStatisticsResponse(rsp *http.Response) (*GetAssetStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssetInfoResponse parses an HTTP response from a GetAssetInfoWithResponse call
func ParseGetAssetInfoResponse(rsp *http.Response) (*GetAssetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAssetResponse parses an HTTP response from a UpdateAssetWithResponse call
func ParseUpdateAssetResponse(rsp *http.Response) (*UpdateAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadAssetResponse parses an HTTP response from a DownloadAssetWithResponse call
func ParseDownloadAssetResponse(rsp *http.Response) (*DownloadAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceAssetResponse parses an HTTP response from a ReplaceAssetWithResponse call
func ParseReplaceAssetResponse(rsp *http.Response) (*ReplaceAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetMediaResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseViewAssetResponse parses an HTTP response from a ViewAssetWithResponse call
func ParseViewAssetResponse(rsp *http.Response) (*ViewAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlayAssetVideoResponse parses an HTTP response from a PlayAssetVideoWithResponse call
func ParsePlayAssetVideoResponse(rsp *http.Response) (*PlayAssetVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayAssetVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSignUpAdminResponse parses an HTTP response from a SignUpAdminWithResponse call
func ParseSignUpAdminResponse(rsp *http.Response) (*SignUpAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignUpAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseChangePasswordResponse parses an HTTP response from a ChangePasswordWithResponse call
func ParseChangePasswordResponse(rsp *http.Response) (*ChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoginResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogoutResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResetPinCodeResponse parses an HTTP response from a ResetPinCodeWithResponse call
func ParseResetPinCodeResponse(rsp *http.Response) (*ResetPinCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetPinCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetupPinCodeResponse parses an HTTP response from a SetupPinCodeWithResponse call
func ParseSetupPinCodeResponse(rsp *http.Response) (*SetupPinCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupPinCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseChangePinCodeResponse parses an HTTP response from a ChangePinCodeWithResponse call
func ParseChangePinCodeResponse(rsp *http.Response) (*ChangePinCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePinCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLockAuthSessionResponse parses an HTTP response from a LockAuthSessionWithResponse call
func ParseLockAuthSessionResponse(rsp *http.Response) (*LockAuthSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LockAuthSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnlockAuthSessionResponse parses an HTTP response from a UnlockAuthSessionWithResponse call
func ParseUnlockAuthSessionResponse(rsp *http.Response) (*UnlockAuthSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnlockAuthSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthStatusResponse parses an HTTP response from a GetAuthStatusWithResponse call
func ParseGetAuthStatusResponse(rsp *http.Response) (*GetAuthStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthStatusResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateAccessTokenResponse parses an HTTP response from a ValidateAccessTokenWithResponse call
func ParseValidateAccessTokenResponse(rsp *http.Response) (*ValidateAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateAccessTokenResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadArchiveResponse parses an HTTP response from a DownloadArchiveWithResponse call
func ParseDownloadArchiveResponse(rsp *http.Response) (*DownloadArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDownloadInfoResponse parses an HTTP response from a GetDownloadInfoWithResponse call
func ParseGetDownloadInfoResponse(rsp *http.Response) (*GetDownloadInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDownloadInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DownloadResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAssetDuplicatesResponse parses an HTTP response from a GetAssetDuplicatesWithResponse call
func ParseGetAssetDuplicatesResponse(rsp *http.Response) (*GetAssetDuplicatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetDuplicatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DuplicateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFacesResponse parses an HTTP response from a GetFacesWithResponse call
func ParseGetFacesResponse(rsp *http.Response) (*GetFacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetFaceResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFaceResponse parses an HTTP response from a CreateFaceWithResponse call
func ParseCreateFaceResponse(rsp *http.Response) (*CreateFaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteFaceResponse parses an HTTP response from a DeleteFaceWithResponse call
func ParseDeleteFaceResponse(rsp *http.Response) (*DeleteFaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReassignFacesByIdResponse parses an HTTP response from a ReassignFacesByIdWithResponse call
func ParseReassignFacesByIdResponse(rsp *http.Response) (*ReassignFacesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReassignFacesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllJobsStatusResponse parses an HTTP response from a GetAllJobsStatusWithResponse call
func ParseGetAllJobsStatusResponse(rsp *http.Response) (*GetAllJobsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllJobsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllJobStatusResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJobResponse parses an HTTP response from a CreateJobWithResponse call
func ParseCreateJobResponse(rsp *http.Response) (*CreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSendJobCommandResponse parses an HTTP response from a SendJobCommandWithResponse call
func ParseSendJobCommandResponse(rsp *http.Response) (*SendJobCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendJobCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobStatusDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllLibrariesResponse parses an HTTP response from a GetAllLibrariesWithResponse call
func ParseGetAllLibrariesResponse(rsp *http.Response) (*GetAllLibrariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLibrariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLibraryResponse parses an HTTP response from a CreateLibraryWithResponse call
func ParseCreateLibraryResponse(rsp *http.Response) (*CreateLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteLibraryResponse parses an HTTP response from a DeleteLibraryWithResponse call
func ParseDeleteLibraryResponse(rsp *http.Response) (*DeleteLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLibraryResponse parses an HTTP response from a GetLibraryWithResponse call
func ParseGetLibraryResponse(rsp *http.Response) (*GetLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLibraryResponse parses an HTTP response from a UpdateLibraryWithResponse call
func ParseUpdateLibraryResponse(rsp *http.Response) (*UpdateLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScanLibraryResponse parses an HTTP response from a ScanLibraryWithResponse call
func ParseScanLibraryResponse(rsp *http.Response) (*ScanLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScanLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLibraryStatisticsResponse parses an HTTP response from a GetLibraryStatisticsWithResponse call
func ParseGetLibraryStatisticsResponse(rsp *http.Response) (*GetLibraryStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateResponse parses an HTTP response from a ValidateWithResponse call
func ParseValidateResponse(rsp *http.Response) (*ValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateLibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapMarkersResponse parses an HTTP response from a GetMapMarkersWithResponse call
func ParseGetMapMarkersResponse(rsp *http.Response) (*GetMapMarkersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMarkersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MapMarkerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReverseGeocodeResponse parses an HTTP response from a ReverseGeocodeWithResponse call
func ParseReverseGeocodeResponse(rsp *http.Response) (*ReverseGeocodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverseGeocodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MapReverseGeocodeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchMemoriesResponse parses an HTTP response from a SearchMemoriesWithResponse call
func ParseSearchMemoriesResponse(rsp *http.Response) (*SearchMemoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMemoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMemoryResponse parses an HTTP response from a CreateMemoryWithResponse call
func ParseCreateMemoryResponse(rsp *http.Response) (*CreateMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteMemoryResponse parses an HTTP response from a DeleteMemoryWithResponse call
func ParseDeleteMemoryResponse(rsp *http.Response) (*DeleteMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMemoryResponse parses an HTTP response from a GetMemoryWithResponse call
func ParseGetMemoryResponse(rsp *http.Response) (*GetMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMemoryResponse parses an HTTP response from a UpdateMemoryWithResponse call
func ParseUpdateMemoryResponse(rsp *http.Response) (*UpdateMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMemoryAssetsResponse parses an HTTP response from a RemoveMemoryAssetsWithResponse call
func ParseRemoveMemoryAssetsResponse(rsp *http.Response) (*RemoveMemoryAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMemoryAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMemoryAssetsResponse parses an HTTP response from a AddMemoryAssetsWithResponse call
func ParseAddMemoryAssetsResponse(rsp *http.Response) (*AddMemoryAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMemoryAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNotificationsResponse parses an HTTP response from a DeleteNotificationsWithResponse call
func ParseDeleteNotificationsResponse(rsp *http.Response) (*DeleteNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNotificationsResponse parses an HTTP response from a GetNotificationsWithResponse call
func ParseGetNotificationsResponse(rsp *http.Response) (*GetNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNotificationsResponse parses an HTTP response from a UpdateNotificationsWithResponse call
func ParseUpdateNotificationsResponse(rsp *http.Response) (*UpdateNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteNotificationResponse parses an HTTP response from a DeleteNotificationWithResponse call
func ParseDeleteNotificationResponse(rsp *http.Response) (*DeleteNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNotificationResponse parses an HTTP response from a GetNotificationWithResponse call
func ParseGetNotificationResponse(rsp *http.Response) (*GetNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateNotificationResponse parses an HTTP response from a UpdateNotificationWithResponse call
func ParseUpdateNotificationResponse(rsp *http.Response) (*UpdateNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartOAuthResponse parses an HTTP response from a StartOAuthWithResponse call
func ParseStartOAuthResponse(rsp *http.Response) (*StartOAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OAuthAuthorizeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFinishOAuthResponse parses an HTTP response from a FinishOAuthWithResponse call
func ParseFinishOAuthResponse(rsp *http.Response) (*FinishOAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinishOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoginResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLinkOAuthAccountResponse parses an HTTP response from a LinkOAuthAccountWithResponse call
func ParseLinkOAuthAccountResponse(rsp *http.Response) (*LinkOAuthAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkOAuthAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRedirectOAuthToMobileResponse parses an HTTP response from a RedirectOAuthToMobileWithResponse call
func ParseRedirectOAuthToMobileResponse(rsp *http.Response) (*RedirectOAuthToMobileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedirectOAuthToMobileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnlinkOAuthAccountResponse parses an HTTP response from a UnlinkOAuthAccountWithResponse call
func ParseUnlinkOAuthAccountResponse(rsp *http.Response) (*UnlinkOAuthAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnlinkOAuthAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPartnersResponse parses an HTTP response from a GetPartnersWithResponse call
func ParseGetPartnersResponse(rsp *http.Response) (*GetPartnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemovePartnerResponse parses an HTTP response from a RemovePartnerWithResponse call
func ParseRemovePartnerResponse(rsp *http.Response) (*RemovePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePartnerResponse parses an HTTP response from a CreatePartnerWithResponse call
func ParseCreatePartnerResponse(rsp *http.Response) (*CreatePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePartnerResponse parses an HTTP response from a UpdatePartnerWithResponse call
func ParseUpdatePartnerResponse(rsp *http.Response) (*UpdatePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllPeopleResponse parses an HTTP response from a GetAllPeopleWithResponse call
func ParseGetAllPeopleResponse(rsp *http.Response) (*GetAllPeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeopleResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePersonResponse parses an HTTP response from a CreatePersonWithResponse call
func ParseCreatePersonResponse(rsp *http.Response) (*CreatePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePeopleResponse parses an HTTP response from a UpdatePeopleWithResponse call
func ParseUpdatePeopleResponse(rsp *http.Response) (*UpdatePeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonResponse parses an HTTP response from a GetPersonWithResponse call
func ParseGetPersonResponse(rsp *http.Response) (*GetPersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePersonResponse parses an HTTP response from a UpdatePersonWithResponse call
func ParseUpdatePersonResponse(rsp *http.Response) (*UpdatePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMergePersonResponse parses an HTTP response from a MergePersonWithResponse call
func ParseMergePersonResponse(rsp *http.Response) (*MergePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MergePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReassignFacesResponse parses an HTTP response from a ReassignFacesWithResponse call
func ParseReassignFacesResponse(rsp *http.Response) (*ReassignFacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReassignFacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonStatisticsResponse parses an HTTP response from a GetPersonStatisticsWithResponse call
func ParseGetPersonStatisticsResponse(rsp *http.Response) (*GetPersonStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonStatisticsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonThumbnailResponse parses an HTTP response from a GetPersonThumbnailWithResponse call
func ParseGetPersonThumbnailResponse(rsp *http.Response) (*GetPersonThumbnailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonThumbnailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetsByCityResponse parses an HTTP response from a GetAssetsByCityWithResponse call
func ParseGetAssetsByCityResponse(rsp *http.Response) (*GetAssetsByCityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsByCityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExploreDataResponse parses an HTTP response from a GetExploreDataWithResponse call
func ParseGetExploreDataResponse(rsp *http.Response) (*GetExploreDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExploreDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchExploreResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchAssetsResponse parses an HTTP response from a SearchAssetsWithResponse call
func ParseSearchAssetsResponse(rsp *http.Response) (*SearchAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchPersonResponse parses an HTTP response from a SearchPersonWithResponse call
func ParseSearchPersonResponse(rsp *http.Response) (*SearchPersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchPlacesResponse parses an HTTP response from a SearchPlacesWithResponse call
func ParseSearchPlacesResponse(rsp *http.Response) (*SearchPlacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPlacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PlacesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchRandomResponse parses an HTTP response from a SearchRandomWithResponse call
func ParseSearchRandomResponse(rsp *http.Response) (*SearchRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSmartResponse parses an HTTP response from a SearchSmartWithResponse call
func ParseSearchSmartResponse(rsp *http.Response) (*SearchSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchSuggestionsResponse parses an HTTP response from a GetSearchSuggestionsWithResponse call
func ParseGetSearchSuggestionsResponse(rsp *http.Response) (*GetSearchSuggestionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSuggestionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAboutInfoResponse parses an HTTP response from a GetAboutInfoWithResponse call
func ParseGetAboutInfoResponse(rsp *http.Response) (*GetAboutInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAboutInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerAboutResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerConfigResponse parses an HTTP response from a GetServerConfigWithResponse call
func ParseGetServerConfigResponse(rsp *http.Response) (*GetServerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerFeaturesResponse parses an HTTP response from a GetServerFeaturesWithResponse call
func ParseGetServerFeaturesResponse(rsp *http.Response) (*GetServerFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerFeaturesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServerLicenseResponse parses an HTTP response from a DeleteServerLicenseWithResponse call
func ParseDeleteServerLicenseResponse(rsp *http.Response) (*DeleteServerLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServerLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerLicenseResponse parses an HTTP response from a GetServerLicenseWithResponse call
func ParseGetServerLicenseResponse(rsp *http.Response) (*GetServerLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetServerLicenseResponse parses an HTTP response from a SetServerLicenseWithResponse call
func ParseSetServerLicenseResponse(rsp *http.Response) (*SetServerLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetServerLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSupportedMediaTypesResponse parses an HTTP response from a GetSupportedMediaTypesWithResponse call
func ParseGetSupportedMediaTypesResponse(rsp *http.Response) (*GetSupportedMediaTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportedMediaTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerMediaTypesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePingServerResponse parses an HTTP response from a PingServerWithResponse call
func ParsePingServerResponse(rsp *http.Response) (*PingServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerPingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerStatisticsResponse parses an HTTP response from a GetServerStatisticsWithResponse call
func ParseGetServerStatisticsResponse(rsp *http.Response) (*GetServerStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageResponse parses an HTTP response from a GetStorageWithResponse call
func ParseGetStorageResponse(rsp *http.Response) (*GetStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerStorageResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetThemeResponse parses an HTTP response from a GetThemeWithResponse call
func ParseGetThemeResponse(rsp *http.Response) (*GetThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerThemeDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerVersionResponse parses an HTTP response from a GetServerVersionWithResponse call
func ParseGetServerVersionResponse(rsp *http.Response) (*GetServerVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerVersionResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionHistoryResponse parses an HTTP response from a GetVersionHistoryWithResponse call
func ParseGetVersionHistoryResponse(rsp *http.Response) (*GetVersionHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServerVersionHistoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAllSessionsResponse parses an HTTP response from a DeleteAllSessionsWithResponse call
func ParseDeleteAllSessionsResponse(rsp *http.Response) (*DeleteAllSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSessionsResponse parses an HTTP response from a GetSessionsWithResponse call
func ParseGetSessionsResponse(rsp *http.Response) (*GetSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SessionResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SessionCreateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLockSessionResponse parses an HTTP response from a LockSessionWithResponse call
func ParseLockSessionResponse(rsp *http.Response) (*LockSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LockSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllSharedLinksResponse parses an HTTP response from a GetAllSharedLinksWithResponse call
func ParseGetAllSharedLinksResponse(rsp *http.Response) (*GetAllSharedLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSharedLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSharedLinkResponse parses an HTTP response from a CreateSharedLinkWithResponse call
func ParseCreateSharedLinkResponse(rsp *http.Response) (*CreateSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMySharedLinkResponse parses an HTTP response from a GetMySharedLinkWithResponse call
func ParseGetMySharedLinkResponse(rsp *http.Response) (*GetMySharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMySharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveSharedLinkResponse parses an HTTP response from a RemoveSharedLinkWithResponse call
func ParseRemoveSharedLinkResponse(rsp *http.Response) (*RemoveSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharedLinkByIdResponse parses an HTTP response from a GetSharedLinkByIdWithResponse call
func ParseGetSharedLinkByIdResponse(rsp *http.Response) (*GetSharedLinkByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedLinkByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSharedLinkResponse parses an HTTP response from a UpdateSharedLinkWithResponse call
func ParseUpdateSharedLinkResponse(rsp *http.Response) (*UpdateSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveSharedLinkAssetsResponse parses an HTTP response from a RemoveSharedLinkAssetsWithResponse call
func ParseRemoveSharedLinkAssetsResponse(rsp *http.Response) (*RemoveSharedLinkAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSharedLinkAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddSharedLinkAssetsResponse parses an HTTP response from a AddSharedLinkAssetsWithResponse call
func ParseAddSharedLinkAssetsResponse(rsp *http.Response) (*AddSharedLinkAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSharedLinkAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStacksResponse parses an HTTP response from a DeleteStacksWithResponse call
func ParseDeleteStacksResponse(rsp *http.Response) (*DeleteStacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchStacksResponse parses an HTTP response from a SearchStacksWithResponse call
func ParseSearchStacksResponse(rsp *http.Response) (*SearchStacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchStacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StackResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStackResponse parses an HTTP response from a CreateStackWithResponse call
func ParseCreateStackResponse(rsp *http.Response) (*CreateStackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StackResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteStackResponse parses an HTTP response from a DeleteStackWithResponse call
func ParseDeleteStackResponse(rsp *http.Response) (*DeleteStackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStackResponse parses an HTTP response from a GetStackWithResponse call
func ParseGetStackResponse(rsp *http.Response) (*GetStackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateStackResponse parses an HTTP response from a UpdateStackWithResponse call
func ParseUpdateStackResponse(rsp *http.Response) (*UpdateStackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSyncAckResponse parses an HTTP response from a DeleteSyncAckWithResponse call
func ParseDeleteSyncAckResponse(rsp *http.Response) (*DeleteSyncAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSyncAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSyncAckResponse parses an HTTP response from a GetSyncAckWithResponse call
func ParseGetSyncAckResponse(rsp *http.Response) (*GetSyncAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SyncAckDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendSyncAckResponse parses an HTTP response from a SendSyncAckWithResponse call
func ParseSendSyncAckResponse(rsp *http.Response) (*SendSyncAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendSyncAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDeltaSyncResponse parses an HTTP response from a GetDeltaSyncWithResponse call
func ParseGetDeltaSyncResponse(rsp *http.Response) (*GetDeltaSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeltaSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetDeltaSyncResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFullSyncForUserResponse parses an HTTP response from a GetFullSyncForUserWithResponse call
func ParseGetFullSyncForUserResponse(rsp *http.Response) (*GetFullSyncForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFullSyncForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSyncStreamResponse parses an HTTP response from a GetSyncStreamWithResponse call
func ParseGetSyncStreamResponse(rsp *http.Response) (*GetSyncStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConfigResponse parses an HTTP response from a UpdateConfigWithResponse call
func ParseUpdateConfigResponse(rsp *http.Response) (*UpdateConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigDefaultsResponse parses an HTTP response from a GetConfigDefaultsWithResponse call
func ParseGetConfigDefaultsResponse(rsp *http.Response) (*GetConfigDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageTemplateOptionsResponse parses an HTTP response from a GetStorageTemplateOptionsWithResponse call
func ParseGetStorageTemplateOptionsResponse(rsp *http.Response) (*GetStorageTemplateOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageTemplateOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigTemplateStorageOptionDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminOnboardingResponse parses an HTTP response from a GetAdminOnboardingWithResponse call
func ParseGetAdminOnboardingResponse(rsp *http.Response) (*GetAdminOnboardingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminOnboardingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminOnboardingUpdateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAdminOnboardingResponse parses an HTTP response from a UpdateAdminOnboardingWithResponse call
func ParseUpdateAdminOnboardingResponse(rsp *http.Response) (*UpdateAdminOnboardingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAdminOnboardingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReverseGeocodingStateResponse parses an HTTP response from a GetReverseGeocodingStateWithResponse call
func ParseGetReverseGeocodingStateResponse(rsp *http.Response) (*GetReverseGeocodingStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReverseGeocodingStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReverseGeocodingStateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllTagsResponse parses an HTTP response from a GetAllTagsWithResponse call
func ParseGetAllTagsResponse(rsp *http.Response) (*GetAllTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpsertTagsResponse parses an HTTP response from a UpsertTagsWithResponse call
func ParseUpsertTagsResponse(rsp *http.Response) (*UpsertTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBulkTagAssetsResponse parses an HTTP response from a BulkTagAssetsWithResponse call
func ParseBulkTagAssetsResponse(rsp *http.Response) (*BulkTagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkTagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagBulkAssetsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagByIdResponse parses an HTTP response from a GetTagByIdWithResponse call
func ParseGetTagByIdResponse(rsp *http.Response) (*GetTagByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTagResponse parses an HTTP response from a UpdateTagWithResponse call
func ParseUpdateTagResponse(rsp *http.Response) (*UpdateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUntagAssetsResponse parses an HTTP response from a UntagAssetsWithResponse call
func ParseUntagAssetsResponse(rsp *http.Response) (*UntagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UntagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagAssetsResponse parses an HTTP response from a TagAssetsWithResponse call
func ParseTagAssetsResponse(rsp *http.Response) (*TagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeBucketResponse parses an HTTP response from a GetTimeBucketWithResponse call
func ParseGetTimeBucketResponse(rsp *http.Response) (*GetTimeBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeBucketAssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeBucketsResponse parses an HTTP response from a GetTimeBucketsWithResponse call
func ParseGetTimeBucketsResponse(rsp *http.Response) (*GetTimeBucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimeBucketsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmptyTrashResponse parses an HTTP response from a EmptyTrashWithResponse call
func ParseEmptyTrashResponse(rsp *http.Response) (*EmptyTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmptyTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrashResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRestoreTrashResponse parses an HTTP response from a RestoreTrashWithResponse call
func ParseRestoreTrashResponse(rsp *http.Response) (*RestoreTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrashResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRestoreAssetsResponse parses an HTTP response from a RestoreAssetsWithResponse call
func ParseRestoreAssetsResponse(rsp *http.Response) (*RestoreAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrashResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchUsersResponse parses an HTTP response from a SearchUsersWithResponse call
func ParseSearchUsersResponse(rsp *http.Response) (*SearchUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyUserResponse parses an HTTP response from a GetMyUserWithResponse call
func ParseGetMyUserResponse(rsp *http.Response) (*GetMyUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMyUserResponse parses an HTTP response from a UpdateMyUserWithResponse call
func ParseUpdateMyUserResponse(rsp *http.Response) (*UpdateMyUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMyUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAdminResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserLicenseResponse parses an HTTP response from a DeleteUserLicenseWithResponse call
func ParseDeleteUserLicenseResponse(rsp *http.Response) (*DeleteUserLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserLicenseResponse parses an HTTP response from a GetUserLicenseWithResponse call
func ParseGetUserLicenseResponse(rsp *http.Response) (*GetUserLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetUserLicenseResponse parses an HTTP response from a SetUserLicenseWithResponse call
func ParseSetUserLicenseResponse(rsp *http.Response) (*SetUserLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyPreferencesResponse parses an HTTP response from a GetMyPreferencesWithResponse call
func ParseGetMyPreferencesResponse(rsp *http.Response) (*GetMyPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMyPreferencesResponse parses an HTTP response from a UpdateMyPreferencesWithResponse call
func ParseUpdateMyPreferencesResponse(rsp *http.Response) (*UpdateMyPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMyPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProfileImageResponse parses an HTTP response from a DeleteProfileImageWithResponse call
func ParseDeleteProfileImageResponse(rsp *http.Response) (*DeleteProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateProfileImageResponse parses an HTTP response from a CreateProfileImageWithResponse call
func ParseCreateProfileImageResponse(rsp *http.Response) (*CreateProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateProfileImageResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfileImageResponse parses an HTTP response from a GetProfileImageWithResponse call
func ParseGetProfileImageResponse(rsp *http.Response) (*GetProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetsByOriginalPathResponse parses an HTTP response from a GetAssetsByOriginalPathWithResponse call
func ParseGetAssetsByOriginalPathResponse(rsp *http.Response) (*GetAssetsByOriginalPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsByOriginalPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUniqueOriginalPathsResponse parses an HTTP response from a GetUniqueOriginalPathsWithResponse call
func ParseGetUniqueOriginalPathsResponse(rsp *http.Response) (*GetUniqueOriginalPathsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniqueOriginalPathsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
